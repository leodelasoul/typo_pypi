{
   "rows": {
      "six": [
         {
            "author": "Gabriel Alves",
            "author_email": "gabriel.alves@pickcells.bio",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# sx\n#### Framework to manage gRPC-based microservices application",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "https://github.com/itsmealves/sx/releases/download/0.6.0/sx-0.6.0.tar.gz",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/itsmealves/sx",
            "keywords": "sx microservices rpc grpc Framework",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "sx",
            "package_url": "https://pypi.org/project/sx/",
            "platform": "",
            "project_url": "https://pypi.org/project/sx/",
            "project_urls": {
               "Download": "https://github.com/itsmealves/sx/releases/download/0.6.0/sx-0.6.0.tar.gz",
               "Homepage": "https://github.com/itsmealves/sx"
            },
            "release_url": "https://pypi.org/project/sx/0.6.0/",
            "requires_dist": null,
            "requires_python": ">=3.5",
            "summary": "Framework to manage gRPC-based microservices application",
            "version": "0.6.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "chrysn",
            "author_email": "chrysn@fsfe.org",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 3 - Alpha",
               "Intended Audience :: Education",
               "Intended Audience :: Science/Research",
               "License :: OSI Approved :: GNU General Public License (GPL)"
            ],
            "description": "UNKNOWN",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "UNKNOWN",
            "keywords": null,
            "license": "GPL",
            "maintainer": null,
            "maintainer_email": null,
            "name": "si",
            "package_url": "https://pypi.org/project/si/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/si/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "UNKNOWN"
            },
            "release_url": "https://pypi.org/project/si/0.1.1-1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Module to represent SI units",
            "version": "0.1.1-1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "leesoar",
            "author_email": "secure@tom.com",
            "bugtrack_url": null,
            "classifiers": [
               "License :: OSI Approved :: MIT License",
               "Programming Language :: Python :: 3.5",
               "Programming Language :: Python :: 3.6",
               "Programming Language :: Python :: 3.7",
               "Programming Language :: Python :: Implementation :: CPython",
               "Programming Language :: Python :: Implementation :: PyPy"
            ],
            "description": "\nDevelop soon\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://leesoar.com",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ida",
            "package_url": "https://pypi.org/project/ida/",
            "platform": "",
            "project_url": "https://pypi.org/project/ida/",
            "project_urls": {
               "Homepage": "https://leesoar.com"
            },
            "release_url": "https://pypi.org/project/ida/0.0.1/",
            "requires_dist": null,
            "requires_python": ">=3.3.0",
            "summary": "Develop soon",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Xavier Bruhiere",
            "author_email": "xavier.bruhiere@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 2 - Pre-Alpha",
               "Intended Audience :: Science/Research",
               "License :: OSI Approved :: Apache Software License",
               "Natural Language :: English",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2.7",
               "Topic :: Software Development",
               "Topic :: System :: Shells"
            ],
            "description": "python library DNA\n==================\n\n[![Coverage Status](https://coveralls.io/repos/hivetech/dna/badge.png)](https://coveralls.io/r/hivetech/dna)\n\n> Generic python utilities\n\nInstallation\n------------\n\n```console\npip install dna\n```\n\nExample\n-----\n\n```python\nimport dna.utils as utils\nimport dna.logger as logger\n\nlog_setup = logger.setup(level='info', filename='app.log')\nlog = logger.logger(__name__)\nwith log_setup.applicationbound():\n\n    log.info('hello', where='world')\n\n    useless_id = utils.generate_unique_id()\n    useless_name = utils.generate_random_name()\n\n    if utils.docker_check() and utils.is_running('ipyhon'):\n\n        print utils.Version('0.4.1')\n\n        module = utils.dynamic_import('dna.settings', 'LOG')\n        print utils.emphasis(module, align=False)\n\n        print utils.self_ip()\n```",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/hivetech/dna",
            "keywords": null,
            "license": "Apache 2.0",
            "maintainer": null,
            "maintainer_email": null,
            "name": "dna",
            "package_url": "https://pypi.org/project/dna/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/dna/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/hivetech/dna"
            },
            "release_url": "https://pypi.org/project/dna/0.0.7/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Generic python utilities",
            "version": "0.0.7",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Christopher Brown",
            "author_email": "io@henrian.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 2 - Pre-Alpha",
               "License :: OSI Approved :: MIT License",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.6",
               "Programming Language :: Python :: 2.7",
               "Topic :: Software Development :: Libraries :: Python Modules",
               "Topic :: System :: Archiving :: Packaging",
               "Topic :: System :: Filesystems"
            ],
            "description": "Python (package) installation\n-----------------------------\n\nGetting started from `PyPI <https://pypi.python.org/pypi/pi/>`__:\n\n::\n\n    easy_install pi\n\n`Whence easy\\_install? <#setuptools>`__\n\nCommands\n--------\n\n-  Uninstall package named \"pip\":\n\n   ::\n\n       pi uninstall pip\n\n-  Install package named \"filesequence\":\n\n   ::\n\n       pi install filesequence\n\n-  List paths that Python searches for imported modules:\n\n   ::\n\n       pi paths\n\n-  List installed packages:\n\n   ::\n\n       pi list\n\nTesting\n-------\n\nContinuous integration:\n\n|Travis CI Build Status|\n\nOr run tests locally:\n\n::\n\n    nosetests --with-doctest\n\nRelated\n~~~~~~~\n\n-  http://guide.python-distribute.org/creation.html\n-  `distribute/pkg\\_resources\n   docs <http://pythonhosted.org/distribute/pkg_resources.html>`__\n-  standard library\n   ```site`` <http://docs.python.org/2/library/site.html>`__\n-  standard library `environment\n   variables <http://docs.python.org/2/using/cmdline.html#environment-variables>`__\n\nSetuptools\n~~~~~~~~~~\n\n``pi`` does not yet completely replace\n`setuptools <https://pypi.python.org/pypi/setuptools>`__. You may need\nto install it first:\n\n+----------+-----------------------------------------+\n| Distro   | Package manager command                 |\n+==========+=========================================+\n| Ubuntu   | ``apt-get install python-setuptools``   |\n+----------+-----------------------------------------+\n| Mac      | built-in                                |\n+----------+-----------------------------------------+\n| Arch     | ``pacman -S python-setuptools``         |\n+----------+-----------------------------------------+\n| CentOS   | ``yum install python-setuptools``       |\n+----------+-----------------------------------------+\n\nLicense\n-------\n\nCopyright (c) 2013 Christopher Brown. `MIT\nLicensed <https://raw.github.com/chbrown/pi/master/LICENSE>`__.\n\n.. |Travis CI Build Status| image:: https://travis-ci.org/chbrown/pi.png?branch=master\n   :target: https://travis-ci.org/chbrown/pi",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/chbrown/pi",
            "keywords": null,
            "license": "Copyright (c) 2013 Christopher Brown\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.",
            "maintainer": null,
            "maintainer_email": null,
            "name": "pi",
            "package_url": "https://pypi.org/project/pi/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/pi/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/chbrown/pi"
            },
            "release_url": "https://pypi.org/project/pi/0.1.2/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Simpler python package installation",
            "version": "0.1.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ip",
            "package_url": "https://pypi.org/project/ip/",
            "platform": "",
            "project_url": "https://pypi.org/project/ip/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/ip/0.0.1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Vitalii Vanovschi",
            "author_email": "support@parallelpython.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Natural Language :: English",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Topic :: Software Development",
               "Topic :: System :: Distributed Computing"
            ],
            "description": "Parallel Python module (PP) provides an easy and efficient way to create parallel-enabled applications for SMP computers and clusters. PP module features cross-platform portability and dynamic load balancing. Thus application written with PP will parallelize efficiently even on heterogeneous and multi-platform clusters (including clusters running other application with variable CPU loads). Visit http://www.parallelpython.com for further information.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "http://www.parallelpython.com/downloads/pp/pp-1.6.5.zip",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "http://www.parallelpython.com",
            "keywords": null,
            "license": "BSD-like",
            "maintainer": null,
            "maintainer_email": null,
            "name": "pp",
            "package_url": "https://pypi.org/project/pp/",
            "platform": "Windows,Linux,Unix",
            "project_url": "https://pypi.org/project/pp/",
            "project_urls": {
               "Download": "http://www.parallelpython.com/downloads/pp/pp-1.6.5.zip",
               "Homepage": "http://www.parallelpython.com"
            },
            "release_url": "https://pypi.org/project/pp/1.6.5/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Parallel and distributed programming for Python",
            "version": "1.6.5",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Marcus Donnelly",
            "author_email": "marcus.k.donnelly@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "Intended Audience :: Science/Research",
               "License :: OSI Approved :: BSD License",
               "Programming Language :: Python :: 3",
               "Topic :: Scientific/Engineering"
            ],
            "description": "",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "Oceanography,Utilities",
            "license": "BSD",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ocutils",
            "package_url": "https://pypi.org/project/ocutils/",
            "platform": "",
            "project_url": "https://pypi.org/project/ocutils/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/ocutils/1.1.1/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Utility functions for oceanography related work",
            "version": "1.1.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Kiana Alessandra V. Villaera",
            "author_email": "kiana.villaera@senti.com.ph",
            "bugtrack_url": null,
            "classifiers": [
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 3"
            ],
            "description": "Contains everything you might need to perform essential data center functions\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/K-Winkles/dcutils",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dcutils",
            "package_url": "https://pypi.org/project/dcutils/",
            "platform": "",
            "project_url": "https://pypi.org/project/dcutils/",
            "project_urls": {
               "Homepage": "https://github.com/K-Winkles/dcutils"
            },
            "release_url": "https://pypi.org/project/dcutils/0.6/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "A simple package for data center utilities",
            "version": "0.6",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Mike Kazantsev",
            "author_email": "mk.fraggod@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Intended Audience :: Developers",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3.5",
               "Topic :: Software Development",
               "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description": "pretty-yaml (or pyaml)\n======================\n\nPyYAML-based python module to produce pretty and readable YAML-serialized data.\n\nThis module is for serialization only, see `ruamel.yaml`_ module for literate\nYAML parsing (keeping track of comments, spacing, line/column numbers of values, etc).\n\n[note: to dump stuff parsed by ruamel.yaml with this module, use only ``YAML(typ='safe')`` there]\n\n.. contents::\n  :backlinks: none\n\n\nWarning\n-------\n\nPrime goal of this module is to produce human-readable output that can be easily\nmanipulated and re-used, but maybe with some occasional caveats.\n\nOne good example of such \"caveat\" is that e.g. ``{'foo': '123'}`` will serialize\nto ``foo: 123``, which for PyYAML would be a bug, as 123 will then be read back\nas an integer from that, but here it's a feature.\n\nSo please do not rely on the thing to produce output that can always be\ndeserialized exactly to what was exported, at least - use PyYAML (e.g. with\noptions from the next section) for that.\n\n\nWhat this module does and why\n-----------------------------\n\nYAML is generally nice and easy format to read *if* it was written by humans.\n\nPyYAML can a do fairly decent job of making stuff readable, and the best\ncombination of parameters for such output that I've seen so far is probably this one::\n\n  >>> m = [123, 45.67, {1: None, 2: False}, u'some text']\n  >>> data = dict(a=u'asldnsa\\nasldpáknsa\\n', b=u'whatever text', ma=m, mb=m)\n  >>> yaml.safe_dump(data, sys.stdout, allow_unicode=True, default_flow_style=False)\n  a: 'asldnsa\n\n    asldpáknsa\n\n    '\n  b: whatever text\n  ma: &id001\n  - 123\n  - 45.67\n  - 1: null\n    2: false\n  - some text\n  mb: *id001\n\npyaml tries to improve on that a bit, with the following tweaks:\n\n* Most human-friendly representation options in PyYAML (that I know of) get\n  picked as defaults.\n\n* Does not dump \"null\" values, if possible, replacing these with just empty\n  strings, which have the same meaning but reduce visual clutter and are easier\n  to edit.\n\n* Dicts, sets, OrderedDicts, defaultdicts, namedtuples, etc are representable\n  and get sorted on output (OrderedDicts and namedtuples keep their ordering),\n  so that output would be as diff-friendly as possible, and not arbitrarily\n  depend on python internals.\n\n  It appears that at least recent PyYAML versions also do such sorting for\n  python dicts.\n\n* List items get indented, as they should be.\n\n* bytestrings that can't be auto-converted to unicode raise error, as yaml has\n  no \"binary bytes\" (i.e. unix strings) type.\n\n* Attempt is made to pick more readable string representation styles, depending\n  on the value, e.g.::\n\n    >>> yaml.safe_dump(cert, sys.stdout)\n    cert: '-----BEGIN CERTIFICATE-----\n\n      MIIH3jCCBcagAwIBAgIJAJi7AjQ4Z87OMA0GCSqGSIb3DQEBCwUAMIHBMRcwFQYD\n\n      VQQKFA52YWxlcm9uLm5vX2lzcDEeMBwGA1UECxMVQ2VydGlmaWNhdGUgQXV0aG9y\n    ...\n\n    >>> pyaml.p(cert):\n    cert: |\n      -----BEGIN CERTIFICATE-----\n      MIIH3jCCBcagAwIBAgIJAJi7AjQ4Z87OMA0GCSqGSIb3DQEBCwUAMIHBMRcwFQYD\n      VQQKFA52YWxlcm9uLm5vX2lzcDEeMBwGA1UECxMVQ2VydGlmaWNhdGUgQXV0aG9y\n    ...\n\n* \"force_embed\" option to avoid having &id stuff scattered all over the output\n  (which might be beneficial in some cases, hence the option).\n\n* \"&id\" anchors, if used, get labels from the keys they get attached to,\n  not just use meaningless enumerators.\n\n* \"string_val_style\" option to only apply to strings that are values, not keys,\n  i.e::\n\n    >>> pyaml.p(data, string_val_style='\"')\n    key: \"value\\nasldpáknsa\\n\"\n    >>> yaml.safe_dump(data, sys.stdout, allow_unicode=True, default_style='\"')\n    \"key\": \"value\\nasldpáknsa\\n\"\n\n* \"sort_dicts=False\" option to leave dict item ordering to python, and not\n  force-sort them in yaml output, which can be important for python 3.6+ where\n  they retain ordering info.\n\n* Has an option to add vertical spacing (empty lines) between keys on different\n  depths, to make output much more seekable.\n\nResult for the (rather meaningless) example above (without any additional\ntweaks)::\n\n  >>> pyaml.p(data)\n  a: |\n    asldnsa\n    asldpáknsa\n  b: 'whatever text'\n  ma: &ma\n    - 123\n    - 45.67\n    - 1:\n      2: false\n    - 'some text'\n  mb: *ma\n\n----------\n\nExtended example::\n\n  >>> pyaml.dump(conf, sys.stdout, vspacing=[2, 1]):\n  destination:\n\n    encoding:\n      xz:\n        enabled: true\n        min_size: 5120\n        options:\n        path_filter:\n          - \\.(gz|bz2|t[gb]z2?|xz|lzma|7z|zip|rar)$\n          - \\.(rpm|deb|iso)$\n          - \\.(jpe?g|gif|png|mov|avi|ogg|mkv|webm|mp[34g]|flv|flac|ape|pdf|djvu)$\n          - \\.(sqlite3?|fossil|fsl)$\n          - \\.git/objects/[0-9a-f]+/[0-9a-f]+$\n\n    result:\n      append_to_file:\n      append_to_lafs_dir:\n      print_to_stdout: true\n\n    url: http://localhost:3456/uri\n\n\n  filter:\n    - /(CVS|RCS|SCCS|_darcs|\\{arch\\})/$\n    - /\\.(git|hg|bzr|svn|cvs)(/|ignore|attributes|tags)?$\n    - /=(RELEASE-ID|meta-update|update)$\n\n\n  http:\n\n    ca_certs_files: /etc/ssl/certs/ca-certificates.crt\n\n    debug_requests: false\n\n    request_pool_options:\n      cachedConnectionTimeout: 600\n      maxPersistentPerHost: 10\n      retryAutomatically: true\n\n\n  logging:\n\n    formatters:\n      basic:\n        datefmt: '%Y-%m-%d %H:%M:%S'\n        format: '%(asctime)s :: %(name)s :: %(levelname)s: %(message)s'\n\n    handlers:\n      console:\n        class: logging.StreamHandler\n        formatter: basic\n        level: custom\n        stream: ext://sys.stderr\n\n    loggers:\n      twisted:\n        handlers:\n          - console\n        level: 0\n\n    root:\n      handlers:\n        - console\n      level: custom\n\nNote that unless there are many moderately wide and deep trees of data, which\nare expected to be read and edited by people, it might be preferrable to\ndirectly use PyYAML regardless, as it won't introduce another (rather pointless\nin that case) dependency and a point of failure.\n\n\nSome Tricks\n-----------\n\n* Pretty-print any yaml or json (yaml subset) file from the shell::\n\n    % python -m pyaml /path/to/some/file.yaml\n    % curl -s https://www.githubstatus.com/api/v2/summary.json | python -m pyaml\n\n* Process and replace json/yaml file in-place::\n\n    % python -m pyaml -r file-with-json.data\n\n* Easier \"debug printf\" for more complex data (all funcs below are aliases to\n  same thing)::\n\n    pyaml.p(stuff)\n    pyaml.pprint(my_data)\n    pyaml.pprint('----- HOW DOES THAT BREAKS!?!?', input_data, some_var, more_stuff)\n    pyaml.print(data, file=sys.stderr) # needs \"from __future__ import print_function\"\n\n* Force all string values to a certain style (see info on these in\n  `PyYAML docs`_)::\n\n    pyaml.dump(many_weird_strings, string_val_style='|')\n    pyaml.dump(multiline_words, string_val_style='>')\n    pyaml.dump(no_want_quotes, string_val_style='plain')\n\n  Using ``pyaml.add_representer()`` (note \\*p\\*yaml) as suggested in\n  `this SO thread`_ (or `github-issue-7`_) should also work.\n\n* Control indent and width of the results::\n\n    pyaml.dump(wide_and_deep, indent=4, width=120)\n\n  These are actually keywords for PyYAML Emitter (passed to it from Dumper),\n  see more info on these in `PyYAML docs`_.\n\n* Dump multiple yaml documents into a file: ``pyaml.dump_all([data1, data2, data3], dst_file)``\n\n  explicit_start=True is implied, unless explicit_start=False is passed.\n\n.. _PyYAML docs: http://pyyaml.org/wiki/PyYAMLDocumentation#Scalars\n.. _this SO thread: http://stackoverflow.com/a/7445560\n.. _github-issue-7: https://github.com/mk-fg/pretty-yaml/issues/7\n\n\nInstallation\n------------\n\nIt's a regular package for Python (3.x or 2.x).\n\nModule uses PyYAML_ for processing of the actual YAML files and should pull it\nin as a dependency.\n\nDependency on unidecode_ module is optional and should only be necessary if\nsame-id objects or recursion is used within serialized data.\n\nBe sure to use python3/python2, pip3/pip2, easy_install-... binaries below,\nbased on which python version you want to install the module for, if you have\nseveral on the system (as is norm these days for py2-py3 transition).\n\nUsing pip_ is the best way::\n\n  % pip install pyaml\n\n(add --user option to install into $HOME for current user only)\n\nOr, if you don't have \"pip\" command::\n\n  % python -m ensurepip\n  % python -m pip install --upgrade pip\n  % python -m pip install pyaml\n\n(same suggestion wrt \"install --user\" as above)\n\nOn a very old systems, one of these might work::\n\n  % curl https://bootstrap.pypa.io/get-pip.py | python\n  % pip install pyaml\n\n  % easy_install pyaml\n\n  % git clone --depth=1 https://github.com/mk-fg/pretty-yaml\n  % cd pretty-yaml\n  % python setup.py install\n\n(all of install-commands here also have --user option,\nsee also `pip docs \"installing\" section`_)\n\nCurrent-git version can be installed like this::\n\n  % pip install 'git+https://github.com/mk-fg/pretty-yaml#egg=pyaml'\n\nNote that to install stuff to system-wide PATH and site-packages (without\n--user), elevated privileges (i.e. root and su/sudo) are often required.\n\nUse \"...install --user\", `~/.pydistutils.cfg`_ or virtualenv_ to do unprivileged\ninstalls into custom paths.\n\nMore info on python packaging can be found at `packaging.python.org`_.\n\n.. _ruamel.yaml: https://bitbucket.org/ruamel/yaml/\n.. _PyYAML: http://pyyaml.org/\n.. _unidecode: http://pypi.python.org/pypi/Unidecode\n.. _pip: http://pip-installer.org/\n.. _pip docs \"installing\" section: http://www.pip-installer.org/en/latest/installing.html\n.. _~/.pydistutils.cfg: http://docs.python.org/install/index.html#distutils-configuration-files\n.. _virtualenv: http://pypi.python.org/pypi/virtualenv\n.. _packaging.python.org: https://packaging.python.org/installing/\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/mk-fg/pretty-yaml",
            "keywords": "yaml serialization pretty print format human readable readability",
            "license": "WTFPL",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyaml",
            "package_url": "https://pypi.org/project/pyaml/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyaml/",
            "project_urls": {
               "Homepage": "https://github.com/mk-fg/pretty-yaml"
            },
            "release_url": "https://pypi.org/project/pyaml/20.4.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "PyYAML-based module to produce pretty and readable YAML-serialized data",
            "version": "20.4.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "haogege",
            "author_email": "1394168335@qq.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# pyyml\nUse python in yaml\n## 基本使用\n在python中使用：\n```python\nfrom pyyml import load\n\nwith open('conf.yml') as f:\n    raw_conf = f.read()\nconfig = load(raw_conf)\nprint(config)\n```\n在yaml中 `${...}` 中的内容将会被python执行：\n\nyaml内容\n```yaml\nsum: ${1 + 1}\n```\n实际解析内容\n```python\n{'sum': 2}\n```\n通过在文件开头第一行注释来导入所需的包：\n\n```yaml\n# libs:['os', 'os.path:path', 'this']\n```\n通过 [包名]:[别名] 取别名导入包\n\n`'os.path:path' 等同于 python 中的 from os import path`\n\n例如yaml文件内容\n```yaml\n# libs:['os', 'os.path:path', 'this']\nos_name: ${os.name}\nbase_dir: ${path.abspath(path.dirname(__file__))}\n```\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/q1394168335/pyyml",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyyml",
            "package_url": "https://pypi.org/project/pyyml/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyyml/",
            "project_urls": {
               "Homepage": "https://github.com/q1394168335/pyyml"
            },
            "release_url": "https://pypi.org/project/pyyml/0.0.2/",
            "requires_dist": [
               "pyyaml (>=3.13)"
            ],
            "requires_python": "",
            "summary": "Use python in yaml",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Michael Foord",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "rs",
            "package_url": "https://pypi.org/project/rs/",
            "platform": "",
            "project_url": "https://pypi.org/project/rs/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/rs/0.0/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "",
            "version": "0.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Ramses",
            "author_email": "hello@ramses.tech",
            "bugtrack_url": null,
            "classifiers": [
               "Framework :: Pyramid",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.4",
               "Programming Language :: Python :: 3.5",
               "Topic :: Internet :: WWW/HTTP",
               "Topic :: Internet :: WWW/HTTP :: WSGI :: Application"
            ],
            "description": "# `Ra`\n[![Build Status](https://travis-ci.org/ramses-tech/ra.svg?branch=master)](https://travis-ci.org/ramses-tech/ra)\n[![Documentation](https://readthedocs.org/projects/ra/badge/?version=stable)](http://ra.readthedocs.org)\n\nRa is a test suite generator and helper library for testing APIs described\nin [RAML](http://raml.org/).\n\nOut of the box, Ra provides a basic, automated test suite to test the routes\ndeclared in the RAML document. It provides test helpers for augmenting these\nwith custom tests to test application-specific logic, side effects, etc.\n\nRa is primarily designed to provide testing support for\n[ramses](http://github.com/ramses-tech/ramses) and\n[nefertari](http://github.com/ramses-tech/nefertari) applications, but can\nbe used with any WSGI-conformant, RAML-described API.\n\nIt currently depends on pytest but may be adapted for other test frameworks\nin the future. It works best using WebTest but doesn't require it.\n\n## Name\n\nRa was the god of the sun, the most important god in ancient Egypt.\n\n\n## Try it (dev)\n\nRun the test suite:\n\n```bash\n    $ pip install -r requirements.txt\n    $ py.test\n```\n\nCheck out the example:\n\n```bash\n    $ cd examples/ramses-test\n    $ pip install -r requirements.txt\n    $ py.test\n```\n\nThe example RAML at `examples/ramses-test/api.raml` and the test file\n`examples/ramses-test/tests/test_api.py` should be helpful to reference.\n\nSee the docs in `docs/`, and the `api.raml` and `tests/test_api.py` in\n`tests/apps/ramses_test`",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/ramses-tech/ra",
            "keywords": "web raml",
            "license": "UNKNOWN",
            "maintainer": null,
            "maintainer_email": null,
            "name": "ra",
            "package_url": "https://pypi.org/project/ra/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/ra/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/ramses-tech/ra"
            },
            "release_url": "https://pypi.org/project/ra/0.2.0/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Test RAML API definition",
            "version": "0.2.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Shoumik Palkar",
            "author_email": "shoumik@cs.stanford.edu",
            "bugtrack_url": null,
            "classifiers": [
               "License :: OSI Approved :: BSD License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 3"
            ],
            "description": "## split annotations\n\nThis package contains the Python implementation of [split annotations](), a system for optimizing applications\nthat combine many data-intensive library functions. See some useful links below.\n\n* [Documentation for this package](https://www.weld.rs/split-annotations/docs/)\n* [GitHub repository](https://www.github.com/weld-project/split-annotations)\n* [SOSP 2019 Paper describing the system](https://shoumik.xyz/static/papers/mozart-sosp19final.pdf)\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://www.github.com/weld-project/split-annotations",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "sa",
            "package_url": "https://pypi.org/project/sa/",
            "platform": "",
            "project_url": "https://pypi.org/project/sa/",
            "project_urls": {
               "Homepage": "https://www.github.com/weld-project/split-annotations"
            },
            "release_url": "https://pypi.org/project/sa/0.0.4/",
            "requires_dist": [
               "numpy",
               "pandas",
               "scipy",
               "sharedmem"
            ],
            "requires_python": ">=3.6",
            "summary": "Python split annotations package",
            "version": "0.0.4",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Mitch Garnaat",
            "author_email": "mitch@garnaat.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.6",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.3",
               "Programming Language :: Python :: 3.4",
               "Topic :: Internet"
            ],
            "description": "####\nboto\n####\nboto 2.49.0\n\nReleased: 11-July-2018\n\n.. image:: https://travis-ci.org/boto/boto.svg?branch=develop\n        :target: https://travis-ci.org/boto/boto\n\n.. image:: https://pypip.in/d/boto/badge.svg\n        :target: https://pypi.python.org/pypi/boto/\n\n******\nBoto 3\n******\n\n`Boto3 <https://github.com/boto/boto3>`__, the next version of Boto, is now\nstable and recommended for general use.  It can be used side-by-side with Boto\nin the same project, so it is easy to start using Boto3 in your existing\nprojects as well as new projects. Going forward, API updates and all new\nfeature work will be focused on Boto3.\n\nTo assist users who still depend on Boto and cannot immediately switch over, we\nwill be triaging and addressing critical issues and PRs in Boto in the short\nterm. As more users make the switch to Boto3, we expect to reduce our\nmaintenance involvement over time. If we decide on a cutoff date or any\nsignificant changes to our maintenance plan, we will make pre-announcements\nwell ahead of schedule to allow ample time for our users to adapt/migrate.\n\n\n************\nIntroduction\n************\n\nBoto is a Python package that provides interfaces to Amazon Web Services.\nCurrently, all features work with Python 2.6 and 2.7. Work is under way to\nsupport Python 3.3+ in the same codebase. Modules are being ported one at\na time with the help of the open source community, so please check below\nfor compatibility with Python 3.3+.\n\nTo port a module to Python 3.3+, please view our `Contributing Guidelines`_\nand the `Porting Guide`_. If you would like, you can open an issue to let\nothers know about your work in progress. Tests **must** pass on Python\n2.6, 2.7, 3.3, and 3.4 for pull requests to be accepted.\n\n\n********\nServices\n********\n\nAt the moment, boto supports:\n\n* Compute\n\n  * Amazon Elastic Compute Cloud (EC2) (Python 3)\n  * Amazon Elastic Map Reduce (EMR) (Python 3)\n  * AutoScaling (Python 3)\n  * Amazon Kinesis (Python 3)\n  * AWS Lambda (Python 3)\n  * Amazon EC2 Container Service (Python 3)\n\n* Content Delivery\n\n  * Amazon CloudFront (Python 3)\n\n* Database\n\n  * Amazon Relational Data Service (RDS)\n  * Amazon DynamoDB (Python 3)\n  * Amazon SimpleDB (Python 3)\n  * Amazon ElastiCache (Python 3)\n  * Amazon Redshift (Python 3)\n\n* Deployment and Management\n\n  * AWS Elastic Beanstalk (Python 3)\n  * AWS CloudFormation (Python 3)\n  * AWS Data Pipeline (Python 3)\n  * AWS Opsworks (Python 3)\n  * AWS CloudTrail (Python 3)\n  * AWS CodeDeploy (Python 3)\n\n* Administration & Security\n\n  * AWS Identity and Access Management (IAM) (Python 3)\n  * AWS Key Management Service (KMS) (Python 3)\n  * AWS Config (Python 3)\n  * AWS CloudHSM (Python 3)\n\n* Application Services\n\n  * Amazon CloudSearch (Python 3)\n  * Amazon CloudSearch Domain (Python 3)\n  * Amazon Elastic Transcoder (Python 3)\n  * Amazon Simple Workflow Service (SWF) (Python 3)\n  * Amazon Simple Queue Service (SQS) (Python 3)\n  * Amazon Simple Notification Server (SNS) (Python 3)\n  * Amazon Simple Email Service (SES) (Python 3)\n  * Amazon Cognito Identity (Python 3)\n  * Amazon Cognito Sync (Python 3)\n  * Amazon Machine Learning (Python 3)\n\n* Monitoring\n\n  * Amazon CloudWatch (EC2 Only) (Python 3)\n  * Amazon CloudWatch Logs (Python 3)\n\n* Networking\n\n  * Amazon Route53 (Python 3)\n  * Amazon Route 53 Domains (Python 3)\n  * Amazon Virtual Private Cloud (VPC) (Python 3)\n  * Elastic Load Balancing (ELB) (Python 3)\n  * AWS Direct Connect (Python 3)\n\n* Payments and Billing\n\n  * Amazon Flexible Payment Service (FPS)\n\n* Storage\n\n  * Amazon Simple Storage Service (S3) (Python 3)\n  * Amazon Glacier (Python 3)\n  * Amazon Elastic Block Store (EBS)\n  * Google Cloud Storage\n\n* Workforce\n\n  * Amazon Mechanical Turk\n\n* Other\n\n  * Marketplace Web Services (Python 3)\n  * AWS Support (Python 3)\n\nThe goal of boto is to support the full breadth and depth of Amazon\nWeb Services.  In addition, boto provides support for other public\nservices such as Google Storage in addition to private cloud systems\nlike Eucalyptus, OpenStack and Open Nebula.\n\nBoto is developed mainly using Python 2.6.6 and Python 2.7.3 on Mac OSX\nand Ubuntu Maverick.  It is known to work on other Linux distributions\nand on Windows.  Most of Boto requires no additional libraries or packages\nother than those that are distributed with Python.  Efforts are made\nto keep boto compatible with Python 2.5.x but no guarantees are made.\n\n************\nInstallation\n************\n\nInstall via `pip`_:\n\n::\n\n    $ pip install boto\n\nInstall from source:\n\n::\n\n    $ git clone git://github.com/boto/boto.git\n    $ cd boto\n    $ python setup.py install\n\n**********\nChangeLogs\n**********\n\nTo see what has changed over time in boto, you can check out the\nrelease notes at `http://docs.pythonboto.org/en/latest/#release-notes`\n\n***************************\nFinding Out More About Boto\n***************************\n\nThe main source code repository for boto can be found on `github.com`_.\nThe boto project uses the `gitflow`_ model for branching.\n\n`Online documentation`_ is also available. The online documentation includes\nfull API documentation as well as Getting Started Guides for many of the boto\nmodules.\n\nBoto releases can be found on the `Python Cheese Shop`_.\n\nJoin our IRC channel `#boto` on FreeNode.\nWebchat IRC channel: http://webchat.freenode.net/?channels=boto\n\nJoin the `boto-users Google Group`_.\n\n*************************\nGetting Started with Boto\n*************************\n\nYour credentials can be passed into the methods that create\nconnections.  Alternatively, boto will check for the existence of the\nfollowing environment variables to ascertain your credentials:\n\n**AWS_ACCESS_KEY_ID** - Your AWS Access Key ID\n\n**AWS_SECRET_ACCESS_KEY** - Your AWS Secret Access Key\n\nCredentials and other boto-related settings can also be stored in a\nboto config file.  See `this`_ for details.\n\n.. _Contributing Guidelines: https://github.com/boto/boto/blob/develop/CONTRIBUTING\n.. _Porting Guide: http://boto.readthedocs.org/en/latest/porting_guide.html\n.. _pip: http://www.pip-installer.org/\n.. _release notes: https://github.com/boto/boto/wiki\n.. _github.com: http://github.com/boto/boto\n.. _Online documentation: http://docs.pythonboto.org\n.. _Python Cheese Shop: http://pypi.python.org/pypi/boto\n.. _this: http://docs.pythonboto.org/en/latest/boto_config_tut.html\n.. _gitflow: http://nvie.com/posts/a-successful-git-branching-model/\n.. _neo: https://github.com/boto/boto/tree/neo\n.. _boto-users Google Group: https://groups.google.com/forum/?fromgroups#!forum/boto-users\n\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/boto/boto/",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "boto",
            "package_url": "https://pypi.org/project/boto/",
            "platform": "Posix; MacOS X; Windows",
            "project_url": "https://pypi.org/project/boto/",
            "project_urls": {
               "Homepage": "https://github.com/boto/boto/"
            },
            "release_url": "https://pypi.org/project/boto/2.49.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Amazon Web Services Library",
            "version": "2.49.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Hadi Asghari",
            "author_email": "hd.asghari@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 3",
               "Topic :: Software Development :: Libraries :: Python Modules",
               "Topic :: System :: Networking"
            ],
            "description": "pyasn\n=====\n\n.. image:: https://pypip.in/v/pyasn/badge.png\n   :target: https://pypi.python.org/pypi/pyasn\n\n.. image:: https://pypip.in/d/pyasn/badge.png\n   :target: https://pypi.python.org/pypi/pyasn\n\n\n**pyasn** is a Python extension module that enables very fast IP address to Autonomous System Number lookups.\nCurrent state and Historical lookups can be done, based on the MRT/RIB BGP archive used as input.\n\n*pyasn* is different from other ASN lookup tools in that it provides **offline** and **historical** lookups.\nIt provides utility scripts for users to build their own lookup databases based on any MRT/RIB archive.\nThis makes *pyasn* much faster than online dig/whois/json lookups.\n\nThe module is written in C and Python, and cross-compiles on Linux and Windows. Underneath, it uses a radix tree\ndata structure for storage of IP addresses. In the current version, it borrows code from *py-radix* to support\nboth IPV4 and IPV6 network prefixes. The current release is a beta. Compared to the previous version, it provides\nsupport for Python 2 and 3; adds new functionality, performance improvements, and unit-tests.\n\n*pyasn* is developed and maintained by researchers at the Economics of Cybersecurity research group at Delft\nUniversity of Technology (http://econsec.tbm.tudlft.nl). The package is used on an almost daily basis and bugs\nare fixed pretty quickly.  The package is largely developed and maintained by Hadi Asghari and Arman Noroozian.\nPlease report any bugs via GitHub (https://github.com/hadiasghari/pyasn) or email the developers.\n\n\nInstallation\n============\nInstallation is a breeze via pip: ::\n\n    pip install pyasn --pre\n\nOr with the standard Python: ::\n\n    python setup.py build\n    python setup.py install --record log\n\nYou will need to have pip, setuptools and build essentials installed if you build the package manually. On\nUbuntu/Debian you can get them using the following command: ::\n\n    sudo apt-get install python-pip python-dev build-essential\n\nBuilding the C module on Windows, using either pip or from source, requires Microsoft Visual C++ to be installed.\npyasn has been tested using Visual C++ Express 2010, available freely from Microsoft's website, on both the\nofficial Python 3.4 release and Miniconda3. Other versions of Python, Visual Studio, and Cygwin could also work\nwith minor modifications.\n\nWe plan to release *pyasn* packages to major Linux repositories once it is out of beta.\n\n\nUsage\n=====\nA simple example that demonstrates most of the features: ::\n\n    import pyasn\n\n    # Initialize module and load IP to ASN database\n    # the sample database can be downloaded or built - see below\n    asndb = pyasn.pyasn('ipasn_20140513.dat')\n\n    asndb.lookup('8.8.8.8')\n    # should return: (15169, '8.8.8.0/24'), the origin AS, and the BGP prefix it matches\n\n    asndb.get_as_prefixes(1128)\n    # returns ['130.161.0.0/16', '131.180.0.0/16', '145.94.0.0/16'], TU-Delft prefixes\n\n\nIPASN Data Files\n================\nIPASN data files are a long list of prefixes used to lookup AS number for IPs. An excerpt from such a file looks\nlike this: ::\n\n    ; IP-ASN32-DAT file\n    ; Original file : <Path to a rib file>\n    ; Converted on  : Tue May 13 22:03:05 2014\n    ; CIDRs         : 512490\n    ;\n    1.0.0.0/24  15169\n    1.0.128.0/17        9737\n    1.0.128.0/18        9737\n    1.0.128.0/19        9737\n    1.0.129.0/24        23969\n    ...\n\nIPASN data files can be created by downloading MRT/RIB BGP archives from Routeviews (or similar sources),\nand parsing them using provided scripts that tail the BGP AS-Path. This can be done simply as follows: ::\n\n    pyasn_util_download.py --latest\n    pyasn_util_convert.py --single <Downloaded RIB File> <ipasn_db_file_name>\n\n\n**NOTE:** These scripts are by default installed to ``/usr/local/bin`` and can be executed directly. If you installed\nthe package to a user directory, these scripts will not be on the path and you will have to invoke them by navigating\nto the folder in which they have been copied (e.g. ``~/.local/bin``).\n\nWe also provide download links to a large number of previously generated IPASN data files. These are based on\nweekly  snapshots of the Routeviews data from 2005-2015, accessible here:\nhttp://data.3tu.nl/repository/uuid:d4d23b8e-2077-4592-8b47-cb476ad16e12\n\n**New in v1.6:** To save disk space, you can gzip IPASN data files. The load time will be slighlty longer.\n\n\nPerformance Tip\n===============\nInitial loading of a IPASN data file is the most heavy operation of the package. For fast lookups using multiple\nIPASN data files, for instance for historical lookups on multiple dates, we recommend caching of loaded data files\nfor better performance.\n\n\nUninstalling pyasn\n==================\nYou can remove *pyasn* as follows: ::\n\n    pip uninstall pyasn\n\nIf you built and installed the package your self use the recorded log to remove the installed files.\n\n**Removing PyASN version 1.2**: *pyasn* v1.5/1.6 and v1.2 can be installed side by side (due to lower-cased package\nname). To avoid mistakes, you can uninstall the old **PyASN** by deleting the following files from your Python\ninstallation: ::\n\n    PYTHONDIR/dist-packages/PyASN.so\n    PYTHONDIR/dist-packages/PyASN-1.2.egg-info\n\n\nPackage Structure\n=================\nThe main portions of the directory tree are as follows: ::\n\n    .\n    ├── pyasn/__init__.py       # Python code of the main pyasn module\n    ├── pyasn/pyasn_radix.c     # C extension code (Python RADIX module with bulk load)\n    ├── pyasn/_radix/*          # C extension code (Based on original RADIX code from MRTd)\n    ├── pyasn/mrtx.py           # python module used to convert MRT files to pyasn DB files\n    ├── pyasn-utils/*.py        # Scripts to download & convert BGP MRT dumps to IPASN databases\n    ├── data/                   # Test Resources and some sample DBs to use\n    ├── tests/                  # Tests\n    └── setup.py                # Standard setup.py for installation/testing/etc.\n\n\n\nTesting pyasn Sources\n=====================\nA limited number of unit tests are provided in the ``tests/`` directory when downlading the sources. They can be\nrun with the following command: ::\n\n    python setup.py test\n\nThis beta release has been tested under python version 2.6, 2.7, 3.3, 3.4 and 3.5. We appreciate contributions towards\ntesting *pyasn*!\n\n**New in v1.6:** pyasn_util_convert.py offers a '--dump-screen' option which shows the MRT/RIB archive contents and\nthe chosen origin-AS.\n\n\nLicense & Acknowledgments\n=========================\n*pyasn* is licensed under the MIT license.\n\nIt extends code from py-radix (Michael J. Schultz and Damien Miller),  and improves upon it in several ways, for\ninstance in lowering memory usage and adding bulk prefix/origin load. The underlying radix tree implementation is\ntaken (and modified) from MRTd. These are all subject to their respective licenses.  Please see the LICENSE file\nfor details.\n\nThanks to Dr. Chris Lee (of Shadowserver) for proposing the use of radix trees.\n\nA handful of GitHub developers have contributed features and bug fixes to the latest releases.\nMany thanks to all of them.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": null,
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/hadiasghari/pyasn",
            "keywords": "ip asn autonomous system bgp whois prefix radix python routing networking",
            "license": "MIT",
            "maintainer": null,
            "maintainer_email": null,
            "name": "pyasn",
            "package_url": "https://pypi.org/project/pyasn/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/pyasn/",
            "project_urls": {
               "Homepage": "https://github.com/hadiasghari/pyasn"
            },
            "release_url": "https://pypi.org/project/pyasn/1.6.0b1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Offline IP address to Autonomous System Number lookup module.",
            "version": "1.6.0b1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Perdix Software",
            "author_email": "ssmith@perdixsw.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 2 - Pre-Alpha",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.4",
               "Programming Language :: Python :: 3.5",
               "Programming Language :: Python :: 3.6",
               "Topic :: Office/Business :: Financial",
               "Topic :: Scientific/Engineering :: Mathematics"
            ],
            "description": "UNKNOWN",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "https://www.github.com/perdixsw/umpy/tarball/0.1.0",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://www.github.com/perdixsw/umpy",
            "keywords": "units,measure,measurement,conversion,converter",
            "license": "MIT",
            "maintainer": null,
            "maintainer_email": null,
            "name": "umpy",
            "package_url": "https://pypi.org/project/umpy/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/umpy/",
            "project_urls": {
               "Download": "https://www.github.com/perdixsw/umpy/tarball/0.1.0",
               "Homepage": "https://www.github.com/perdixsw/umpy"
            },
            "release_url": "https://pypi.org/project/umpy/0.1.0/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Simple unit of measure conversion for python, optimized for manufacturing contexts.",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Jay Marcyes",
            "author_email": "jay@marcyes.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Environment :: Console",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Topic :: Software Development :: Testing"
            ],
            "description": "Pyt\n===\n\nPyt is a lightweight wrapper around `Python’s unittest\nmodule <https://docs.python.org/3/library/unittest.html>`__ that adds\nsome nice features and enhancements over the stock ``unittest`` module.\n\nQuickstart\n~~~~~~~~~~\n\nPyt overrides unittest’s built-in pathfinding to be smarter and less\nverbose, so you can match tests using prefix matching which makes\nrunning a test like:\n\n::\n\n   $ python -m unittest tests.foo_test.BarTestCase.test_che\n\nas simple as:\n\n::\n\n   $ pyt foo.Bar.che\n\nBut it’s even less verbose if you want it to be, pyt can reach into the\nmodules and classes to do its matching, so you don’t even need to\nspecify the module and class if you don’t want to:\n\n::\n\n   $ pyt che\n\nMore examples\n^^^^^^^^^^^^^\n\nTo run all the ``Happy`` tests:\n\n::\n\n   $ pyt Happy\n\nTo run all the ``newmodule`` tests:\n\n::\n\n   $ pyt newmodule\n\nTo run more than one test:\n\n::\n\n   $ pyt test1 test2 ...\n\nTo run every test ``pyt`` can find:\n\n::\n\n   $ pyt\n\nAnd the way I like to run all tests in the current directory:\n\n::\n\n   $ pyt -vb\n\nWhich can also be written:\n\n::\n\n   $ pyt --verbose --buffer\n\nFlags\n~~~~~\n\nTo see everything pyt can do\n\n::\n\n   $ pyt --help\n\n–warnings\n^^^^^^^^^\n\nThis will convert warnings into errors.\n\n::\n\n   $ pyt --warnings\n\n–rerun\n^^^^^^\n\nIf your last testrun had failing tests this will rerun only the tests\nthat failed.\n\n::\n\n   $pyt --rerun\n\nThings to be aware of\n~~~~~~~~~~~~~~~~~~~~~\n\npyt uses Python’s PEP 8 style conventions\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n``pyt`` uses `Python’s code styling\nconventions <http://www.python.org/dev/peps/pep-0008/>`__ to decide what\nis the module and class, so, given input like this:\n\n::\n\n   $ pyt foo.bar.Baz.che\n\n``pyt`` will consider ``foo.bar`` to be the module, ``Baz`` to be a\nclass (because it starts with a capital letter), and ``che`` to be a\nmethod (since it comes after the class).\n\nLikewise, ``pyt`` uses unittest conventions, so a test module should end\nwith ``_test`` (eg, ``foo.bar_test``) or start with test (eg,\n``test_foo.py``) and a TestCase class should extend\n``unittest.TestCase``, and test methods should start with ``test_`` (eg,\n``test_che``).\n\nVague input can cause pyt to run more tests than you expect\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSo if you have something like this:\n\n::\n\n   project/\n     __init__.py\n     user.py\n     foo/\n       __init__.py\n       user.py\n     tests/\n       __init__.py\n       user_test.py\n       foo/\n         __init__.py\n         user_test.py\n\nAnd you want to run tests for ``foo.user`` and you run:\n\n::\n\n   $ pyt user\n\nit will run both ``tests/user_test`` and ``tests.foo.user_test``, the\nsolution is to just be more verbose when you have to be:\n\n::\n\n   $ pyt foo.user\n\nEnvironment Variables\n^^^^^^^^^^^^^^^^^^^^^\n\nIf you are running the tests within pyt, you might notice there is an\nenvironment variable ``PYT_TEST_COUNT`` that contains the count of how\nmany tests pyt found to run.\n\nInstallation\n------------\n\nUse ``pip``:\n\n::\n\n   $ pip install pyt\n\nYou can also get it directly from the repo:\n\n::\n\n   $ pip install --upgrade git+https://github.com/Jaymon/pyt#egg=pyt\n\nIf you install pyt using Python 3 it can also be invoked using the\n``pyt3`` command:\n\n::\n\n   $ pyt3 --help\n\nLikewise, Python 2 installs a ``pyt2`` command:\n\n::\n\n   $ pyt2 --help\n\nTesting\n-------\n\nTesting in 2.7 on most systems:\n\n::\n\n   $ python -m unittest pyt_test\n\nTesting in 3.5 on MacOS:\n\n::\n\n   $ python3.5 -m unittest pyt_test\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "http://github.com/Jaymon/pyt",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyt",
            "package_url": "https://pypi.org/project/pyt/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyt/",
            "project_urls": {
               "Homepage": "http://github.com/Jaymon/pyt"
            },
            "release_url": "https://pypi.org/project/pyt/1.0.5/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "easily run python unit tests",
            "version": "1.0.5",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Bradley Odell",
            "author_email": "btodell@hotmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Environment :: Console",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
               "Natural Language :: English",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 2.6",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Topic :: Software Development :: Build Tools"
            ],
            "description": "pyz\n===\n\n*Packages all source code and dependencies into a single Python zip application.*\n\nSummary\n-------\n\nDeploying a Python application any larger than a single file is\ncumbersome - this library aims to solve that problem.\n\nPython has been able to run code from within a zip file since version\n2.6. Python 3.5 introduced the `zipapp <https://docs.python.org/3/library/zipapp.html>`__ module\nwhich aims to simplify the process of creating a zip application.\nHowever, **zipapp** isn't a complete solution to the problem - it\ndoesn't handle dependencies and it doesn't include certain extra\nfeatures that this library provides.\n\nThis library allows you to bundle all of your Python code **AND** your\ndependencies into a single Python zip application file.\n\nNote: The dependency bundling feature is not implemented yet, but it is\nin the works!\n\nFeatures\n--------\n\n1. Bundle all Python source code with fine-grained control over included files.\n2. Ability to \"unixify\" the output application by prepending a customizable\n   `shebang <https://en.wikipedia.org/wiki/Shebang_(Unix)>`__.\n3. Python interpreter version check - display a friendly notice instead\n   of a Python exception if the user runs your application using an\n   unsupported Python version.\n\nPlanned\n-------\n\n1. Automatically identify dependencies and package them accordingly.\n",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "https://github.com/BTOdell/pyz/archive/0.4.3.tar.gz",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/BTOdell/pyz",
            "keywords": "pyz zip app zipapp bundle dependencies library",
            "license": "GPLv3",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyz",
            "package_url": "https://pypi.org/project/pyz/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyz/",
            "project_urls": {
               "Download": "https://github.com/BTOdell/pyz/archive/0.4.3.tar.gz",
               "Homepage": "https://github.com/BTOdell/pyz"
            },
            "release_url": "https://pypi.org/project/pyz/0.4.3/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Packages all source code and dependencies into a single Python zip application.",
            "version": "0.4.3",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Val Neekman",
            "author_email": "info@neekware.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 3 - Alpha",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Operating System :: POSIX",
               "Programming Language :: Python",
               "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description": "AWSLI\n====================\n\n**Amazon Web Services Line Interpreter**\n\n**Author:** Val Neekman [ info@neekware.com, @vneekman ]\n\nOverview\n========\n\nA Line Interpreter for Amazon Web Services.\n\nHow to install\n==================\n\n    1. easy_install awsli\n    2. pip install awsli\n    3. git clone http://github.com/un33k/awsli\n        a. cd awsli\n        b. run python setup.py\n    4. wget https://github.com/un33k/awsli/zipball/master\n        a. unzip the downloaded file\n        b. cd into awsli-* directory\n        c. run python setup.py\n\nHow to use\n=================\n\n``Usage``\n\n``Note:``\n\nRunning the tests\n=================\n\nTo run the tests against the current environment:\n\n    python test.py\n\nChangelog\n=========\n\n0.1\n-----\n\n* Initial release\n\n\nLicense\n=======\n\nCopyright (c) 2012, Val Neekman\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without \nmodification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this \nlist of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this \nlist of conditions and the following disclaimer in the documentation and/or \nother materials provided with the distribution.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND \nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED \nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE \nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE \nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL \nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR \nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, \nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE \nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/un33k/awsli",
            "keywords": null,
            "license": "BSD",
            "maintainer": null,
            "maintainer_email": null,
            "name": "awsli",
            "package_url": "https://pypi.org/project/awsli/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/awsli/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/un33k/awsli"
            },
            "release_url": "https://pypi.org/project/awsli/0.0.1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "A Line Interpreter for Amazon Web Services",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Armin Ronacher",
            "author_email": "armin.ronacher@active-4.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Environment :: Web Environment",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
               "Topic :: Software Development :: Libraries :: Python Modules",
               "Topic :: Text Processing :: Markup :: HTML"
            ],
            "description": "jinja\n~~~~~\n\nJinja is a `sandboxed`_ template engine written in pure Python. It\nprovides a `Django`_ like non-XML syntax and compiles templates into\nexecutable python code. It's basically a combination of Django templates\nand python code.\n\nNutshell\n--------\n\nHere a small example of a Jinja template::\n\n    {% extends 'base.html' %}\n    {% block title %}Memberlist{% endblock %}\n    {% block content %}\n      <ul>\n      {% for user in users %}\n        <li><a href=\"{{ user.url|e }}\">{{ user.username|e }}</a></li>\n      {% endfor %}\n      </ul>\n    {% endblock %}\n\nPhilosophy\n----------\n\nApplication logic is for the controller but don't try to make the life\nfor the template designer too hard by giving him too few functionality.\n\nFor more informations visit the new `jinja webpage`_ and `documentation`_.\n\nNote\n----\n\nThis is the Jinja 1.0 release which is completely incompatible with the\nold \"pre 1.0\" branch. The old branch will still receive security updates\nand bugfixes but the 1.0 branch will be the only version that receives\nsupport.\n\nIf you have an application that uses Jinja 0.9 and won't be updated in\nthe near future the best idea is to ship a Jinja 0.9 checkout together\nwith the application.\n\nThe `Jinja tip`_ is installable via `easy_install` with ``easy_install\nJinja==dev``.\n\n.. _sandboxed: http://en.wikipedia.org/wiki/Sandbox_(computer_security)\n.. _Django: http://www.djangoproject.com/\n.. _jinja webpage: http://jinja.pocoo.org/\n.. _documentation: http://jinja.pocoo.org/documentation/index.html\n.. _Jinja tip: http://dev.pocoo.org/hg/jinja-main/archive/tip.tar.gz#egg=Jinja-dev\n\n\n:copyright: 2007 by Armin Ronacher.\n:license: BSD, see LICENSE for more details.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "http://jinja.pocoo.org/",
            "keywords": "python.templating.engines",
            "license": "BSD",
            "maintainer": null,
            "maintainer_email": null,
            "name": "Jinja",
            "package_url": "https://pypi.org/project/Jinja/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/Jinja/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "http://jinja.pocoo.org/"
            },
            "release_url": "https://pypi.org/project/Jinja/1.2/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "A small but fast and easy to use stand-alone template engine written in pure python.",
            "version": "1.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Hsiaoming Yang",
            "author_email": "me@lepture.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Environment :: Console",
               "Environment :: Web Environment",
               "Framework :: Django",
               "Framework :: Flask",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.5",
               "Programming Language :: Python :: 3.6",
               "Programming Language :: Python :: 3.7",
               "Programming Language :: Python :: 3.8",
               "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
               "Topic :: Internet :: WWW/HTTP :: WSGI :: Application",
               "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description": "Authlib\n=======\n\nThe ultimate Python library in building OAuth and OpenID Connect servers.\nJWS, JWK, JWA, JWT are included.\n\nUseful Links\n------------\n\n1. Homepage: https://authlib.org/\n2. Documentation: https://docs.authlib.org/\n3. Purchase Commercial License: https://authlib.org/plans\n4. Blog: https://blog.authlib.org/\n5. More Repositories: https://github.com/authlib\n6. Twitter: https://twitter.com/authlib\n7. Donate: https://www.patreon.com/lepture\n\nSpecifications\n--------------\n\n- RFC5849: The OAuth 1.0 Protocol\n- RFC6749: The OAuth 2.0 Authorization Framework\n- RFC6750: The OAuth 2.0 Authorization Framework: Bearer Token Usage\n- RFC7009: OAuth 2.0 Token Revocation\n- RFC7515: JSON Web Signature\n- RFC7516: JSON Web Encryption\n- RFC7517: JSON Web Key\n- RFC7518: JSON Web Algorithms\n- RFC7519: JSON Web Token\n- RFC7521: Assertion Framework for OAuth 2.0 Client Authentication and Authorization Grants\n- RFC7523: JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants\n- RFC7591: OAuth 2.0 Dynamic Client Registration Protocol\n- RFC7662: OAuth 2.0 Token Introspection\n- RFC8414: OAuth 2.0 Authorization Server Metadata\n- RFC8628: OAuth 2.0 Device Authorization Grant\n- OpenID Connect 1.0\n- OpenID Connect Discovery 1.0\n\nImplementations\n---------------\n\n- Requests OAuth 1 Session\n- Requests OAuth 2 Session\n- Requests Assertion Session\n- Flask OAuth 1/2 Client\n- Django OAuth 1/2 Client\n- Flask OAuth 1.0 Server\n- Flask OAuth 2.0 Server\n- Flask OpenID Connect 1.0\n- Django OAuth 1.0 Server\n- Django OAuth 2.0 Server\n- Django OpenID Connect 1.0\n\nLicense\n-------\n\nAuthlib is licensed under BSD. Please see LICENSE for licensing details.\n\nIf this license does not fit your company, consider to purchase a commercial\nlicense. Find more information on `Authlib Plans`_.\n\n.. _`Authlib Plans`: https://authlib.org/plans\n\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://authlib.org/",
            "keywords": "",
            "license": "BSD-3-Clause",
            "maintainer": "",
            "maintainer_email": "",
            "name": "Authlib",
            "package_url": "https://pypi.org/project/Authlib/",
            "platform": "any",
            "project_url": "https://pypi.org/project/Authlib/",
            "project_urls": {
               "Blog": "https://blog.authlib.org/",
               "Bug Tracker": "https://github.com/lepture/authlib/issues",
               "Commercial License": "https://authlib.org/plans",
               "Documentation": "https://docs.authlib.org/",
               "Donate": "https://lepture.com/donate",
               "Homepage": "https://authlib.org/",
               "Source Code": "https://github.com/lepture/authlib"
            },
            "release_url": "https://pypi.org/project/Authlib/0.14.3/",
            "requires_dist": [
               "cryptography",
               "requests ; extra == 'client'"
            ],
            "requires_python": "",
            "summary": "The ultimate Python library in building OAuth and OpenID Connect servers.",
            "version": "0.14.3",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Julien Bigot",
            "author_email": "julien.bigot@cea.fr",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Environment :: Console",
               "License :: OSI Approved :: MIT License"
            ],
            "description": "# zpp\n\nThis is zpp, the Z Pre-Processor.\n\nZpp transforms bash in a pre-processor for F90 source files.\nIt offers a set of functions specifically tailored to build clean Fortran90\ninterfaces by generating code for all types, kinds, and array ranks supported by\na given compiler.\n\n## Syntax\n\nZpp files are typically named `*.F90.zpp`.\n\nIn these files, the lines that start with `!$SH` are interpreted as bash lines. \nOther lines are copied as-is, except that variable substitution is operated as\nin a double-quoted string, including bash commands `${VAR}` or `$(command)`.\nIf inside a bash control block (`if`, `for`, etc.), the output generation obeys\nthe control statement.\n\nFor example, this code:\n```\n!$SH for GREETED in world universe multiverse ; do\nprint *, \"Hello ${GREETED}\"\n!$SH done\n```\n\nWould produce the following result:\n```\nprint *, \"Hello world\"\nprint *, \"Hello universe\"\nprint *, \"Hello multiverse\"\n```\n\n### Support functions\n\nPredefined bash functions, variable and code can be provided in `.zpp.sh` files\nthat can be included with `#!SH source <filename>.zpp.sh`.\n\n**Beware**: a file NEEDs to have the `.zpp.sh` extension to be included from\nzpp.\n\nZpp provides a standard library of functions tailored to build clean Fortran90\ninterfaces by generating code for all types, kinds, and array ranks supported by\na given compiler.\n\n#### zpp_str_repeat\n\nFound in `base.zpp.sh`\n\nOutputs a string multiple times.\n\nParameters:\n1. the string to Repeat\n2. the lower bound of the iterations (inclusive)\n3. the upper bound of the iterations (inclusive)\n4. the string separator\n5. the string starter\n6. the string ender\n\nRepeats string `$1` (`$3`-`$2`+1) times, separated by string `$4` inside `$5`\n`$6`.\n* If the number of repetitions is negative, the result is empty.\n* If `$1` contains the '@N' substring, it will be replaced by the iteration\n  number (from `$2` to `$3`).\n\nexample:\n```\n#!SH source base.zpp.sh\nzpp_str_repeat v@N 5 7 '...' '<<' '>>'\nzpp_str_repeat w@N 1 1 '...' '<<' '>>'\nzpp_str_repeat x@N 1 0 '...' '<<' '>>'\n```\noutput:\n```\n<<v5...v6...v7>>\n<<w1>>\n```\n\n#### zpp_str_repeat_reverse\n\nFound in `base.zpp.sh`\n\nOutputs a string multiple times in reverse order.\n\nParameters:\n1. the string to Repeat\n2. the upper bound of the iterations (inclusive)\n3. the lower bound of the iterations (inclusive)\n4. the string separator\n5. the string starter\n6. the string ender\n\nRepeats string `$1` (`$2`-`$3`+1) times, separated by string `$4` inside `$5`\n`$6`.\n* If the number of repetitions is negative, the result is empty.\n* If `$1` contains the '@N' substring, it will be replaced by the iteration\n  number (from `$2` to `$3`, i.e. upper to lower).\n\nexample:\n```\n#!SH source base.zpp.sh\nzpp_str_repeat_reverse v@N 5 7 '...' '<<' '>>'\nzpp_str_repeat_reverse w@N 1 1 '...' '<<' '>>'\nzpp_str_repeat_reverse x@N 1 0 '...' '<<' '>>'\n```\noutput:\n```\n<<v7...v6...v5>>\n<<w1>>\n```\n\n#### ZPP_FORT_TYPES\n\nFound in `fortran.zpp.sh`\n\nThe list of types supported by the fortran compiler as zpp:typeIDs.\n\nThe compiler ID should be provided in `ZPP_CONFIG` as `config.<ID>`.\nThe supported predefined IDs are: `Gnu`, `Intel`, `PGI` and `XL`.\nYou can also provide definitions for an additional compiler by defining\n`ZPP_FORT_TYPES` in a file named `config.<ID>.zpp.sh`.\n\nIf you use cmake, it will automatically generate such a file for your compiler\nand define  `ZPP_CONFIG` so you don't have to handle it.\n\n### zpp_fort_array_desc\n\nFound in `fortran.zpp.sh`\n\nOutputs an assumed shaped array descriptor of the provided size.\n\nParameters:\n1. the size of the assumed shaped array\n\nexample:\n```\n#!SH source fortran.zpp.sh\ninteger:: scalar$(zpp_fort_array_desc 0)\ninteger:: array1d$(zpp_fort_array_desc 1)\ninteger:: array2d$(zpp_fort_array_desc 2)\n```\noutput:\n```\ninteger:: scalar\ninteger:: array1d(:)\ninteger:: array2d(:,:)\n```\n\n### zpp_fort_ptype\n\nFound in `fortran.zpp.sh`\n\nOutputs the type associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\nexample:\n```\n#!SH source fortran.zpp.sh\n!$SH for T in ${ZPP_FORT_TYPES} ; do\n$(zpp_fort_ptype $1)\n!$SH done\n```\nexample output:\n```\nCHARACTER\nCOMPLEX\nCOMPLEX\nINTEGER\nINTEGER\nINTEGER\nINTEGER\nLOGICAL\nREAL\nREAL\n```\n\n### zpp_fort_kind\n\nFound in `fortran.zpp.sh`\n\nOutputs the kind associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\nexample:\n```\n#!SH source fortran.zpp.sh\n!$SH for T in ${ZPP_FORT_TYPES} ; do\n$(zpp_fort_kind $1)\n!$SH done\n```\nexample output:\n```\n1\n4\n8\n1\n2\n4\n8\n1\n4\n8\n```\n\n### zpp_fort_type\n\nFound in `fortran.zpp.sh`\n\nOutputs the full type (with kind included) associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n2. additional attributes for the type\n\nexample:\n```\n#!SH source fortran.zpp.sh\n!$SH for T in ${MY_CHAR_TYPES} ; do\n$(zpp_fort_type $1)\n$(zpp_fort_type $1 \"len=5\")\n!$SH done\n```\nexample output:\n```\nCHARACTER(KIND=1)\nCHARACTER(KIND=1,len=5)\n```\n\n### zpp_fort_sizeof\n\nFound in `fortran.zpp.sh`\n\nOutputs the size in bits associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\n### zpp_fort_io_format\n\nFound in `fortran.zpp.sh`\n\nOutputs an IO descriptor suitable for a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\n### ZPP_HDF5F_TYPES\n\nFound in `hdf5_fortran.zpp.sh`\n\nA list of zpp:typeIDs supported by HDF5.\n\n### hdf5_constant\n\nFound in `hdf5_fortran.zpp.sh`\n\nOutputs the HDF5 type constant associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\nexample:\n```\n#!SH source hdf5_fortran.zpp.sh\n!$SH for T in ${ZPP_HDF5F_TYPES} ; do\n$(hdf5_constant $1)\n!$SH done\n```\nexample output:\n```\nH5T_NATIVE_INTEGER\nH5T_NATIVE_REAL\nH5T_NATIVE_REAL\nH5T_NATIVE_CHARACTER\n```\n\n\n## Command-line interface\n\nZpp basic usage is as follow:\n```\nUsage: zpp [Options...] <source> [<destination>]\n  use `zpp -h' for more info\n\nPreprocesses BASH in-line commands in a source file\n\nOptions:\n  --version        show program's version number and exit\n  -h, --help       show this help message and exit\n  -I DIR           Add DIR to search list for source directives\n  -o FILE          Place the preprocessed code in file FILE.\n  -D OPTION=VALUE  Set the value of OPTION to VALUE\n```\n\n## CMake interface\n\nSupport is provided for using zpp from CMake based projects, but you can use\nit from plain Makefiles too.\n\nThere are two ways you can use zpp from your CMake project:\n* with `add_subdirectory`: include zpp in your project and use it directly from\n  there,\n* with `find_package`: install zpp and use it as an external dependency of your\n  project.\n\n#### CMake subdirectory usage\n\nUsing zpp with `add_subdirectory` is very simple.\nJust copy the `zpp` directory in your source and point to it with\n`add_subdirectory(zpp)`.\nThe `zpp_preprocess` then becomes available to process zpp files.\n\nThis is demonstrated in `example/cmake_subdirectory`.\n\n#### CMake find usage\n\nUsing zpp with `find_package` is no more complex.\nIf zpp is installed, just add a `find_package(zpp REQUIRED)`.\nThe `zpp_preprocess` then becomes available to process zpp files.\n\nThis is demonstrated in `example/cmake_find`.\n\n## GMake usage\n\nUsing zpp from a GNU Makefile is slightly less powerful than from CMake.\nThe types and kinds supported by the Fortran compiler will not be automatically\ndetected.\nPredefined lists of supported types for well known compilers are provided\ninstead.\n\nTo use zpp from a Makefile, include the `share/zpp/zpp.mk` file (either from an\ninstalled location or from a subdirectory in your project).\nYou can then set the `zpp_COMPILER_ID` variable to the compiler you use and\n`.F90` files will be automatically generated from their `.F90.zpp` equivalent.\nThe `zppFLAGS` variable is automatically passed to zpp similarly to `CFLAGS` or\n`CXXFLAGS` for `cc` and `cxx`.\n\nThis is demonstrated in `example/cmake_makefile`.\n\n## Installation\n\nZpp can be installed using the usual python way with `setup.py`.\n```\n./setup.py --help\n```\n\nThe cmake approach is deprecated.\n\n## FAQ\n\nQ. Isn't zpp redundant with assumed type parameters?\n\nA.\nThe assumed type parameters functionality allows to implement part of what can\nbe done with zpp (support for all kinds of a type). However as of 2013 it was\nnot correctly supported on most compilers installed on the supercomputers.\n\nIn addition, many things can be done with zpp but not with assumed type\nparameters, such as support for variable array rank or small variations of the\ncode depending on the kind.\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "bash Fortran pre-processor",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "zpp",
            "package_url": "https://pypi.org/project/zpp/",
            "platform": "",
            "project_url": "https://pypi.org/project/zpp/",
            "project_urls": {
               "Source Code": "https://github.com/pdidev/zpp/"
            },
            "release_url": "https://pypi.org/project/zpp/1.0.4/",
            "requires_dist": [
               "setuptools"
            ],
            "requires_python": "",
            "summary": "a Bash Pre-Processor for Fortran. ZPP is useful in order to build clean Fortran90 interfaces. It allows to generate Fortran code for all types, kinds, and array ranks supported by the compiler.",
            "version": "1.0.4",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Dheepak Krishnamurthy",
            "author_email": "kdheepak89@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# zip [![](https://travis-ci.org/kdheepak/zip.svg?branch=master)](https://travis-ci.org/kdheepak/zip/branches)\n\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/kdheepak/zip",
            "keywords": "",
            "license": "Revised BSD License",
            "maintainer": "",
            "maintainer_email": "",
            "name": "zip",
            "package_url": "https://pypi.org/project/zip/",
            "platform": "",
            "project_url": "https://pypi.org/project/zip/",
            "project_urls": {
               "Homepage": "https://github.com/kdheepak/zip"
            },
            "release_url": "https://pypi.org/project/zip/0.0.2/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Intel Corporation",
            "author_email": "scripting@intel.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "Intended Audience :: Education",
               "Intended Audience :: Other Audience",
               "Intended Audience :: Science/Research",
               "Intended Audience :: System Administrators",
               "License :: Other/Proprietary License",
               "Operating System :: MacOS",
               "Operating System :: Microsoft :: Windows",
               "Operating System :: POSIX",
               "Operating System :: Unix",
               "Topic :: Software Development :: Libraries"
            ],
            "description": "Intel(R) Performance Primitives provides developers with high-quality, production-ready, low-level building blocks for image processing, signal processing, and data processing (data compression and decompression, and cryptography) applications.\n\nOne of many Intel(R) accelerated Python packages and performance library runtimes available on [PyPI](https://software.intel.com/en-us/articles/installing-the-intel-distribution-for-python-and-intel-performance-libraries-with-pip-and), and as part of [Intel(R) Distribution for Python](https://software.intel.com/en-us/distribution-for-python).\n\nFor latest release updates and security notifications, please [subscribe](https://software.intel.com/en-us/forums/intel-distribution-for-python) to the Intel(R) Distribution for Python Community forum.\n\nFree to use and redistribute pursuant to the [Intel Simplified Software License](https://software.intel.com/en-us/license/intel-simplified-software-license).\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://software.intel.com/en-us/articles/empowering-science-with-high-performance-python",
            "keywords": "",
            "license": "Proprietary - Intel",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ipp",
            "package_url": "https://pypi.org/project/ipp/",
            "platform": "",
            "project_url": "https://pypi.org/project/ipp/",
            "project_urls": {
               "Homepage": "https://software.intel.com/en-us/articles/empowering-science-with-high-performance-python"
            },
            "release_url": "https://pypi.org/project/ipp/2019.4.243/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Intel(R) Performance Primitives",
            "version": "2019.4.243",
            "yanked": false,
            "yanked_reason": null
         }
      ],
      "idna": [
         {
            "author": "Gabriel Alves",
            "author_email": "gabriel.alves@pickcells.bio",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# sx\n#### Framework to manage gRPC-based microservices application",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "https://github.com/itsmealves/sx/releases/download/0.6.0/sx-0.6.0.tar.gz",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/itsmealves/sx",
            "keywords": "sx microservices rpc grpc Framework",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "sx",
            "package_url": "https://pypi.org/project/sx/",
            "platform": "",
            "project_url": "https://pypi.org/project/sx/",
            "project_urls": {
               "Download": "https://github.com/itsmealves/sx/releases/download/0.6.0/sx-0.6.0.tar.gz",
               "Homepage": "https://github.com/itsmealves/sx"
            },
            "release_url": "https://pypi.org/project/sx/0.6.0/",
            "requires_dist": null,
            "requires_python": ">=3.5",
            "summary": "Framework to manage gRPC-based microservices application",
            "version": "0.6.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "chrysn",
            "author_email": "chrysn@fsfe.org",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 3 - Alpha",
               "Intended Audience :: Education",
               "Intended Audience :: Science/Research",
               "License :: OSI Approved :: GNU General Public License (GPL)"
            ],
            "description": "UNKNOWN",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "UNKNOWN",
            "keywords": null,
            "license": "GPL",
            "maintainer": null,
            "maintainer_email": null,
            "name": "si",
            "package_url": "https://pypi.org/project/si/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/si/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "UNKNOWN"
            },
            "release_url": "https://pypi.org/project/si/0.1.1-1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Module to represent SI units",
            "version": "0.1.1-1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "leesoar",
            "author_email": "secure@tom.com",
            "bugtrack_url": null,
            "classifiers": [
               "License :: OSI Approved :: MIT License",
               "Programming Language :: Python :: 3.5",
               "Programming Language :: Python :: 3.6",
               "Programming Language :: Python :: 3.7",
               "Programming Language :: Python :: Implementation :: CPython",
               "Programming Language :: Python :: Implementation :: PyPy"
            ],
            "description": "\nDevelop soon\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://leesoar.com",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ida",
            "package_url": "https://pypi.org/project/ida/",
            "platform": "",
            "project_url": "https://pypi.org/project/ida/",
            "project_urls": {
               "Homepage": "https://leesoar.com"
            },
            "release_url": "https://pypi.org/project/ida/0.0.1/",
            "requires_dist": null,
            "requires_python": ">=3.3.0",
            "summary": "Develop soon",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Xavier Bruhiere",
            "author_email": "xavier.bruhiere@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 2 - Pre-Alpha",
               "Intended Audience :: Science/Research",
               "License :: OSI Approved :: Apache Software License",
               "Natural Language :: English",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2.7",
               "Topic :: Software Development",
               "Topic :: System :: Shells"
            ],
            "description": "python library DNA\n==================\n\n[![Coverage Status](https://coveralls.io/repos/hivetech/dna/badge.png)](https://coveralls.io/r/hivetech/dna)\n\n> Generic python utilities\n\nInstallation\n------------\n\n```console\npip install dna\n```\n\nExample\n-----\n\n```python\nimport dna.utils as utils\nimport dna.logger as logger\n\nlog_setup = logger.setup(level='info', filename='app.log')\nlog = logger.logger(__name__)\nwith log_setup.applicationbound():\n\n    log.info('hello', where='world')\n\n    useless_id = utils.generate_unique_id()\n    useless_name = utils.generate_random_name()\n\n    if utils.docker_check() and utils.is_running('ipyhon'):\n\n        print utils.Version('0.4.1')\n\n        module = utils.dynamic_import('dna.settings', 'LOG')\n        print utils.emphasis(module, align=False)\n\n        print utils.self_ip()\n```",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/hivetech/dna",
            "keywords": null,
            "license": "Apache 2.0",
            "maintainer": null,
            "maintainer_email": null,
            "name": "dna",
            "package_url": "https://pypi.org/project/dna/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/dna/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/hivetech/dna"
            },
            "release_url": "https://pypi.org/project/dna/0.0.7/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Generic python utilities",
            "version": "0.0.7",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Christopher Brown",
            "author_email": "io@henrian.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 2 - Pre-Alpha",
               "License :: OSI Approved :: MIT License",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.6",
               "Programming Language :: Python :: 2.7",
               "Topic :: Software Development :: Libraries :: Python Modules",
               "Topic :: System :: Archiving :: Packaging",
               "Topic :: System :: Filesystems"
            ],
            "description": "Python (package) installation\n-----------------------------\n\nGetting started from `PyPI <https://pypi.python.org/pypi/pi/>`__:\n\n::\n\n    easy_install pi\n\n`Whence easy\\_install? <#setuptools>`__\n\nCommands\n--------\n\n-  Uninstall package named \"pip\":\n\n   ::\n\n       pi uninstall pip\n\n-  Install package named \"filesequence\":\n\n   ::\n\n       pi install filesequence\n\n-  List paths that Python searches for imported modules:\n\n   ::\n\n       pi paths\n\n-  List installed packages:\n\n   ::\n\n       pi list\n\nTesting\n-------\n\nContinuous integration:\n\n|Travis CI Build Status|\n\nOr run tests locally:\n\n::\n\n    nosetests --with-doctest\n\nRelated\n~~~~~~~\n\n-  http://guide.python-distribute.org/creation.html\n-  `distribute/pkg\\_resources\n   docs <http://pythonhosted.org/distribute/pkg_resources.html>`__\n-  standard library\n   ```site`` <http://docs.python.org/2/library/site.html>`__\n-  standard library `environment\n   variables <http://docs.python.org/2/using/cmdline.html#environment-variables>`__\n\nSetuptools\n~~~~~~~~~~\n\n``pi`` does not yet completely replace\n`setuptools <https://pypi.python.org/pypi/setuptools>`__. You may need\nto install it first:\n\n+----------+-----------------------------------------+\n| Distro   | Package manager command                 |\n+==========+=========================================+\n| Ubuntu   | ``apt-get install python-setuptools``   |\n+----------+-----------------------------------------+\n| Mac      | built-in                                |\n+----------+-----------------------------------------+\n| Arch     | ``pacman -S python-setuptools``         |\n+----------+-----------------------------------------+\n| CentOS   | ``yum install python-setuptools``       |\n+----------+-----------------------------------------+\n\nLicense\n-------\n\nCopyright (c) 2013 Christopher Brown. `MIT\nLicensed <https://raw.github.com/chbrown/pi/master/LICENSE>`__.\n\n.. |Travis CI Build Status| image:: https://travis-ci.org/chbrown/pi.png?branch=master\n   :target: https://travis-ci.org/chbrown/pi",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/chbrown/pi",
            "keywords": null,
            "license": "Copyright (c) 2013 Christopher Brown\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.",
            "maintainer": null,
            "maintainer_email": null,
            "name": "pi",
            "package_url": "https://pypi.org/project/pi/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/pi/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/chbrown/pi"
            },
            "release_url": "https://pypi.org/project/pi/0.1.2/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Simpler python package installation",
            "version": "0.1.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ip",
            "package_url": "https://pypi.org/project/ip/",
            "platform": "",
            "project_url": "https://pypi.org/project/ip/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/ip/0.0.1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Vitalii Vanovschi",
            "author_email": "support@parallelpython.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Natural Language :: English",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Topic :: Software Development",
               "Topic :: System :: Distributed Computing"
            ],
            "description": "Parallel Python module (PP) provides an easy and efficient way to create parallel-enabled applications for SMP computers and clusters. PP module features cross-platform portability and dynamic load balancing. Thus application written with PP will parallelize efficiently even on heterogeneous and multi-platform clusters (including clusters running other application with variable CPU loads). Visit http://www.parallelpython.com for further information.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "http://www.parallelpython.com/downloads/pp/pp-1.6.5.zip",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "http://www.parallelpython.com",
            "keywords": null,
            "license": "BSD-like",
            "maintainer": null,
            "maintainer_email": null,
            "name": "pp",
            "package_url": "https://pypi.org/project/pp/",
            "platform": "Windows,Linux,Unix",
            "project_url": "https://pypi.org/project/pp/",
            "project_urls": {
               "Download": "http://www.parallelpython.com/downloads/pp/pp-1.6.5.zip",
               "Homepage": "http://www.parallelpython.com"
            },
            "release_url": "https://pypi.org/project/pp/1.6.5/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Parallel and distributed programming for Python",
            "version": "1.6.5",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Marcus Donnelly",
            "author_email": "marcus.k.donnelly@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "Intended Audience :: Science/Research",
               "License :: OSI Approved :: BSD License",
               "Programming Language :: Python :: 3",
               "Topic :: Scientific/Engineering"
            ],
            "description": "",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "Oceanography,Utilities",
            "license": "BSD",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ocutils",
            "package_url": "https://pypi.org/project/ocutils/",
            "platform": "",
            "project_url": "https://pypi.org/project/ocutils/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/ocutils/1.1.1/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Utility functions for oceanography related work",
            "version": "1.1.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Kiana Alessandra V. Villaera",
            "author_email": "kiana.villaera@senti.com.ph",
            "bugtrack_url": null,
            "classifiers": [
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 3"
            ],
            "description": "Contains everything you might need to perform essential data center functions\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/K-Winkles/dcutils",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dcutils",
            "package_url": "https://pypi.org/project/dcutils/",
            "platform": "",
            "project_url": "https://pypi.org/project/dcutils/",
            "project_urls": {
               "Homepage": "https://github.com/K-Winkles/dcutils"
            },
            "release_url": "https://pypi.org/project/dcutils/0.6/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "A simple package for data center utilities",
            "version": "0.6",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Mike Kazantsev",
            "author_email": "mk.fraggod@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Intended Audience :: Developers",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3.5",
               "Topic :: Software Development",
               "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description": "pretty-yaml (or pyaml)\n======================\n\nPyYAML-based python module to produce pretty and readable YAML-serialized data.\n\nThis module is for serialization only, see `ruamel.yaml`_ module for literate\nYAML parsing (keeping track of comments, spacing, line/column numbers of values, etc).\n\n[note: to dump stuff parsed by ruamel.yaml with this module, use only ``YAML(typ='safe')`` there]\n\n.. contents::\n  :backlinks: none\n\n\nWarning\n-------\n\nPrime goal of this module is to produce human-readable output that can be easily\nmanipulated and re-used, but maybe with some occasional caveats.\n\nOne good example of such \"caveat\" is that e.g. ``{'foo': '123'}`` will serialize\nto ``foo: 123``, which for PyYAML would be a bug, as 123 will then be read back\nas an integer from that, but here it's a feature.\n\nSo please do not rely on the thing to produce output that can always be\ndeserialized exactly to what was exported, at least - use PyYAML (e.g. with\noptions from the next section) for that.\n\n\nWhat this module does and why\n-----------------------------\n\nYAML is generally nice and easy format to read *if* it was written by humans.\n\nPyYAML can a do fairly decent job of making stuff readable, and the best\ncombination of parameters for such output that I've seen so far is probably this one::\n\n  >>> m = [123, 45.67, {1: None, 2: False}, u'some text']\n  >>> data = dict(a=u'asldnsa\\nasldpáknsa\\n', b=u'whatever text', ma=m, mb=m)\n  >>> yaml.safe_dump(data, sys.stdout, allow_unicode=True, default_flow_style=False)\n  a: 'asldnsa\n\n    asldpáknsa\n\n    '\n  b: whatever text\n  ma: &id001\n  - 123\n  - 45.67\n  - 1: null\n    2: false\n  - some text\n  mb: *id001\n\npyaml tries to improve on that a bit, with the following tweaks:\n\n* Most human-friendly representation options in PyYAML (that I know of) get\n  picked as defaults.\n\n* Does not dump \"null\" values, if possible, replacing these with just empty\n  strings, which have the same meaning but reduce visual clutter and are easier\n  to edit.\n\n* Dicts, sets, OrderedDicts, defaultdicts, namedtuples, etc are representable\n  and get sorted on output (OrderedDicts and namedtuples keep their ordering),\n  so that output would be as diff-friendly as possible, and not arbitrarily\n  depend on python internals.\n\n  It appears that at least recent PyYAML versions also do such sorting for\n  python dicts.\n\n* List items get indented, as they should be.\n\n* bytestrings that can't be auto-converted to unicode raise error, as yaml has\n  no \"binary bytes\" (i.e. unix strings) type.\n\n* Attempt is made to pick more readable string representation styles, depending\n  on the value, e.g.::\n\n    >>> yaml.safe_dump(cert, sys.stdout)\n    cert: '-----BEGIN CERTIFICATE-----\n\n      MIIH3jCCBcagAwIBAgIJAJi7AjQ4Z87OMA0GCSqGSIb3DQEBCwUAMIHBMRcwFQYD\n\n      VQQKFA52YWxlcm9uLm5vX2lzcDEeMBwGA1UECxMVQ2VydGlmaWNhdGUgQXV0aG9y\n    ...\n\n    >>> pyaml.p(cert):\n    cert: |\n      -----BEGIN CERTIFICATE-----\n      MIIH3jCCBcagAwIBAgIJAJi7AjQ4Z87OMA0GCSqGSIb3DQEBCwUAMIHBMRcwFQYD\n      VQQKFA52YWxlcm9uLm5vX2lzcDEeMBwGA1UECxMVQ2VydGlmaWNhdGUgQXV0aG9y\n    ...\n\n* \"force_embed\" option to avoid having &id stuff scattered all over the output\n  (which might be beneficial in some cases, hence the option).\n\n* \"&id\" anchors, if used, get labels from the keys they get attached to,\n  not just use meaningless enumerators.\n\n* \"string_val_style\" option to only apply to strings that are values, not keys,\n  i.e::\n\n    >>> pyaml.p(data, string_val_style='\"')\n    key: \"value\\nasldpáknsa\\n\"\n    >>> yaml.safe_dump(data, sys.stdout, allow_unicode=True, default_style='\"')\n    \"key\": \"value\\nasldpáknsa\\n\"\n\n* \"sort_dicts=False\" option to leave dict item ordering to python, and not\n  force-sort them in yaml output, which can be important for python 3.6+ where\n  they retain ordering info.\n\n* Has an option to add vertical spacing (empty lines) between keys on different\n  depths, to make output much more seekable.\n\nResult for the (rather meaningless) example above (without any additional\ntweaks)::\n\n  >>> pyaml.p(data)\n  a: |\n    asldnsa\n    asldpáknsa\n  b: 'whatever text'\n  ma: &ma\n    - 123\n    - 45.67\n    - 1:\n      2: false\n    - 'some text'\n  mb: *ma\n\n----------\n\nExtended example::\n\n  >>> pyaml.dump(conf, sys.stdout, vspacing=[2, 1]):\n  destination:\n\n    encoding:\n      xz:\n        enabled: true\n        min_size: 5120\n        options:\n        path_filter:\n          - \\.(gz|bz2|t[gb]z2?|xz|lzma|7z|zip|rar)$\n          - \\.(rpm|deb|iso)$\n          - \\.(jpe?g|gif|png|mov|avi|ogg|mkv|webm|mp[34g]|flv|flac|ape|pdf|djvu)$\n          - \\.(sqlite3?|fossil|fsl)$\n          - \\.git/objects/[0-9a-f]+/[0-9a-f]+$\n\n    result:\n      append_to_file:\n      append_to_lafs_dir:\n      print_to_stdout: true\n\n    url: http://localhost:3456/uri\n\n\n  filter:\n    - /(CVS|RCS|SCCS|_darcs|\\{arch\\})/$\n    - /\\.(git|hg|bzr|svn|cvs)(/|ignore|attributes|tags)?$\n    - /=(RELEASE-ID|meta-update|update)$\n\n\n  http:\n\n    ca_certs_files: /etc/ssl/certs/ca-certificates.crt\n\n    debug_requests: false\n\n    request_pool_options:\n      cachedConnectionTimeout: 600\n      maxPersistentPerHost: 10\n      retryAutomatically: true\n\n\n  logging:\n\n    formatters:\n      basic:\n        datefmt: '%Y-%m-%d %H:%M:%S'\n        format: '%(asctime)s :: %(name)s :: %(levelname)s: %(message)s'\n\n    handlers:\n      console:\n        class: logging.StreamHandler\n        formatter: basic\n        level: custom\n        stream: ext://sys.stderr\n\n    loggers:\n      twisted:\n        handlers:\n          - console\n        level: 0\n\n    root:\n      handlers:\n        - console\n      level: custom\n\nNote that unless there are many moderately wide and deep trees of data, which\nare expected to be read and edited by people, it might be preferrable to\ndirectly use PyYAML regardless, as it won't introduce another (rather pointless\nin that case) dependency and a point of failure.\n\n\nSome Tricks\n-----------\n\n* Pretty-print any yaml or json (yaml subset) file from the shell::\n\n    % python -m pyaml /path/to/some/file.yaml\n    % curl -s https://www.githubstatus.com/api/v2/summary.json | python -m pyaml\n\n* Process and replace json/yaml file in-place::\n\n    % python -m pyaml -r file-with-json.data\n\n* Easier \"debug printf\" for more complex data (all funcs below are aliases to\n  same thing)::\n\n    pyaml.p(stuff)\n    pyaml.pprint(my_data)\n    pyaml.pprint('----- HOW DOES THAT BREAKS!?!?', input_data, some_var, more_stuff)\n    pyaml.print(data, file=sys.stderr) # needs \"from __future__ import print_function\"\n\n* Force all string values to a certain style (see info on these in\n  `PyYAML docs`_)::\n\n    pyaml.dump(many_weird_strings, string_val_style='|')\n    pyaml.dump(multiline_words, string_val_style='>')\n    pyaml.dump(no_want_quotes, string_val_style='plain')\n\n  Using ``pyaml.add_representer()`` (note \\*p\\*yaml) as suggested in\n  `this SO thread`_ (or `github-issue-7`_) should also work.\n\n* Control indent and width of the results::\n\n    pyaml.dump(wide_and_deep, indent=4, width=120)\n\n  These are actually keywords for PyYAML Emitter (passed to it from Dumper),\n  see more info on these in `PyYAML docs`_.\n\n* Dump multiple yaml documents into a file: ``pyaml.dump_all([data1, data2, data3], dst_file)``\n\n  explicit_start=True is implied, unless explicit_start=False is passed.\n\n.. _PyYAML docs: http://pyyaml.org/wiki/PyYAMLDocumentation#Scalars\n.. _this SO thread: http://stackoverflow.com/a/7445560\n.. _github-issue-7: https://github.com/mk-fg/pretty-yaml/issues/7\n\n\nInstallation\n------------\n\nIt's a regular package for Python (3.x or 2.x).\n\nModule uses PyYAML_ for processing of the actual YAML files and should pull it\nin as a dependency.\n\nDependency on unidecode_ module is optional and should only be necessary if\nsame-id objects or recursion is used within serialized data.\n\nBe sure to use python3/python2, pip3/pip2, easy_install-... binaries below,\nbased on which python version you want to install the module for, if you have\nseveral on the system (as is norm these days for py2-py3 transition).\n\nUsing pip_ is the best way::\n\n  % pip install pyaml\n\n(add --user option to install into $HOME for current user only)\n\nOr, if you don't have \"pip\" command::\n\n  % python -m ensurepip\n  % python -m pip install --upgrade pip\n  % python -m pip install pyaml\n\n(same suggestion wrt \"install --user\" as above)\n\nOn a very old systems, one of these might work::\n\n  % curl https://bootstrap.pypa.io/get-pip.py | python\n  % pip install pyaml\n\n  % easy_install pyaml\n\n  % git clone --depth=1 https://github.com/mk-fg/pretty-yaml\n  % cd pretty-yaml\n  % python setup.py install\n\n(all of install-commands here also have --user option,\nsee also `pip docs \"installing\" section`_)\n\nCurrent-git version can be installed like this::\n\n  % pip install 'git+https://github.com/mk-fg/pretty-yaml#egg=pyaml'\n\nNote that to install stuff to system-wide PATH and site-packages (without\n--user), elevated privileges (i.e. root and su/sudo) are often required.\n\nUse \"...install --user\", `~/.pydistutils.cfg`_ or virtualenv_ to do unprivileged\ninstalls into custom paths.\n\nMore info on python packaging can be found at `packaging.python.org`_.\n\n.. _ruamel.yaml: https://bitbucket.org/ruamel/yaml/\n.. _PyYAML: http://pyyaml.org/\n.. _unidecode: http://pypi.python.org/pypi/Unidecode\n.. _pip: http://pip-installer.org/\n.. _pip docs \"installing\" section: http://www.pip-installer.org/en/latest/installing.html\n.. _~/.pydistutils.cfg: http://docs.python.org/install/index.html#distutils-configuration-files\n.. _virtualenv: http://pypi.python.org/pypi/virtualenv\n.. _packaging.python.org: https://packaging.python.org/installing/\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/mk-fg/pretty-yaml",
            "keywords": "yaml serialization pretty print format human readable readability",
            "license": "WTFPL",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyaml",
            "package_url": "https://pypi.org/project/pyaml/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyaml/",
            "project_urls": {
               "Homepage": "https://github.com/mk-fg/pretty-yaml"
            },
            "release_url": "https://pypi.org/project/pyaml/20.4.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "PyYAML-based module to produce pretty and readable YAML-serialized data",
            "version": "20.4.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "haogege",
            "author_email": "1394168335@qq.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# pyyml\nUse python in yaml\n## 基本使用\n在python中使用：\n```python\nfrom pyyml import load\n\nwith open('conf.yml') as f:\n    raw_conf = f.read()\nconfig = load(raw_conf)\nprint(config)\n```\n在yaml中 `${...}` 中的内容将会被python执行：\n\nyaml内容\n```yaml\nsum: ${1 + 1}\n```\n实际解析内容\n```python\n{'sum': 2}\n```\n通过在文件开头第一行注释来导入所需的包：\n\n```yaml\n# libs:['os', 'os.path:path', 'this']\n```\n通过 [包名]:[别名] 取别名导入包\n\n`'os.path:path' 等同于 python 中的 from os import path`\n\n例如yaml文件内容\n```yaml\n# libs:['os', 'os.path:path', 'this']\nos_name: ${os.name}\nbase_dir: ${path.abspath(path.dirname(__file__))}\n```\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/q1394168335/pyyml",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyyml",
            "package_url": "https://pypi.org/project/pyyml/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyyml/",
            "project_urls": {
               "Homepage": "https://github.com/q1394168335/pyyml"
            },
            "release_url": "https://pypi.org/project/pyyml/0.0.2/",
            "requires_dist": [
               "pyyaml (>=3.13)"
            ],
            "requires_python": "",
            "summary": "Use python in yaml",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Michael Foord",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "rs",
            "package_url": "https://pypi.org/project/rs/",
            "platform": "",
            "project_url": "https://pypi.org/project/rs/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/rs/0.0/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "",
            "version": "0.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Ramses",
            "author_email": "hello@ramses.tech",
            "bugtrack_url": null,
            "classifiers": [
               "Framework :: Pyramid",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.4",
               "Programming Language :: Python :: 3.5",
               "Topic :: Internet :: WWW/HTTP",
               "Topic :: Internet :: WWW/HTTP :: WSGI :: Application"
            ],
            "description": "# `Ra`\n[![Build Status](https://travis-ci.org/ramses-tech/ra.svg?branch=master)](https://travis-ci.org/ramses-tech/ra)\n[![Documentation](https://readthedocs.org/projects/ra/badge/?version=stable)](http://ra.readthedocs.org)\n\nRa is a test suite generator and helper library for testing APIs described\nin [RAML](http://raml.org/).\n\nOut of the box, Ra provides a basic, automated test suite to test the routes\ndeclared in the RAML document. It provides test helpers for augmenting these\nwith custom tests to test application-specific logic, side effects, etc.\n\nRa is primarily designed to provide testing support for\n[ramses](http://github.com/ramses-tech/ramses) and\n[nefertari](http://github.com/ramses-tech/nefertari) applications, but can\nbe used with any WSGI-conformant, RAML-described API.\n\nIt currently depends on pytest but may be adapted for other test frameworks\nin the future. It works best using WebTest but doesn't require it.\n\n## Name\n\nRa was the god of the sun, the most important god in ancient Egypt.\n\n\n## Try it (dev)\n\nRun the test suite:\n\n```bash\n    $ pip install -r requirements.txt\n    $ py.test\n```\n\nCheck out the example:\n\n```bash\n    $ cd examples/ramses-test\n    $ pip install -r requirements.txt\n    $ py.test\n```\n\nThe example RAML at `examples/ramses-test/api.raml` and the test file\n`examples/ramses-test/tests/test_api.py` should be helpful to reference.\n\nSee the docs in `docs/`, and the `api.raml` and `tests/test_api.py` in\n`tests/apps/ramses_test`",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/ramses-tech/ra",
            "keywords": "web raml",
            "license": "UNKNOWN",
            "maintainer": null,
            "maintainer_email": null,
            "name": "ra",
            "package_url": "https://pypi.org/project/ra/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/ra/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/ramses-tech/ra"
            },
            "release_url": "https://pypi.org/project/ra/0.2.0/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Test RAML API definition",
            "version": "0.2.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Shoumik Palkar",
            "author_email": "shoumik@cs.stanford.edu",
            "bugtrack_url": null,
            "classifiers": [
               "License :: OSI Approved :: BSD License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 3"
            ],
            "description": "## split annotations\n\nThis package contains the Python implementation of [split annotations](), a system for optimizing applications\nthat combine many data-intensive library functions. See some useful links below.\n\n* [Documentation for this package](https://www.weld.rs/split-annotations/docs/)\n* [GitHub repository](https://www.github.com/weld-project/split-annotations)\n* [SOSP 2019 Paper describing the system](https://shoumik.xyz/static/papers/mozart-sosp19final.pdf)\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://www.github.com/weld-project/split-annotations",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "sa",
            "package_url": "https://pypi.org/project/sa/",
            "platform": "",
            "project_url": "https://pypi.org/project/sa/",
            "project_urls": {
               "Homepage": "https://www.github.com/weld-project/split-annotations"
            },
            "release_url": "https://pypi.org/project/sa/0.0.4/",
            "requires_dist": [
               "numpy",
               "pandas",
               "scipy",
               "sharedmem"
            ],
            "requires_python": ">=3.6",
            "summary": "Python split annotations package",
            "version": "0.0.4",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Mitch Garnaat",
            "author_email": "mitch@garnaat.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.6",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.3",
               "Programming Language :: Python :: 3.4",
               "Topic :: Internet"
            ],
            "description": "####\nboto\n####\nboto 2.49.0\n\nReleased: 11-July-2018\n\n.. image:: https://travis-ci.org/boto/boto.svg?branch=develop\n        :target: https://travis-ci.org/boto/boto\n\n.. image:: https://pypip.in/d/boto/badge.svg\n        :target: https://pypi.python.org/pypi/boto/\n\n******\nBoto 3\n******\n\n`Boto3 <https://github.com/boto/boto3>`__, the next version of Boto, is now\nstable and recommended for general use.  It can be used side-by-side with Boto\nin the same project, so it is easy to start using Boto3 in your existing\nprojects as well as new projects. Going forward, API updates and all new\nfeature work will be focused on Boto3.\n\nTo assist users who still depend on Boto and cannot immediately switch over, we\nwill be triaging and addressing critical issues and PRs in Boto in the short\nterm. As more users make the switch to Boto3, we expect to reduce our\nmaintenance involvement over time. If we decide on a cutoff date or any\nsignificant changes to our maintenance plan, we will make pre-announcements\nwell ahead of schedule to allow ample time for our users to adapt/migrate.\n\n\n************\nIntroduction\n************\n\nBoto is a Python package that provides interfaces to Amazon Web Services.\nCurrently, all features work with Python 2.6 and 2.7. Work is under way to\nsupport Python 3.3+ in the same codebase. Modules are being ported one at\na time with the help of the open source community, so please check below\nfor compatibility with Python 3.3+.\n\nTo port a module to Python 3.3+, please view our `Contributing Guidelines`_\nand the `Porting Guide`_. If you would like, you can open an issue to let\nothers know about your work in progress. Tests **must** pass on Python\n2.6, 2.7, 3.3, and 3.4 for pull requests to be accepted.\n\n\n********\nServices\n********\n\nAt the moment, boto supports:\n\n* Compute\n\n  * Amazon Elastic Compute Cloud (EC2) (Python 3)\n  * Amazon Elastic Map Reduce (EMR) (Python 3)\n  * AutoScaling (Python 3)\n  * Amazon Kinesis (Python 3)\n  * AWS Lambda (Python 3)\n  * Amazon EC2 Container Service (Python 3)\n\n* Content Delivery\n\n  * Amazon CloudFront (Python 3)\n\n* Database\n\n  * Amazon Relational Data Service (RDS)\n  * Amazon DynamoDB (Python 3)\n  * Amazon SimpleDB (Python 3)\n  * Amazon ElastiCache (Python 3)\n  * Amazon Redshift (Python 3)\n\n* Deployment and Management\n\n  * AWS Elastic Beanstalk (Python 3)\n  * AWS CloudFormation (Python 3)\n  * AWS Data Pipeline (Python 3)\n  * AWS Opsworks (Python 3)\n  * AWS CloudTrail (Python 3)\n  * AWS CodeDeploy (Python 3)\n\n* Administration & Security\n\n  * AWS Identity and Access Management (IAM) (Python 3)\n  * AWS Key Management Service (KMS) (Python 3)\n  * AWS Config (Python 3)\n  * AWS CloudHSM (Python 3)\n\n* Application Services\n\n  * Amazon CloudSearch (Python 3)\n  * Amazon CloudSearch Domain (Python 3)\n  * Amazon Elastic Transcoder (Python 3)\n  * Amazon Simple Workflow Service (SWF) (Python 3)\n  * Amazon Simple Queue Service (SQS) (Python 3)\n  * Amazon Simple Notification Server (SNS) (Python 3)\n  * Amazon Simple Email Service (SES) (Python 3)\n  * Amazon Cognito Identity (Python 3)\n  * Amazon Cognito Sync (Python 3)\n  * Amazon Machine Learning (Python 3)\n\n* Monitoring\n\n  * Amazon CloudWatch (EC2 Only) (Python 3)\n  * Amazon CloudWatch Logs (Python 3)\n\n* Networking\n\n  * Amazon Route53 (Python 3)\n  * Amazon Route 53 Domains (Python 3)\n  * Amazon Virtual Private Cloud (VPC) (Python 3)\n  * Elastic Load Balancing (ELB) (Python 3)\n  * AWS Direct Connect (Python 3)\n\n* Payments and Billing\n\n  * Amazon Flexible Payment Service (FPS)\n\n* Storage\n\n  * Amazon Simple Storage Service (S3) (Python 3)\n  * Amazon Glacier (Python 3)\n  * Amazon Elastic Block Store (EBS)\n  * Google Cloud Storage\n\n* Workforce\n\n  * Amazon Mechanical Turk\n\n* Other\n\n  * Marketplace Web Services (Python 3)\n  * AWS Support (Python 3)\n\nThe goal of boto is to support the full breadth and depth of Amazon\nWeb Services.  In addition, boto provides support for other public\nservices such as Google Storage in addition to private cloud systems\nlike Eucalyptus, OpenStack and Open Nebula.\n\nBoto is developed mainly using Python 2.6.6 and Python 2.7.3 on Mac OSX\nand Ubuntu Maverick.  It is known to work on other Linux distributions\nand on Windows.  Most of Boto requires no additional libraries or packages\nother than those that are distributed with Python.  Efforts are made\nto keep boto compatible with Python 2.5.x but no guarantees are made.\n\n************\nInstallation\n************\n\nInstall via `pip`_:\n\n::\n\n    $ pip install boto\n\nInstall from source:\n\n::\n\n    $ git clone git://github.com/boto/boto.git\n    $ cd boto\n    $ python setup.py install\n\n**********\nChangeLogs\n**********\n\nTo see what has changed over time in boto, you can check out the\nrelease notes at `http://docs.pythonboto.org/en/latest/#release-notes`\n\n***************************\nFinding Out More About Boto\n***************************\n\nThe main source code repository for boto can be found on `github.com`_.\nThe boto project uses the `gitflow`_ model for branching.\n\n`Online documentation`_ is also available. The online documentation includes\nfull API documentation as well as Getting Started Guides for many of the boto\nmodules.\n\nBoto releases can be found on the `Python Cheese Shop`_.\n\nJoin our IRC channel `#boto` on FreeNode.\nWebchat IRC channel: http://webchat.freenode.net/?channels=boto\n\nJoin the `boto-users Google Group`_.\n\n*************************\nGetting Started with Boto\n*************************\n\nYour credentials can be passed into the methods that create\nconnections.  Alternatively, boto will check for the existence of the\nfollowing environment variables to ascertain your credentials:\n\n**AWS_ACCESS_KEY_ID** - Your AWS Access Key ID\n\n**AWS_SECRET_ACCESS_KEY** - Your AWS Secret Access Key\n\nCredentials and other boto-related settings can also be stored in a\nboto config file.  See `this`_ for details.\n\n.. _Contributing Guidelines: https://github.com/boto/boto/blob/develop/CONTRIBUTING\n.. _Porting Guide: http://boto.readthedocs.org/en/latest/porting_guide.html\n.. _pip: http://www.pip-installer.org/\n.. _release notes: https://github.com/boto/boto/wiki\n.. _github.com: http://github.com/boto/boto\n.. _Online documentation: http://docs.pythonboto.org\n.. _Python Cheese Shop: http://pypi.python.org/pypi/boto\n.. _this: http://docs.pythonboto.org/en/latest/boto_config_tut.html\n.. _gitflow: http://nvie.com/posts/a-successful-git-branching-model/\n.. _neo: https://github.com/boto/boto/tree/neo\n.. _boto-users Google Group: https://groups.google.com/forum/?fromgroups#!forum/boto-users\n\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/boto/boto/",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "boto",
            "package_url": "https://pypi.org/project/boto/",
            "platform": "Posix; MacOS X; Windows",
            "project_url": "https://pypi.org/project/boto/",
            "project_urls": {
               "Homepage": "https://github.com/boto/boto/"
            },
            "release_url": "https://pypi.org/project/boto/2.49.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Amazon Web Services Library",
            "version": "2.49.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Hadi Asghari",
            "author_email": "hd.asghari@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 3",
               "Topic :: Software Development :: Libraries :: Python Modules",
               "Topic :: System :: Networking"
            ],
            "description": "pyasn\n=====\n\n.. image:: https://pypip.in/v/pyasn/badge.png\n   :target: https://pypi.python.org/pypi/pyasn\n\n.. image:: https://pypip.in/d/pyasn/badge.png\n   :target: https://pypi.python.org/pypi/pyasn\n\n\n**pyasn** is a Python extension module that enables very fast IP address to Autonomous System Number lookups.\nCurrent state and Historical lookups can be done, based on the MRT/RIB BGP archive used as input.\n\n*pyasn* is different from other ASN lookup tools in that it provides **offline** and **historical** lookups.\nIt provides utility scripts for users to build their own lookup databases based on any MRT/RIB archive.\nThis makes *pyasn* much faster than online dig/whois/json lookups.\n\nThe module is written in C and Python, and cross-compiles on Linux and Windows. Underneath, it uses a radix tree\ndata structure for storage of IP addresses. In the current version, it borrows code from *py-radix* to support\nboth IPV4 and IPV6 network prefixes. The current release is a beta. Compared to the previous version, it provides\nsupport for Python 2 and 3; adds new functionality, performance improvements, and unit-tests.\n\n*pyasn* is developed and maintained by researchers at the Economics of Cybersecurity research group at Delft\nUniversity of Technology (http://econsec.tbm.tudlft.nl). The package is used on an almost daily basis and bugs\nare fixed pretty quickly.  The package is largely developed and maintained by Hadi Asghari and Arman Noroozian.\nPlease report any bugs via GitHub (https://github.com/hadiasghari/pyasn) or email the developers.\n\n\nInstallation\n============\nInstallation is a breeze via pip: ::\n\n    pip install pyasn --pre\n\nOr with the standard Python: ::\n\n    python setup.py build\n    python setup.py install --record log\n\nYou will need to have pip, setuptools and build essentials installed if you build the package manually. On\nUbuntu/Debian you can get them using the following command: ::\n\n    sudo apt-get install python-pip python-dev build-essential\n\nBuilding the C module on Windows, using either pip or from source, requires Microsoft Visual C++ to be installed.\npyasn has been tested using Visual C++ Express 2010, available freely from Microsoft's website, on both the\nofficial Python 3.4 release and Miniconda3. Other versions of Python, Visual Studio, and Cygwin could also work\nwith minor modifications.\n\nWe plan to release *pyasn* packages to major Linux repositories once it is out of beta.\n\n\nUsage\n=====\nA simple example that demonstrates most of the features: ::\n\n    import pyasn\n\n    # Initialize module and load IP to ASN database\n    # the sample database can be downloaded or built - see below\n    asndb = pyasn.pyasn('ipasn_20140513.dat')\n\n    asndb.lookup('8.8.8.8')\n    # should return: (15169, '8.8.8.0/24'), the origin AS, and the BGP prefix it matches\n\n    asndb.get_as_prefixes(1128)\n    # returns ['130.161.0.0/16', '131.180.0.0/16', '145.94.0.0/16'], TU-Delft prefixes\n\n\nIPASN Data Files\n================\nIPASN data files are a long list of prefixes used to lookup AS number for IPs. An excerpt from such a file looks\nlike this: ::\n\n    ; IP-ASN32-DAT file\n    ; Original file : <Path to a rib file>\n    ; Converted on  : Tue May 13 22:03:05 2014\n    ; CIDRs         : 512490\n    ;\n    1.0.0.0/24  15169\n    1.0.128.0/17        9737\n    1.0.128.0/18        9737\n    1.0.128.0/19        9737\n    1.0.129.0/24        23969\n    ...\n\nIPASN data files can be created by downloading MRT/RIB BGP archives from Routeviews (or similar sources),\nand parsing them using provided scripts that tail the BGP AS-Path. This can be done simply as follows: ::\n\n    pyasn_util_download.py --latest\n    pyasn_util_convert.py --single <Downloaded RIB File> <ipasn_db_file_name>\n\n\n**NOTE:** These scripts are by default installed to ``/usr/local/bin`` and can be executed directly. If you installed\nthe package to a user directory, these scripts will not be on the path and you will have to invoke them by navigating\nto the folder in which they have been copied (e.g. ``~/.local/bin``).\n\nWe also provide download links to a large number of previously generated IPASN data files. These are based on\nweekly  snapshots of the Routeviews data from 2005-2015, accessible here:\nhttp://data.3tu.nl/repository/uuid:d4d23b8e-2077-4592-8b47-cb476ad16e12\n\n**New in v1.6:** To save disk space, you can gzip IPASN data files. The load time will be slighlty longer.\n\n\nPerformance Tip\n===============\nInitial loading of a IPASN data file is the most heavy operation of the package. For fast lookups using multiple\nIPASN data files, for instance for historical lookups on multiple dates, we recommend caching of loaded data files\nfor better performance.\n\n\nUninstalling pyasn\n==================\nYou can remove *pyasn* as follows: ::\n\n    pip uninstall pyasn\n\nIf you built and installed the package your self use the recorded log to remove the installed files.\n\n**Removing PyASN version 1.2**: *pyasn* v1.5/1.6 and v1.2 can be installed side by side (due to lower-cased package\nname). To avoid mistakes, you can uninstall the old **PyASN** by deleting the following files from your Python\ninstallation: ::\n\n    PYTHONDIR/dist-packages/PyASN.so\n    PYTHONDIR/dist-packages/PyASN-1.2.egg-info\n\n\nPackage Structure\n=================\nThe main portions of the directory tree are as follows: ::\n\n    .\n    ├── pyasn/__init__.py       # Python code of the main pyasn module\n    ├── pyasn/pyasn_radix.c     # C extension code (Python RADIX module with bulk load)\n    ├── pyasn/_radix/*          # C extension code (Based on original RADIX code from MRTd)\n    ├── pyasn/mrtx.py           # python module used to convert MRT files to pyasn DB files\n    ├── pyasn-utils/*.py        # Scripts to download & convert BGP MRT dumps to IPASN databases\n    ├── data/                   # Test Resources and some sample DBs to use\n    ├── tests/                  # Tests\n    └── setup.py                # Standard setup.py for installation/testing/etc.\n\n\n\nTesting pyasn Sources\n=====================\nA limited number of unit tests are provided in the ``tests/`` directory when downlading the sources. They can be\nrun with the following command: ::\n\n    python setup.py test\n\nThis beta release has been tested under python version 2.6, 2.7, 3.3, 3.4 and 3.5. We appreciate contributions towards\ntesting *pyasn*!\n\n**New in v1.6:** pyasn_util_convert.py offers a '--dump-screen' option which shows the MRT/RIB archive contents and\nthe chosen origin-AS.\n\n\nLicense & Acknowledgments\n=========================\n*pyasn* is licensed under the MIT license.\n\nIt extends code from py-radix (Michael J. Schultz and Damien Miller),  and improves upon it in several ways, for\ninstance in lowering memory usage and adding bulk prefix/origin load. The underlying radix tree implementation is\ntaken (and modified) from MRTd. These are all subject to their respective licenses.  Please see the LICENSE file\nfor details.\n\nThanks to Dr. Chris Lee (of Shadowserver) for proposing the use of radix trees.\n\nA handful of GitHub developers have contributed features and bug fixes to the latest releases.\nMany thanks to all of them.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": null,
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/hadiasghari/pyasn",
            "keywords": "ip asn autonomous system bgp whois prefix radix python routing networking",
            "license": "MIT",
            "maintainer": null,
            "maintainer_email": null,
            "name": "pyasn",
            "package_url": "https://pypi.org/project/pyasn/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/pyasn/",
            "project_urls": {
               "Homepage": "https://github.com/hadiasghari/pyasn"
            },
            "release_url": "https://pypi.org/project/pyasn/1.6.0b1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Offline IP address to Autonomous System Number lookup module.",
            "version": "1.6.0b1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Perdix Software",
            "author_email": "ssmith@perdixsw.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 2 - Pre-Alpha",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.4",
               "Programming Language :: Python :: 3.5",
               "Programming Language :: Python :: 3.6",
               "Topic :: Office/Business :: Financial",
               "Topic :: Scientific/Engineering :: Mathematics"
            ],
            "description": "UNKNOWN",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "https://www.github.com/perdixsw/umpy/tarball/0.1.0",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://www.github.com/perdixsw/umpy",
            "keywords": "units,measure,measurement,conversion,converter",
            "license": "MIT",
            "maintainer": null,
            "maintainer_email": null,
            "name": "umpy",
            "package_url": "https://pypi.org/project/umpy/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/umpy/",
            "project_urls": {
               "Download": "https://www.github.com/perdixsw/umpy/tarball/0.1.0",
               "Homepage": "https://www.github.com/perdixsw/umpy"
            },
            "release_url": "https://pypi.org/project/umpy/0.1.0/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Simple unit of measure conversion for python, optimized for manufacturing contexts.",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Jay Marcyes",
            "author_email": "jay@marcyes.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Environment :: Console",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Topic :: Software Development :: Testing"
            ],
            "description": "Pyt\n===\n\nPyt is a lightweight wrapper around `Python’s unittest\nmodule <https://docs.python.org/3/library/unittest.html>`__ that adds\nsome nice features and enhancements over the stock ``unittest`` module.\n\nQuickstart\n~~~~~~~~~~\n\nPyt overrides unittest’s built-in pathfinding to be smarter and less\nverbose, so you can match tests using prefix matching which makes\nrunning a test like:\n\n::\n\n   $ python -m unittest tests.foo_test.BarTestCase.test_che\n\nas simple as:\n\n::\n\n   $ pyt foo.Bar.che\n\nBut it’s even less verbose if you want it to be, pyt can reach into the\nmodules and classes to do its matching, so you don’t even need to\nspecify the module and class if you don’t want to:\n\n::\n\n   $ pyt che\n\nMore examples\n^^^^^^^^^^^^^\n\nTo run all the ``Happy`` tests:\n\n::\n\n   $ pyt Happy\n\nTo run all the ``newmodule`` tests:\n\n::\n\n   $ pyt newmodule\n\nTo run more than one test:\n\n::\n\n   $ pyt test1 test2 ...\n\nTo run every test ``pyt`` can find:\n\n::\n\n   $ pyt\n\nAnd the way I like to run all tests in the current directory:\n\n::\n\n   $ pyt -vb\n\nWhich can also be written:\n\n::\n\n   $ pyt --verbose --buffer\n\nFlags\n~~~~~\n\nTo see everything pyt can do\n\n::\n\n   $ pyt --help\n\n–warnings\n^^^^^^^^^\n\nThis will convert warnings into errors.\n\n::\n\n   $ pyt --warnings\n\n–rerun\n^^^^^^\n\nIf your last testrun had failing tests this will rerun only the tests\nthat failed.\n\n::\n\n   $pyt --rerun\n\nThings to be aware of\n~~~~~~~~~~~~~~~~~~~~~\n\npyt uses Python’s PEP 8 style conventions\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n``pyt`` uses `Python’s code styling\nconventions <http://www.python.org/dev/peps/pep-0008/>`__ to decide what\nis the module and class, so, given input like this:\n\n::\n\n   $ pyt foo.bar.Baz.che\n\n``pyt`` will consider ``foo.bar`` to be the module, ``Baz`` to be a\nclass (because it starts with a capital letter), and ``che`` to be a\nmethod (since it comes after the class).\n\nLikewise, ``pyt`` uses unittest conventions, so a test module should end\nwith ``_test`` (eg, ``foo.bar_test``) or start with test (eg,\n``test_foo.py``) and a TestCase class should extend\n``unittest.TestCase``, and test methods should start with ``test_`` (eg,\n``test_che``).\n\nVague input can cause pyt to run more tests than you expect\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSo if you have something like this:\n\n::\n\n   project/\n     __init__.py\n     user.py\n     foo/\n       __init__.py\n       user.py\n     tests/\n       __init__.py\n       user_test.py\n       foo/\n         __init__.py\n         user_test.py\n\nAnd you want to run tests for ``foo.user`` and you run:\n\n::\n\n   $ pyt user\n\nit will run both ``tests/user_test`` and ``tests.foo.user_test``, the\nsolution is to just be more verbose when you have to be:\n\n::\n\n   $ pyt foo.user\n\nEnvironment Variables\n^^^^^^^^^^^^^^^^^^^^^\n\nIf you are running the tests within pyt, you might notice there is an\nenvironment variable ``PYT_TEST_COUNT`` that contains the count of how\nmany tests pyt found to run.\n\nInstallation\n------------\n\nUse ``pip``:\n\n::\n\n   $ pip install pyt\n\nYou can also get it directly from the repo:\n\n::\n\n   $ pip install --upgrade git+https://github.com/Jaymon/pyt#egg=pyt\n\nIf you install pyt using Python 3 it can also be invoked using the\n``pyt3`` command:\n\n::\n\n   $ pyt3 --help\n\nLikewise, Python 2 installs a ``pyt2`` command:\n\n::\n\n   $ pyt2 --help\n\nTesting\n-------\n\nTesting in 2.7 on most systems:\n\n::\n\n   $ python -m unittest pyt_test\n\nTesting in 3.5 on MacOS:\n\n::\n\n   $ python3.5 -m unittest pyt_test\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "http://github.com/Jaymon/pyt",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyt",
            "package_url": "https://pypi.org/project/pyt/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyt/",
            "project_urls": {
               "Homepage": "http://github.com/Jaymon/pyt"
            },
            "release_url": "https://pypi.org/project/pyt/1.0.5/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "easily run python unit tests",
            "version": "1.0.5",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Bradley Odell",
            "author_email": "btodell@hotmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Environment :: Console",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
               "Natural Language :: English",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 2.6",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Topic :: Software Development :: Build Tools"
            ],
            "description": "pyz\n===\n\n*Packages all source code and dependencies into a single Python zip application.*\n\nSummary\n-------\n\nDeploying a Python application any larger than a single file is\ncumbersome - this library aims to solve that problem.\n\nPython has been able to run code from within a zip file since version\n2.6. Python 3.5 introduced the `zipapp <https://docs.python.org/3/library/zipapp.html>`__ module\nwhich aims to simplify the process of creating a zip application.\nHowever, **zipapp** isn't a complete solution to the problem - it\ndoesn't handle dependencies and it doesn't include certain extra\nfeatures that this library provides.\n\nThis library allows you to bundle all of your Python code **AND** your\ndependencies into a single Python zip application file.\n\nNote: The dependency bundling feature is not implemented yet, but it is\nin the works!\n\nFeatures\n--------\n\n1. Bundle all Python source code with fine-grained control over included files.\n2. Ability to \"unixify\" the output application by prepending a customizable\n   `shebang <https://en.wikipedia.org/wiki/Shebang_(Unix)>`__.\n3. Python interpreter version check - display a friendly notice instead\n   of a Python exception if the user runs your application using an\n   unsupported Python version.\n\nPlanned\n-------\n\n1. Automatically identify dependencies and package them accordingly.\n",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "https://github.com/BTOdell/pyz/archive/0.4.3.tar.gz",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/BTOdell/pyz",
            "keywords": "pyz zip app zipapp bundle dependencies library",
            "license": "GPLv3",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyz",
            "package_url": "https://pypi.org/project/pyz/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyz/",
            "project_urls": {
               "Download": "https://github.com/BTOdell/pyz/archive/0.4.3.tar.gz",
               "Homepage": "https://github.com/BTOdell/pyz"
            },
            "release_url": "https://pypi.org/project/pyz/0.4.3/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Packages all source code and dependencies into a single Python zip application.",
            "version": "0.4.3",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Val Neekman",
            "author_email": "info@neekware.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 3 - Alpha",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Operating System :: POSIX",
               "Programming Language :: Python",
               "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description": "AWSLI\n====================\n\n**Amazon Web Services Line Interpreter**\n\n**Author:** Val Neekman [ info@neekware.com, @vneekman ]\n\nOverview\n========\n\nA Line Interpreter for Amazon Web Services.\n\nHow to install\n==================\n\n    1. easy_install awsli\n    2. pip install awsli\n    3. git clone http://github.com/un33k/awsli\n        a. cd awsli\n        b. run python setup.py\n    4. wget https://github.com/un33k/awsli/zipball/master\n        a. unzip the downloaded file\n        b. cd into awsli-* directory\n        c. run python setup.py\n\nHow to use\n=================\n\n``Usage``\n\n``Note:``\n\nRunning the tests\n=================\n\nTo run the tests against the current environment:\n\n    python test.py\n\nChangelog\n=========\n\n0.1\n-----\n\n* Initial release\n\n\nLicense\n=======\n\nCopyright (c) 2012, Val Neekman\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without \nmodification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this \nlist of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this \nlist of conditions and the following disclaimer in the documentation and/or \nother materials provided with the distribution.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND \nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED \nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE \nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE \nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL \nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR \nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, \nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE \nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/un33k/awsli",
            "keywords": null,
            "license": "BSD",
            "maintainer": null,
            "maintainer_email": null,
            "name": "awsli",
            "package_url": "https://pypi.org/project/awsli/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/awsli/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/un33k/awsli"
            },
            "release_url": "https://pypi.org/project/awsli/0.0.1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "A Line Interpreter for Amazon Web Services",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Armin Ronacher",
            "author_email": "armin.ronacher@active-4.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Environment :: Web Environment",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
               "Topic :: Software Development :: Libraries :: Python Modules",
               "Topic :: Text Processing :: Markup :: HTML"
            ],
            "description": "jinja\n~~~~~\n\nJinja is a `sandboxed`_ template engine written in pure Python. It\nprovides a `Django`_ like non-XML syntax and compiles templates into\nexecutable python code. It's basically a combination of Django templates\nand python code.\n\nNutshell\n--------\n\nHere a small example of a Jinja template::\n\n    {% extends 'base.html' %}\n    {% block title %}Memberlist{% endblock %}\n    {% block content %}\n      <ul>\n      {% for user in users %}\n        <li><a href=\"{{ user.url|e }}\">{{ user.username|e }}</a></li>\n      {% endfor %}\n      </ul>\n    {% endblock %}\n\nPhilosophy\n----------\n\nApplication logic is for the controller but don't try to make the life\nfor the template designer too hard by giving him too few functionality.\n\nFor more informations visit the new `jinja webpage`_ and `documentation`_.\n\nNote\n----\n\nThis is the Jinja 1.0 release which is completely incompatible with the\nold \"pre 1.0\" branch. The old branch will still receive security updates\nand bugfixes but the 1.0 branch will be the only version that receives\nsupport.\n\nIf you have an application that uses Jinja 0.9 and won't be updated in\nthe near future the best idea is to ship a Jinja 0.9 checkout together\nwith the application.\n\nThe `Jinja tip`_ is installable via `easy_install` with ``easy_install\nJinja==dev``.\n\n.. _sandboxed: http://en.wikipedia.org/wiki/Sandbox_(computer_security)\n.. _Django: http://www.djangoproject.com/\n.. _jinja webpage: http://jinja.pocoo.org/\n.. _documentation: http://jinja.pocoo.org/documentation/index.html\n.. _Jinja tip: http://dev.pocoo.org/hg/jinja-main/archive/tip.tar.gz#egg=Jinja-dev\n\n\n:copyright: 2007 by Armin Ronacher.\n:license: BSD, see LICENSE for more details.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "http://jinja.pocoo.org/",
            "keywords": "python.templating.engines",
            "license": "BSD",
            "maintainer": null,
            "maintainer_email": null,
            "name": "Jinja",
            "package_url": "https://pypi.org/project/Jinja/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/Jinja/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "http://jinja.pocoo.org/"
            },
            "release_url": "https://pypi.org/project/Jinja/1.2/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "A small but fast and easy to use stand-alone template engine written in pure python.",
            "version": "1.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Hsiaoming Yang",
            "author_email": "me@lepture.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Environment :: Console",
               "Environment :: Web Environment",
               "Framework :: Django",
               "Framework :: Flask",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.5",
               "Programming Language :: Python :: 3.6",
               "Programming Language :: Python :: 3.7",
               "Programming Language :: Python :: 3.8",
               "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
               "Topic :: Internet :: WWW/HTTP :: WSGI :: Application",
               "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description": "Authlib\n=======\n\nThe ultimate Python library in building OAuth and OpenID Connect servers.\nJWS, JWK, JWA, JWT are included.\n\nUseful Links\n------------\n\n1. Homepage: https://authlib.org/\n2. Documentation: https://docs.authlib.org/\n3. Purchase Commercial License: https://authlib.org/plans\n4. Blog: https://blog.authlib.org/\n5. More Repositories: https://github.com/authlib\n6. Twitter: https://twitter.com/authlib\n7. Donate: https://www.patreon.com/lepture\n\nSpecifications\n--------------\n\n- RFC5849: The OAuth 1.0 Protocol\n- RFC6749: The OAuth 2.0 Authorization Framework\n- RFC6750: The OAuth 2.0 Authorization Framework: Bearer Token Usage\n- RFC7009: OAuth 2.0 Token Revocation\n- RFC7515: JSON Web Signature\n- RFC7516: JSON Web Encryption\n- RFC7517: JSON Web Key\n- RFC7518: JSON Web Algorithms\n- RFC7519: JSON Web Token\n- RFC7521: Assertion Framework for OAuth 2.0 Client Authentication and Authorization Grants\n- RFC7523: JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants\n- RFC7591: OAuth 2.0 Dynamic Client Registration Protocol\n- RFC7662: OAuth 2.0 Token Introspection\n- RFC8414: OAuth 2.0 Authorization Server Metadata\n- RFC8628: OAuth 2.0 Device Authorization Grant\n- OpenID Connect 1.0\n- OpenID Connect Discovery 1.0\n\nImplementations\n---------------\n\n- Requests OAuth 1 Session\n- Requests OAuth 2 Session\n- Requests Assertion Session\n- Flask OAuth 1/2 Client\n- Django OAuth 1/2 Client\n- Flask OAuth 1.0 Server\n- Flask OAuth 2.0 Server\n- Flask OpenID Connect 1.0\n- Django OAuth 1.0 Server\n- Django OAuth 2.0 Server\n- Django OpenID Connect 1.0\n\nLicense\n-------\n\nAuthlib is licensed under BSD. Please see LICENSE for licensing details.\n\nIf this license does not fit your company, consider to purchase a commercial\nlicense. Find more information on `Authlib Plans`_.\n\n.. _`Authlib Plans`: https://authlib.org/plans\n\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://authlib.org/",
            "keywords": "",
            "license": "BSD-3-Clause",
            "maintainer": "",
            "maintainer_email": "",
            "name": "Authlib",
            "package_url": "https://pypi.org/project/Authlib/",
            "platform": "any",
            "project_url": "https://pypi.org/project/Authlib/",
            "project_urls": {
               "Blog": "https://blog.authlib.org/",
               "Bug Tracker": "https://github.com/lepture/authlib/issues",
               "Commercial License": "https://authlib.org/plans",
               "Documentation": "https://docs.authlib.org/",
               "Donate": "https://lepture.com/donate",
               "Homepage": "https://authlib.org/",
               "Source Code": "https://github.com/lepture/authlib"
            },
            "release_url": "https://pypi.org/project/Authlib/0.14.3/",
            "requires_dist": [
               "cryptography",
               "requests ; extra == 'client'"
            ],
            "requires_python": "",
            "summary": "The ultimate Python library in building OAuth and OpenID Connect servers.",
            "version": "0.14.3",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Julien Bigot",
            "author_email": "julien.bigot@cea.fr",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Environment :: Console",
               "License :: OSI Approved :: MIT License"
            ],
            "description": "# zpp\n\nThis is zpp, the Z Pre-Processor.\n\nZpp transforms bash in a pre-processor for F90 source files.\nIt offers a set of functions specifically tailored to build clean Fortran90\ninterfaces by generating code for all types, kinds, and array ranks supported by\na given compiler.\n\n## Syntax\n\nZpp files are typically named `*.F90.zpp`.\n\nIn these files, the lines that start with `!$SH` are interpreted as bash lines. \nOther lines are copied as-is, except that variable substitution is operated as\nin a double-quoted string, including bash commands `${VAR}` or `$(command)`.\nIf inside a bash control block (`if`, `for`, etc.), the output generation obeys\nthe control statement.\n\nFor example, this code:\n```\n!$SH for GREETED in world universe multiverse ; do\nprint *, \"Hello ${GREETED}\"\n!$SH done\n```\n\nWould produce the following result:\n```\nprint *, \"Hello world\"\nprint *, \"Hello universe\"\nprint *, \"Hello multiverse\"\n```\n\n### Support functions\n\nPredefined bash functions, variable and code can be provided in `.zpp.sh` files\nthat can be included with `#!SH source <filename>.zpp.sh`.\n\n**Beware**: a file NEEDs to have the `.zpp.sh` extension to be included from\nzpp.\n\nZpp provides a standard library of functions tailored to build clean Fortran90\ninterfaces by generating code for all types, kinds, and array ranks supported by\na given compiler.\n\n#### zpp_str_repeat\n\nFound in `base.zpp.sh`\n\nOutputs a string multiple times.\n\nParameters:\n1. the string to Repeat\n2. the lower bound of the iterations (inclusive)\n3. the upper bound of the iterations (inclusive)\n4. the string separator\n5. the string starter\n6. the string ender\n\nRepeats string `$1` (`$3`-`$2`+1) times, separated by string `$4` inside `$5`\n`$6`.\n* If the number of repetitions is negative, the result is empty.\n* If `$1` contains the '@N' substring, it will be replaced by the iteration\n  number (from `$2` to `$3`).\n\nexample:\n```\n#!SH source base.zpp.sh\nzpp_str_repeat v@N 5 7 '...' '<<' '>>'\nzpp_str_repeat w@N 1 1 '...' '<<' '>>'\nzpp_str_repeat x@N 1 0 '...' '<<' '>>'\n```\noutput:\n```\n<<v5...v6...v7>>\n<<w1>>\n```\n\n#### zpp_str_repeat_reverse\n\nFound in `base.zpp.sh`\n\nOutputs a string multiple times in reverse order.\n\nParameters:\n1. the string to Repeat\n2. the upper bound of the iterations (inclusive)\n3. the lower bound of the iterations (inclusive)\n4. the string separator\n5. the string starter\n6. the string ender\n\nRepeats string `$1` (`$2`-`$3`+1) times, separated by string `$4` inside `$5`\n`$6`.\n* If the number of repetitions is negative, the result is empty.\n* If `$1` contains the '@N' substring, it will be replaced by the iteration\n  number (from `$2` to `$3`, i.e. upper to lower).\n\nexample:\n```\n#!SH source base.zpp.sh\nzpp_str_repeat_reverse v@N 5 7 '...' '<<' '>>'\nzpp_str_repeat_reverse w@N 1 1 '...' '<<' '>>'\nzpp_str_repeat_reverse x@N 1 0 '...' '<<' '>>'\n```\noutput:\n```\n<<v7...v6...v5>>\n<<w1>>\n```\n\n#### ZPP_FORT_TYPES\n\nFound in `fortran.zpp.sh`\n\nThe list of types supported by the fortran compiler as zpp:typeIDs.\n\nThe compiler ID should be provided in `ZPP_CONFIG` as `config.<ID>`.\nThe supported predefined IDs are: `Gnu`, `Intel`, `PGI` and `XL`.\nYou can also provide definitions for an additional compiler by defining\n`ZPP_FORT_TYPES` in a file named `config.<ID>.zpp.sh`.\n\nIf you use cmake, it will automatically generate such a file for your compiler\nand define  `ZPP_CONFIG` so you don't have to handle it.\n\n### zpp_fort_array_desc\n\nFound in `fortran.zpp.sh`\n\nOutputs an assumed shaped array descriptor of the provided size.\n\nParameters:\n1. the size of the assumed shaped array\n\nexample:\n```\n#!SH source fortran.zpp.sh\ninteger:: scalar$(zpp_fort_array_desc 0)\ninteger:: array1d$(zpp_fort_array_desc 1)\ninteger:: array2d$(zpp_fort_array_desc 2)\n```\noutput:\n```\ninteger:: scalar\ninteger:: array1d(:)\ninteger:: array2d(:,:)\n```\n\n### zpp_fort_ptype\n\nFound in `fortran.zpp.sh`\n\nOutputs the type associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\nexample:\n```\n#!SH source fortran.zpp.sh\n!$SH for T in ${ZPP_FORT_TYPES} ; do\n$(zpp_fort_ptype $1)\n!$SH done\n```\nexample output:\n```\nCHARACTER\nCOMPLEX\nCOMPLEX\nINTEGER\nINTEGER\nINTEGER\nINTEGER\nLOGICAL\nREAL\nREAL\n```\n\n### zpp_fort_kind\n\nFound in `fortran.zpp.sh`\n\nOutputs the kind associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\nexample:\n```\n#!SH source fortran.zpp.sh\n!$SH for T in ${ZPP_FORT_TYPES} ; do\n$(zpp_fort_kind $1)\n!$SH done\n```\nexample output:\n```\n1\n4\n8\n1\n2\n4\n8\n1\n4\n8\n```\n\n### zpp_fort_type\n\nFound in `fortran.zpp.sh`\n\nOutputs the full type (with kind included) associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n2. additional attributes for the type\n\nexample:\n```\n#!SH source fortran.zpp.sh\n!$SH for T in ${MY_CHAR_TYPES} ; do\n$(zpp_fort_type $1)\n$(zpp_fort_type $1 \"len=5\")\n!$SH done\n```\nexample output:\n```\nCHARACTER(KIND=1)\nCHARACTER(KIND=1,len=5)\n```\n\n### zpp_fort_sizeof\n\nFound in `fortran.zpp.sh`\n\nOutputs the size in bits associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\n### zpp_fort_io_format\n\nFound in `fortran.zpp.sh`\n\nOutputs an IO descriptor suitable for a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\n### ZPP_HDF5F_TYPES\n\nFound in `hdf5_fortran.zpp.sh`\n\nA list of zpp:typeIDs supported by HDF5.\n\n### hdf5_constant\n\nFound in `hdf5_fortran.zpp.sh`\n\nOutputs the HDF5 type constant associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\nexample:\n```\n#!SH source hdf5_fortran.zpp.sh\n!$SH for T in ${ZPP_HDF5F_TYPES} ; do\n$(hdf5_constant $1)\n!$SH done\n```\nexample output:\n```\nH5T_NATIVE_INTEGER\nH5T_NATIVE_REAL\nH5T_NATIVE_REAL\nH5T_NATIVE_CHARACTER\n```\n\n\n## Command-line interface\n\nZpp basic usage is as follow:\n```\nUsage: zpp [Options...] <source> [<destination>]\n  use `zpp -h' for more info\n\nPreprocesses BASH in-line commands in a source file\n\nOptions:\n  --version        show program's version number and exit\n  -h, --help       show this help message and exit\n  -I DIR           Add DIR to search list for source directives\n  -o FILE          Place the preprocessed code in file FILE.\n  -D OPTION=VALUE  Set the value of OPTION to VALUE\n```\n\n## CMake interface\n\nSupport is provided for using zpp from CMake based projects, but you can use\nit from plain Makefiles too.\n\nThere are two ways you can use zpp from your CMake project:\n* with `add_subdirectory`: include zpp in your project and use it directly from\n  there,\n* with `find_package`: install zpp and use it as an external dependency of your\n  project.\n\n#### CMake subdirectory usage\n\nUsing zpp with `add_subdirectory` is very simple.\nJust copy the `zpp` directory in your source and point to it with\n`add_subdirectory(zpp)`.\nThe `zpp_preprocess` then becomes available to process zpp files.\n\nThis is demonstrated in `example/cmake_subdirectory`.\n\n#### CMake find usage\n\nUsing zpp with `find_package` is no more complex.\nIf zpp is installed, just add a `find_package(zpp REQUIRED)`.\nThe `zpp_preprocess` then becomes available to process zpp files.\n\nThis is demonstrated in `example/cmake_find`.\n\n## GMake usage\n\nUsing zpp from a GNU Makefile is slightly less powerful than from CMake.\nThe types and kinds supported by the Fortran compiler will not be automatically\ndetected.\nPredefined lists of supported types for well known compilers are provided\ninstead.\n\nTo use zpp from a Makefile, include the `share/zpp/zpp.mk` file (either from an\ninstalled location or from a subdirectory in your project).\nYou can then set the `zpp_COMPILER_ID` variable to the compiler you use and\n`.F90` files will be automatically generated from their `.F90.zpp` equivalent.\nThe `zppFLAGS` variable is automatically passed to zpp similarly to `CFLAGS` or\n`CXXFLAGS` for `cc` and `cxx`.\n\nThis is demonstrated in `example/cmake_makefile`.\n\n## Installation\n\nZpp can be installed using the usual python way with `setup.py`.\n```\n./setup.py --help\n```\n\nThe cmake approach is deprecated.\n\n## FAQ\n\nQ. Isn't zpp redundant with assumed type parameters?\n\nA.\nThe assumed type parameters functionality allows to implement part of what can\nbe done with zpp (support for all kinds of a type). However as of 2013 it was\nnot correctly supported on most compilers installed on the supercomputers.\n\nIn addition, many things can be done with zpp but not with assumed type\nparameters, such as support for variable array rank or small variations of the\ncode depending on the kind.\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "bash Fortran pre-processor",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "zpp",
            "package_url": "https://pypi.org/project/zpp/",
            "platform": "",
            "project_url": "https://pypi.org/project/zpp/",
            "project_urls": {
               "Source Code": "https://github.com/pdidev/zpp/"
            },
            "release_url": "https://pypi.org/project/zpp/1.0.4/",
            "requires_dist": [
               "setuptools"
            ],
            "requires_python": "",
            "summary": "a Bash Pre-Processor for Fortran. ZPP is useful in order to build clean Fortran90 interfaces. It allows to generate Fortran code for all types, kinds, and array ranks supported by the compiler.",
            "version": "1.0.4",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Dheepak Krishnamurthy",
            "author_email": "kdheepak89@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# zip [![](https://travis-ci.org/kdheepak/zip.svg?branch=master)](https://travis-ci.org/kdheepak/zip/branches)\n\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/kdheepak/zip",
            "keywords": "",
            "license": "Revised BSD License",
            "maintainer": "",
            "maintainer_email": "",
            "name": "zip",
            "package_url": "https://pypi.org/project/zip/",
            "platform": "",
            "project_url": "https://pypi.org/project/zip/",
            "project_urls": {
               "Homepage": "https://github.com/kdheepak/zip"
            },
            "release_url": "https://pypi.org/project/zip/0.0.2/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Intel Corporation",
            "author_email": "scripting@intel.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "Intended Audience :: Education",
               "Intended Audience :: Other Audience",
               "Intended Audience :: Science/Research",
               "Intended Audience :: System Administrators",
               "License :: Other/Proprietary License",
               "Operating System :: MacOS",
               "Operating System :: Microsoft :: Windows",
               "Operating System :: POSIX",
               "Operating System :: Unix",
               "Topic :: Software Development :: Libraries"
            ],
            "description": "Intel(R) Performance Primitives provides developers with high-quality, production-ready, low-level building blocks for image processing, signal processing, and data processing (data compression and decompression, and cryptography) applications.\n\nOne of many Intel(R) accelerated Python packages and performance library runtimes available on [PyPI](https://software.intel.com/en-us/articles/installing-the-intel-distribution-for-python-and-intel-performance-libraries-with-pip-and), and as part of [Intel(R) Distribution for Python](https://software.intel.com/en-us/distribution-for-python).\n\nFor latest release updates and security notifications, please [subscribe](https://software.intel.com/en-us/forums/intel-distribution-for-python) to the Intel(R) Distribution for Python Community forum.\n\nFree to use and redistribute pursuant to the [Intel Simplified Software License](https://software.intel.com/en-us/license/intel-simplified-software-license).\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://software.intel.com/en-us/articles/empowering-science-with-high-performance-python",
            "keywords": "",
            "license": "Proprietary - Intel",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ipp",
            "package_url": "https://pypi.org/project/ipp/",
            "platform": "",
            "project_url": "https://pypi.org/project/ipp/",
            "project_urls": {
               "Homepage": "https://software.intel.com/en-us/articles/empowering-science-with-high-performance-python"
            },
            "release_url": "https://pypi.org/project/ipp/2019.4.243/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Intel(R) Performance Primitives",
            "version": "2019.4.243",
            "yanked": false,
            "yanked_reason": null
         }
      ],
      "pip": [
         {
            "author": "Gabriel Alves",
            "author_email": "gabriel.alves@pickcells.bio",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# sx\n#### Framework to manage gRPC-based microservices application",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "https://github.com/itsmealves/sx/releases/download/0.6.0/sx-0.6.0.tar.gz",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/itsmealves/sx",
            "keywords": "sx microservices rpc grpc Framework",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "sx",
            "package_url": "https://pypi.org/project/sx/",
            "platform": "",
            "project_url": "https://pypi.org/project/sx/",
            "project_urls": {
               "Download": "https://github.com/itsmealves/sx/releases/download/0.6.0/sx-0.6.0.tar.gz",
               "Homepage": "https://github.com/itsmealves/sx"
            },
            "release_url": "https://pypi.org/project/sx/0.6.0/",
            "requires_dist": null,
            "requires_python": ">=3.5",
            "summary": "Framework to manage gRPC-based microservices application",
            "version": "0.6.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "chrysn",
            "author_email": "chrysn@fsfe.org",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 3 - Alpha",
               "Intended Audience :: Education",
               "Intended Audience :: Science/Research",
               "License :: OSI Approved :: GNU General Public License (GPL)"
            ],
            "description": "UNKNOWN",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "UNKNOWN",
            "keywords": null,
            "license": "GPL",
            "maintainer": null,
            "maintainer_email": null,
            "name": "si",
            "package_url": "https://pypi.org/project/si/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/si/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "UNKNOWN"
            },
            "release_url": "https://pypi.org/project/si/0.1.1-1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Module to represent SI units",
            "version": "0.1.1-1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "leesoar",
            "author_email": "secure@tom.com",
            "bugtrack_url": null,
            "classifiers": [
               "License :: OSI Approved :: MIT License",
               "Programming Language :: Python :: 3.5",
               "Programming Language :: Python :: 3.6",
               "Programming Language :: Python :: 3.7",
               "Programming Language :: Python :: Implementation :: CPython",
               "Programming Language :: Python :: Implementation :: PyPy"
            ],
            "description": "\nDevelop soon\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://leesoar.com",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ida",
            "package_url": "https://pypi.org/project/ida/",
            "platform": "",
            "project_url": "https://pypi.org/project/ida/",
            "project_urls": {
               "Homepage": "https://leesoar.com"
            },
            "release_url": "https://pypi.org/project/ida/0.0.1/",
            "requires_dist": null,
            "requires_python": ">=3.3.0",
            "summary": "Develop soon",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Xavier Bruhiere",
            "author_email": "xavier.bruhiere@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 2 - Pre-Alpha",
               "Intended Audience :: Science/Research",
               "License :: OSI Approved :: Apache Software License",
               "Natural Language :: English",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2.7",
               "Topic :: Software Development",
               "Topic :: System :: Shells"
            ],
            "description": "python library DNA\n==================\n\n[![Coverage Status](https://coveralls.io/repos/hivetech/dna/badge.png)](https://coveralls.io/r/hivetech/dna)\n\n> Generic python utilities\n\nInstallation\n------------\n\n```console\npip install dna\n```\n\nExample\n-----\n\n```python\nimport dna.utils as utils\nimport dna.logger as logger\n\nlog_setup = logger.setup(level='info', filename='app.log')\nlog = logger.logger(__name__)\nwith log_setup.applicationbound():\n\n    log.info('hello', where='world')\n\n    useless_id = utils.generate_unique_id()\n    useless_name = utils.generate_random_name()\n\n    if utils.docker_check() and utils.is_running('ipyhon'):\n\n        print utils.Version('0.4.1')\n\n        module = utils.dynamic_import('dna.settings', 'LOG')\n        print utils.emphasis(module, align=False)\n\n        print utils.self_ip()\n```",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/hivetech/dna",
            "keywords": null,
            "license": "Apache 2.0",
            "maintainer": null,
            "maintainer_email": null,
            "name": "dna",
            "package_url": "https://pypi.org/project/dna/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/dna/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/hivetech/dna"
            },
            "release_url": "https://pypi.org/project/dna/0.0.7/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Generic python utilities",
            "version": "0.0.7",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Christopher Brown",
            "author_email": "io@henrian.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 2 - Pre-Alpha",
               "License :: OSI Approved :: MIT License",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.6",
               "Programming Language :: Python :: 2.7",
               "Topic :: Software Development :: Libraries :: Python Modules",
               "Topic :: System :: Archiving :: Packaging",
               "Topic :: System :: Filesystems"
            ],
            "description": "Python (package) installation\n-----------------------------\n\nGetting started from `PyPI <https://pypi.python.org/pypi/pi/>`__:\n\n::\n\n    easy_install pi\n\n`Whence easy\\_install? <#setuptools>`__\n\nCommands\n--------\n\n-  Uninstall package named \"pip\":\n\n   ::\n\n       pi uninstall pip\n\n-  Install package named \"filesequence\":\n\n   ::\n\n       pi install filesequence\n\n-  List paths that Python searches for imported modules:\n\n   ::\n\n       pi paths\n\n-  List installed packages:\n\n   ::\n\n       pi list\n\nTesting\n-------\n\nContinuous integration:\n\n|Travis CI Build Status|\n\nOr run tests locally:\n\n::\n\n    nosetests --with-doctest\n\nRelated\n~~~~~~~\n\n-  http://guide.python-distribute.org/creation.html\n-  `distribute/pkg\\_resources\n   docs <http://pythonhosted.org/distribute/pkg_resources.html>`__\n-  standard library\n   ```site`` <http://docs.python.org/2/library/site.html>`__\n-  standard library `environment\n   variables <http://docs.python.org/2/using/cmdline.html#environment-variables>`__\n\nSetuptools\n~~~~~~~~~~\n\n``pi`` does not yet completely replace\n`setuptools <https://pypi.python.org/pypi/setuptools>`__. You may need\nto install it first:\n\n+----------+-----------------------------------------+\n| Distro   | Package manager command                 |\n+==========+=========================================+\n| Ubuntu   | ``apt-get install python-setuptools``   |\n+----------+-----------------------------------------+\n| Mac      | built-in                                |\n+----------+-----------------------------------------+\n| Arch     | ``pacman -S python-setuptools``         |\n+----------+-----------------------------------------+\n| CentOS   | ``yum install python-setuptools``       |\n+----------+-----------------------------------------+\n\nLicense\n-------\n\nCopyright (c) 2013 Christopher Brown. `MIT\nLicensed <https://raw.github.com/chbrown/pi/master/LICENSE>`__.\n\n.. |Travis CI Build Status| image:: https://travis-ci.org/chbrown/pi.png?branch=master\n   :target: https://travis-ci.org/chbrown/pi",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/chbrown/pi",
            "keywords": null,
            "license": "Copyright (c) 2013 Christopher Brown\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.",
            "maintainer": null,
            "maintainer_email": null,
            "name": "pi",
            "package_url": "https://pypi.org/project/pi/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/pi/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/chbrown/pi"
            },
            "release_url": "https://pypi.org/project/pi/0.1.2/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Simpler python package installation",
            "version": "0.1.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ip",
            "package_url": "https://pypi.org/project/ip/",
            "platform": "",
            "project_url": "https://pypi.org/project/ip/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/ip/0.0.1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Vitalii Vanovschi",
            "author_email": "support@parallelpython.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Natural Language :: English",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Topic :: Software Development",
               "Topic :: System :: Distributed Computing"
            ],
            "description": "Parallel Python module (PP) provides an easy and efficient way to create parallel-enabled applications for SMP computers and clusters. PP module features cross-platform portability and dynamic load balancing. Thus application written with PP will parallelize efficiently even on heterogeneous and multi-platform clusters (including clusters running other application with variable CPU loads). Visit http://www.parallelpython.com for further information.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "http://www.parallelpython.com/downloads/pp/pp-1.6.5.zip",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "http://www.parallelpython.com",
            "keywords": null,
            "license": "BSD-like",
            "maintainer": null,
            "maintainer_email": null,
            "name": "pp",
            "package_url": "https://pypi.org/project/pp/",
            "platform": "Windows,Linux,Unix",
            "project_url": "https://pypi.org/project/pp/",
            "project_urls": {
               "Download": "http://www.parallelpython.com/downloads/pp/pp-1.6.5.zip",
               "Homepage": "http://www.parallelpython.com"
            },
            "release_url": "https://pypi.org/project/pp/1.6.5/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Parallel and distributed programming for Python",
            "version": "1.6.5",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Marcus Donnelly",
            "author_email": "marcus.k.donnelly@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "Intended Audience :: Science/Research",
               "License :: OSI Approved :: BSD License",
               "Programming Language :: Python :: 3",
               "Topic :: Scientific/Engineering"
            ],
            "description": "",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "Oceanography,Utilities",
            "license": "BSD",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ocutils",
            "package_url": "https://pypi.org/project/ocutils/",
            "platform": "",
            "project_url": "https://pypi.org/project/ocutils/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/ocutils/1.1.1/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Utility functions for oceanography related work",
            "version": "1.1.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Kiana Alessandra V. Villaera",
            "author_email": "kiana.villaera@senti.com.ph",
            "bugtrack_url": null,
            "classifiers": [
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 3"
            ],
            "description": "Contains everything you might need to perform essential data center functions\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/K-Winkles/dcutils",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dcutils",
            "package_url": "https://pypi.org/project/dcutils/",
            "platform": "",
            "project_url": "https://pypi.org/project/dcutils/",
            "project_urls": {
               "Homepage": "https://github.com/K-Winkles/dcutils"
            },
            "release_url": "https://pypi.org/project/dcutils/0.6/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "A simple package for data center utilities",
            "version": "0.6",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Mike Kazantsev",
            "author_email": "mk.fraggod@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Intended Audience :: Developers",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3.5",
               "Topic :: Software Development",
               "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description": "pretty-yaml (or pyaml)\n======================\n\nPyYAML-based python module to produce pretty and readable YAML-serialized data.\n\nThis module is for serialization only, see `ruamel.yaml`_ module for literate\nYAML parsing (keeping track of comments, spacing, line/column numbers of values, etc).\n\n[note: to dump stuff parsed by ruamel.yaml with this module, use only ``YAML(typ='safe')`` there]\n\n.. contents::\n  :backlinks: none\n\n\nWarning\n-------\n\nPrime goal of this module is to produce human-readable output that can be easily\nmanipulated and re-used, but maybe with some occasional caveats.\n\nOne good example of such \"caveat\" is that e.g. ``{'foo': '123'}`` will serialize\nto ``foo: 123``, which for PyYAML would be a bug, as 123 will then be read back\nas an integer from that, but here it's a feature.\n\nSo please do not rely on the thing to produce output that can always be\ndeserialized exactly to what was exported, at least - use PyYAML (e.g. with\noptions from the next section) for that.\n\n\nWhat this module does and why\n-----------------------------\n\nYAML is generally nice and easy format to read *if* it was written by humans.\n\nPyYAML can a do fairly decent job of making stuff readable, and the best\ncombination of parameters for such output that I've seen so far is probably this one::\n\n  >>> m = [123, 45.67, {1: None, 2: False}, u'some text']\n  >>> data = dict(a=u'asldnsa\\nasldpáknsa\\n', b=u'whatever text', ma=m, mb=m)\n  >>> yaml.safe_dump(data, sys.stdout, allow_unicode=True, default_flow_style=False)\n  a: 'asldnsa\n\n    asldpáknsa\n\n    '\n  b: whatever text\n  ma: &id001\n  - 123\n  - 45.67\n  - 1: null\n    2: false\n  - some text\n  mb: *id001\n\npyaml tries to improve on that a bit, with the following tweaks:\n\n* Most human-friendly representation options in PyYAML (that I know of) get\n  picked as defaults.\n\n* Does not dump \"null\" values, if possible, replacing these with just empty\n  strings, which have the same meaning but reduce visual clutter and are easier\n  to edit.\n\n* Dicts, sets, OrderedDicts, defaultdicts, namedtuples, etc are representable\n  and get sorted on output (OrderedDicts and namedtuples keep their ordering),\n  so that output would be as diff-friendly as possible, and not arbitrarily\n  depend on python internals.\n\n  It appears that at least recent PyYAML versions also do such sorting for\n  python dicts.\n\n* List items get indented, as they should be.\n\n* bytestrings that can't be auto-converted to unicode raise error, as yaml has\n  no \"binary bytes\" (i.e. unix strings) type.\n\n* Attempt is made to pick more readable string representation styles, depending\n  on the value, e.g.::\n\n    >>> yaml.safe_dump(cert, sys.stdout)\n    cert: '-----BEGIN CERTIFICATE-----\n\n      MIIH3jCCBcagAwIBAgIJAJi7AjQ4Z87OMA0GCSqGSIb3DQEBCwUAMIHBMRcwFQYD\n\n      VQQKFA52YWxlcm9uLm5vX2lzcDEeMBwGA1UECxMVQ2VydGlmaWNhdGUgQXV0aG9y\n    ...\n\n    >>> pyaml.p(cert):\n    cert: |\n      -----BEGIN CERTIFICATE-----\n      MIIH3jCCBcagAwIBAgIJAJi7AjQ4Z87OMA0GCSqGSIb3DQEBCwUAMIHBMRcwFQYD\n      VQQKFA52YWxlcm9uLm5vX2lzcDEeMBwGA1UECxMVQ2VydGlmaWNhdGUgQXV0aG9y\n    ...\n\n* \"force_embed\" option to avoid having &id stuff scattered all over the output\n  (which might be beneficial in some cases, hence the option).\n\n* \"&id\" anchors, if used, get labels from the keys they get attached to,\n  not just use meaningless enumerators.\n\n* \"string_val_style\" option to only apply to strings that are values, not keys,\n  i.e::\n\n    >>> pyaml.p(data, string_val_style='\"')\n    key: \"value\\nasldpáknsa\\n\"\n    >>> yaml.safe_dump(data, sys.stdout, allow_unicode=True, default_style='\"')\n    \"key\": \"value\\nasldpáknsa\\n\"\n\n* \"sort_dicts=False\" option to leave dict item ordering to python, and not\n  force-sort them in yaml output, which can be important for python 3.6+ where\n  they retain ordering info.\n\n* Has an option to add vertical spacing (empty lines) between keys on different\n  depths, to make output much more seekable.\n\nResult for the (rather meaningless) example above (without any additional\ntweaks)::\n\n  >>> pyaml.p(data)\n  a: |\n    asldnsa\n    asldpáknsa\n  b: 'whatever text'\n  ma: &ma\n    - 123\n    - 45.67\n    - 1:\n      2: false\n    - 'some text'\n  mb: *ma\n\n----------\n\nExtended example::\n\n  >>> pyaml.dump(conf, sys.stdout, vspacing=[2, 1]):\n  destination:\n\n    encoding:\n      xz:\n        enabled: true\n        min_size: 5120\n        options:\n        path_filter:\n          - \\.(gz|bz2|t[gb]z2?|xz|lzma|7z|zip|rar)$\n          - \\.(rpm|deb|iso)$\n          - \\.(jpe?g|gif|png|mov|avi|ogg|mkv|webm|mp[34g]|flv|flac|ape|pdf|djvu)$\n          - \\.(sqlite3?|fossil|fsl)$\n          - \\.git/objects/[0-9a-f]+/[0-9a-f]+$\n\n    result:\n      append_to_file:\n      append_to_lafs_dir:\n      print_to_stdout: true\n\n    url: http://localhost:3456/uri\n\n\n  filter:\n    - /(CVS|RCS|SCCS|_darcs|\\{arch\\})/$\n    - /\\.(git|hg|bzr|svn|cvs)(/|ignore|attributes|tags)?$\n    - /=(RELEASE-ID|meta-update|update)$\n\n\n  http:\n\n    ca_certs_files: /etc/ssl/certs/ca-certificates.crt\n\n    debug_requests: false\n\n    request_pool_options:\n      cachedConnectionTimeout: 600\n      maxPersistentPerHost: 10\n      retryAutomatically: true\n\n\n  logging:\n\n    formatters:\n      basic:\n        datefmt: '%Y-%m-%d %H:%M:%S'\n        format: '%(asctime)s :: %(name)s :: %(levelname)s: %(message)s'\n\n    handlers:\n      console:\n        class: logging.StreamHandler\n        formatter: basic\n        level: custom\n        stream: ext://sys.stderr\n\n    loggers:\n      twisted:\n        handlers:\n          - console\n        level: 0\n\n    root:\n      handlers:\n        - console\n      level: custom\n\nNote that unless there are many moderately wide and deep trees of data, which\nare expected to be read and edited by people, it might be preferrable to\ndirectly use PyYAML regardless, as it won't introduce another (rather pointless\nin that case) dependency and a point of failure.\n\n\nSome Tricks\n-----------\n\n* Pretty-print any yaml or json (yaml subset) file from the shell::\n\n    % python -m pyaml /path/to/some/file.yaml\n    % curl -s https://www.githubstatus.com/api/v2/summary.json | python -m pyaml\n\n* Process and replace json/yaml file in-place::\n\n    % python -m pyaml -r file-with-json.data\n\n* Easier \"debug printf\" for more complex data (all funcs below are aliases to\n  same thing)::\n\n    pyaml.p(stuff)\n    pyaml.pprint(my_data)\n    pyaml.pprint('----- HOW DOES THAT BREAKS!?!?', input_data, some_var, more_stuff)\n    pyaml.print(data, file=sys.stderr) # needs \"from __future__ import print_function\"\n\n* Force all string values to a certain style (see info on these in\n  `PyYAML docs`_)::\n\n    pyaml.dump(many_weird_strings, string_val_style='|')\n    pyaml.dump(multiline_words, string_val_style='>')\n    pyaml.dump(no_want_quotes, string_val_style='plain')\n\n  Using ``pyaml.add_representer()`` (note \\*p\\*yaml) as suggested in\n  `this SO thread`_ (or `github-issue-7`_) should also work.\n\n* Control indent and width of the results::\n\n    pyaml.dump(wide_and_deep, indent=4, width=120)\n\n  These are actually keywords for PyYAML Emitter (passed to it from Dumper),\n  see more info on these in `PyYAML docs`_.\n\n* Dump multiple yaml documents into a file: ``pyaml.dump_all([data1, data2, data3], dst_file)``\n\n  explicit_start=True is implied, unless explicit_start=False is passed.\n\n.. _PyYAML docs: http://pyyaml.org/wiki/PyYAMLDocumentation#Scalars\n.. _this SO thread: http://stackoverflow.com/a/7445560\n.. _github-issue-7: https://github.com/mk-fg/pretty-yaml/issues/7\n\n\nInstallation\n------------\n\nIt's a regular package for Python (3.x or 2.x).\n\nModule uses PyYAML_ for processing of the actual YAML files and should pull it\nin as a dependency.\n\nDependency on unidecode_ module is optional and should only be necessary if\nsame-id objects or recursion is used within serialized data.\n\nBe sure to use python3/python2, pip3/pip2, easy_install-... binaries below,\nbased on which python version you want to install the module for, if you have\nseveral on the system (as is norm these days for py2-py3 transition).\n\nUsing pip_ is the best way::\n\n  % pip install pyaml\n\n(add --user option to install into $HOME for current user only)\n\nOr, if you don't have \"pip\" command::\n\n  % python -m ensurepip\n  % python -m pip install --upgrade pip\n  % python -m pip install pyaml\n\n(same suggestion wrt \"install --user\" as above)\n\nOn a very old systems, one of these might work::\n\n  % curl https://bootstrap.pypa.io/get-pip.py | python\n  % pip install pyaml\n\n  % easy_install pyaml\n\n  % git clone --depth=1 https://github.com/mk-fg/pretty-yaml\n  % cd pretty-yaml\n  % python setup.py install\n\n(all of install-commands here also have --user option,\nsee also `pip docs \"installing\" section`_)\n\nCurrent-git version can be installed like this::\n\n  % pip install 'git+https://github.com/mk-fg/pretty-yaml#egg=pyaml'\n\nNote that to install stuff to system-wide PATH and site-packages (without\n--user), elevated privileges (i.e. root and su/sudo) are often required.\n\nUse \"...install --user\", `~/.pydistutils.cfg`_ or virtualenv_ to do unprivileged\ninstalls into custom paths.\n\nMore info on python packaging can be found at `packaging.python.org`_.\n\n.. _ruamel.yaml: https://bitbucket.org/ruamel/yaml/\n.. _PyYAML: http://pyyaml.org/\n.. _unidecode: http://pypi.python.org/pypi/Unidecode\n.. _pip: http://pip-installer.org/\n.. _pip docs \"installing\" section: http://www.pip-installer.org/en/latest/installing.html\n.. _~/.pydistutils.cfg: http://docs.python.org/install/index.html#distutils-configuration-files\n.. _virtualenv: http://pypi.python.org/pypi/virtualenv\n.. _packaging.python.org: https://packaging.python.org/installing/\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/mk-fg/pretty-yaml",
            "keywords": "yaml serialization pretty print format human readable readability",
            "license": "WTFPL",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyaml",
            "package_url": "https://pypi.org/project/pyaml/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyaml/",
            "project_urls": {
               "Homepage": "https://github.com/mk-fg/pretty-yaml"
            },
            "release_url": "https://pypi.org/project/pyaml/20.4.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "PyYAML-based module to produce pretty and readable YAML-serialized data",
            "version": "20.4.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "haogege",
            "author_email": "1394168335@qq.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# pyyml\nUse python in yaml\n## 基本使用\n在python中使用：\n```python\nfrom pyyml import load\n\nwith open('conf.yml') as f:\n    raw_conf = f.read()\nconfig = load(raw_conf)\nprint(config)\n```\n在yaml中 `${...}` 中的内容将会被python执行：\n\nyaml内容\n```yaml\nsum: ${1 + 1}\n```\n实际解析内容\n```python\n{'sum': 2}\n```\n通过在文件开头第一行注释来导入所需的包：\n\n```yaml\n# libs:['os', 'os.path:path', 'this']\n```\n通过 [包名]:[别名] 取别名导入包\n\n`'os.path:path' 等同于 python 中的 from os import path`\n\n例如yaml文件内容\n```yaml\n# libs:['os', 'os.path:path', 'this']\nos_name: ${os.name}\nbase_dir: ${path.abspath(path.dirname(__file__))}\n```\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/q1394168335/pyyml",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyyml",
            "package_url": "https://pypi.org/project/pyyml/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyyml/",
            "project_urls": {
               "Homepage": "https://github.com/q1394168335/pyyml"
            },
            "release_url": "https://pypi.org/project/pyyml/0.0.2/",
            "requires_dist": [
               "pyyaml (>=3.13)"
            ],
            "requires_python": "",
            "summary": "Use python in yaml",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Michael Foord",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "rs",
            "package_url": "https://pypi.org/project/rs/",
            "platform": "",
            "project_url": "https://pypi.org/project/rs/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/rs/0.0/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "",
            "version": "0.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Ramses",
            "author_email": "hello@ramses.tech",
            "bugtrack_url": null,
            "classifiers": [
               "Framework :: Pyramid",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.4",
               "Programming Language :: Python :: 3.5",
               "Topic :: Internet :: WWW/HTTP",
               "Topic :: Internet :: WWW/HTTP :: WSGI :: Application"
            ],
            "description": "# `Ra`\n[![Build Status](https://travis-ci.org/ramses-tech/ra.svg?branch=master)](https://travis-ci.org/ramses-tech/ra)\n[![Documentation](https://readthedocs.org/projects/ra/badge/?version=stable)](http://ra.readthedocs.org)\n\nRa is a test suite generator and helper library for testing APIs described\nin [RAML](http://raml.org/).\n\nOut of the box, Ra provides a basic, automated test suite to test the routes\ndeclared in the RAML document. It provides test helpers for augmenting these\nwith custom tests to test application-specific logic, side effects, etc.\n\nRa is primarily designed to provide testing support for\n[ramses](http://github.com/ramses-tech/ramses) and\n[nefertari](http://github.com/ramses-tech/nefertari) applications, but can\nbe used with any WSGI-conformant, RAML-described API.\n\nIt currently depends on pytest but may be adapted for other test frameworks\nin the future. It works best using WebTest but doesn't require it.\n\n## Name\n\nRa was the god of the sun, the most important god in ancient Egypt.\n\n\n## Try it (dev)\n\nRun the test suite:\n\n```bash\n    $ pip install -r requirements.txt\n    $ py.test\n```\n\nCheck out the example:\n\n```bash\n    $ cd examples/ramses-test\n    $ pip install -r requirements.txt\n    $ py.test\n```\n\nThe example RAML at `examples/ramses-test/api.raml` and the test file\n`examples/ramses-test/tests/test_api.py` should be helpful to reference.\n\nSee the docs in `docs/`, and the `api.raml` and `tests/test_api.py` in\n`tests/apps/ramses_test`",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/ramses-tech/ra",
            "keywords": "web raml",
            "license": "UNKNOWN",
            "maintainer": null,
            "maintainer_email": null,
            "name": "ra",
            "package_url": "https://pypi.org/project/ra/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/ra/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/ramses-tech/ra"
            },
            "release_url": "https://pypi.org/project/ra/0.2.0/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Test RAML API definition",
            "version": "0.2.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Shoumik Palkar",
            "author_email": "shoumik@cs.stanford.edu",
            "bugtrack_url": null,
            "classifiers": [
               "License :: OSI Approved :: BSD License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 3"
            ],
            "description": "## split annotations\n\nThis package contains the Python implementation of [split annotations](), a system for optimizing applications\nthat combine many data-intensive library functions. See some useful links below.\n\n* [Documentation for this package](https://www.weld.rs/split-annotations/docs/)\n* [GitHub repository](https://www.github.com/weld-project/split-annotations)\n* [SOSP 2019 Paper describing the system](https://shoumik.xyz/static/papers/mozart-sosp19final.pdf)\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://www.github.com/weld-project/split-annotations",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "sa",
            "package_url": "https://pypi.org/project/sa/",
            "platform": "",
            "project_url": "https://pypi.org/project/sa/",
            "project_urls": {
               "Homepage": "https://www.github.com/weld-project/split-annotations"
            },
            "release_url": "https://pypi.org/project/sa/0.0.4/",
            "requires_dist": [
               "numpy",
               "pandas",
               "scipy",
               "sharedmem"
            ],
            "requires_python": ">=3.6",
            "summary": "Python split annotations package",
            "version": "0.0.4",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Mitch Garnaat",
            "author_email": "mitch@garnaat.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.6",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.3",
               "Programming Language :: Python :: 3.4",
               "Topic :: Internet"
            ],
            "description": "####\nboto\n####\nboto 2.49.0\n\nReleased: 11-July-2018\n\n.. image:: https://travis-ci.org/boto/boto.svg?branch=develop\n        :target: https://travis-ci.org/boto/boto\n\n.. image:: https://pypip.in/d/boto/badge.svg\n        :target: https://pypi.python.org/pypi/boto/\n\n******\nBoto 3\n******\n\n`Boto3 <https://github.com/boto/boto3>`__, the next version of Boto, is now\nstable and recommended for general use.  It can be used side-by-side with Boto\nin the same project, so it is easy to start using Boto3 in your existing\nprojects as well as new projects. Going forward, API updates and all new\nfeature work will be focused on Boto3.\n\nTo assist users who still depend on Boto and cannot immediately switch over, we\nwill be triaging and addressing critical issues and PRs in Boto in the short\nterm. As more users make the switch to Boto3, we expect to reduce our\nmaintenance involvement over time. If we decide on a cutoff date or any\nsignificant changes to our maintenance plan, we will make pre-announcements\nwell ahead of schedule to allow ample time for our users to adapt/migrate.\n\n\n************\nIntroduction\n************\n\nBoto is a Python package that provides interfaces to Amazon Web Services.\nCurrently, all features work with Python 2.6 and 2.7. Work is under way to\nsupport Python 3.3+ in the same codebase. Modules are being ported one at\na time with the help of the open source community, so please check below\nfor compatibility with Python 3.3+.\n\nTo port a module to Python 3.3+, please view our `Contributing Guidelines`_\nand the `Porting Guide`_. If you would like, you can open an issue to let\nothers know about your work in progress. Tests **must** pass on Python\n2.6, 2.7, 3.3, and 3.4 for pull requests to be accepted.\n\n\n********\nServices\n********\n\nAt the moment, boto supports:\n\n* Compute\n\n  * Amazon Elastic Compute Cloud (EC2) (Python 3)\n  * Amazon Elastic Map Reduce (EMR) (Python 3)\n  * AutoScaling (Python 3)\n  * Amazon Kinesis (Python 3)\n  * AWS Lambda (Python 3)\n  * Amazon EC2 Container Service (Python 3)\n\n* Content Delivery\n\n  * Amazon CloudFront (Python 3)\n\n* Database\n\n  * Amazon Relational Data Service (RDS)\n  * Amazon DynamoDB (Python 3)\n  * Amazon SimpleDB (Python 3)\n  * Amazon ElastiCache (Python 3)\n  * Amazon Redshift (Python 3)\n\n* Deployment and Management\n\n  * AWS Elastic Beanstalk (Python 3)\n  * AWS CloudFormation (Python 3)\n  * AWS Data Pipeline (Python 3)\n  * AWS Opsworks (Python 3)\n  * AWS CloudTrail (Python 3)\n  * AWS CodeDeploy (Python 3)\n\n* Administration & Security\n\n  * AWS Identity and Access Management (IAM) (Python 3)\n  * AWS Key Management Service (KMS) (Python 3)\n  * AWS Config (Python 3)\n  * AWS CloudHSM (Python 3)\n\n* Application Services\n\n  * Amazon CloudSearch (Python 3)\n  * Amazon CloudSearch Domain (Python 3)\n  * Amazon Elastic Transcoder (Python 3)\n  * Amazon Simple Workflow Service (SWF) (Python 3)\n  * Amazon Simple Queue Service (SQS) (Python 3)\n  * Amazon Simple Notification Server (SNS) (Python 3)\n  * Amazon Simple Email Service (SES) (Python 3)\n  * Amazon Cognito Identity (Python 3)\n  * Amazon Cognito Sync (Python 3)\n  * Amazon Machine Learning (Python 3)\n\n* Monitoring\n\n  * Amazon CloudWatch (EC2 Only) (Python 3)\n  * Amazon CloudWatch Logs (Python 3)\n\n* Networking\n\n  * Amazon Route53 (Python 3)\n  * Amazon Route 53 Domains (Python 3)\n  * Amazon Virtual Private Cloud (VPC) (Python 3)\n  * Elastic Load Balancing (ELB) (Python 3)\n  * AWS Direct Connect (Python 3)\n\n* Payments and Billing\n\n  * Amazon Flexible Payment Service (FPS)\n\n* Storage\n\n  * Amazon Simple Storage Service (S3) (Python 3)\n  * Amazon Glacier (Python 3)\n  * Amazon Elastic Block Store (EBS)\n  * Google Cloud Storage\n\n* Workforce\n\n  * Amazon Mechanical Turk\n\n* Other\n\n  * Marketplace Web Services (Python 3)\n  * AWS Support (Python 3)\n\nThe goal of boto is to support the full breadth and depth of Amazon\nWeb Services.  In addition, boto provides support for other public\nservices such as Google Storage in addition to private cloud systems\nlike Eucalyptus, OpenStack and Open Nebula.\n\nBoto is developed mainly using Python 2.6.6 and Python 2.7.3 on Mac OSX\nand Ubuntu Maverick.  It is known to work on other Linux distributions\nand on Windows.  Most of Boto requires no additional libraries or packages\nother than those that are distributed with Python.  Efforts are made\nto keep boto compatible with Python 2.5.x but no guarantees are made.\n\n************\nInstallation\n************\n\nInstall via `pip`_:\n\n::\n\n    $ pip install boto\n\nInstall from source:\n\n::\n\n    $ git clone git://github.com/boto/boto.git\n    $ cd boto\n    $ python setup.py install\n\n**********\nChangeLogs\n**********\n\nTo see what has changed over time in boto, you can check out the\nrelease notes at `http://docs.pythonboto.org/en/latest/#release-notes`\n\n***************************\nFinding Out More About Boto\n***************************\n\nThe main source code repository for boto can be found on `github.com`_.\nThe boto project uses the `gitflow`_ model for branching.\n\n`Online documentation`_ is also available. The online documentation includes\nfull API documentation as well as Getting Started Guides for many of the boto\nmodules.\n\nBoto releases can be found on the `Python Cheese Shop`_.\n\nJoin our IRC channel `#boto` on FreeNode.\nWebchat IRC channel: http://webchat.freenode.net/?channels=boto\n\nJoin the `boto-users Google Group`_.\n\n*************************\nGetting Started with Boto\n*************************\n\nYour credentials can be passed into the methods that create\nconnections.  Alternatively, boto will check for the existence of the\nfollowing environment variables to ascertain your credentials:\n\n**AWS_ACCESS_KEY_ID** - Your AWS Access Key ID\n\n**AWS_SECRET_ACCESS_KEY** - Your AWS Secret Access Key\n\nCredentials and other boto-related settings can also be stored in a\nboto config file.  See `this`_ for details.\n\n.. _Contributing Guidelines: https://github.com/boto/boto/blob/develop/CONTRIBUTING\n.. _Porting Guide: http://boto.readthedocs.org/en/latest/porting_guide.html\n.. _pip: http://www.pip-installer.org/\n.. _release notes: https://github.com/boto/boto/wiki\n.. _github.com: http://github.com/boto/boto\n.. _Online documentation: http://docs.pythonboto.org\n.. _Python Cheese Shop: http://pypi.python.org/pypi/boto\n.. _this: http://docs.pythonboto.org/en/latest/boto_config_tut.html\n.. _gitflow: http://nvie.com/posts/a-successful-git-branching-model/\n.. _neo: https://github.com/boto/boto/tree/neo\n.. _boto-users Google Group: https://groups.google.com/forum/?fromgroups#!forum/boto-users\n\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/boto/boto/",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "boto",
            "package_url": "https://pypi.org/project/boto/",
            "platform": "Posix; MacOS X; Windows",
            "project_url": "https://pypi.org/project/boto/",
            "project_urls": {
               "Homepage": "https://github.com/boto/boto/"
            },
            "release_url": "https://pypi.org/project/boto/2.49.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Amazon Web Services Library",
            "version": "2.49.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Hadi Asghari",
            "author_email": "hd.asghari@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 3",
               "Topic :: Software Development :: Libraries :: Python Modules",
               "Topic :: System :: Networking"
            ],
            "description": "pyasn\n=====\n\n.. image:: https://pypip.in/v/pyasn/badge.png\n   :target: https://pypi.python.org/pypi/pyasn\n\n.. image:: https://pypip.in/d/pyasn/badge.png\n   :target: https://pypi.python.org/pypi/pyasn\n\n\n**pyasn** is a Python extension module that enables very fast IP address to Autonomous System Number lookups.\nCurrent state and Historical lookups can be done, based on the MRT/RIB BGP archive used as input.\n\n*pyasn* is different from other ASN lookup tools in that it provides **offline** and **historical** lookups.\nIt provides utility scripts for users to build their own lookup databases based on any MRT/RIB archive.\nThis makes *pyasn* much faster than online dig/whois/json lookups.\n\nThe module is written in C and Python, and cross-compiles on Linux and Windows. Underneath, it uses a radix tree\ndata structure for storage of IP addresses. In the current version, it borrows code from *py-radix* to support\nboth IPV4 and IPV6 network prefixes. The current release is a beta. Compared to the previous version, it provides\nsupport for Python 2 and 3; adds new functionality, performance improvements, and unit-tests.\n\n*pyasn* is developed and maintained by researchers at the Economics of Cybersecurity research group at Delft\nUniversity of Technology (http://econsec.tbm.tudlft.nl). The package is used on an almost daily basis and bugs\nare fixed pretty quickly.  The package is largely developed and maintained by Hadi Asghari and Arman Noroozian.\nPlease report any bugs via GitHub (https://github.com/hadiasghari/pyasn) or email the developers.\n\n\nInstallation\n============\nInstallation is a breeze via pip: ::\n\n    pip install pyasn --pre\n\nOr with the standard Python: ::\n\n    python setup.py build\n    python setup.py install --record log\n\nYou will need to have pip, setuptools and build essentials installed if you build the package manually. On\nUbuntu/Debian you can get them using the following command: ::\n\n    sudo apt-get install python-pip python-dev build-essential\n\nBuilding the C module on Windows, using either pip or from source, requires Microsoft Visual C++ to be installed.\npyasn has been tested using Visual C++ Express 2010, available freely from Microsoft's website, on both the\nofficial Python 3.4 release and Miniconda3. Other versions of Python, Visual Studio, and Cygwin could also work\nwith minor modifications.\n\nWe plan to release *pyasn* packages to major Linux repositories once it is out of beta.\n\n\nUsage\n=====\nA simple example that demonstrates most of the features: ::\n\n    import pyasn\n\n    # Initialize module and load IP to ASN database\n    # the sample database can be downloaded or built - see below\n    asndb = pyasn.pyasn('ipasn_20140513.dat')\n\n    asndb.lookup('8.8.8.8')\n    # should return: (15169, '8.8.8.0/24'), the origin AS, and the BGP prefix it matches\n\n    asndb.get_as_prefixes(1128)\n    # returns ['130.161.0.0/16', '131.180.0.0/16', '145.94.0.0/16'], TU-Delft prefixes\n\n\nIPASN Data Files\n================\nIPASN data files are a long list of prefixes used to lookup AS number for IPs. An excerpt from such a file looks\nlike this: ::\n\n    ; IP-ASN32-DAT file\n    ; Original file : <Path to a rib file>\n    ; Converted on  : Tue May 13 22:03:05 2014\n    ; CIDRs         : 512490\n    ;\n    1.0.0.0/24  15169\n    1.0.128.0/17        9737\n    1.0.128.0/18        9737\n    1.0.128.0/19        9737\n    1.0.129.0/24        23969\n    ...\n\nIPASN data files can be created by downloading MRT/RIB BGP archives from Routeviews (or similar sources),\nand parsing them using provided scripts that tail the BGP AS-Path. This can be done simply as follows: ::\n\n    pyasn_util_download.py --latest\n    pyasn_util_convert.py --single <Downloaded RIB File> <ipasn_db_file_name>\n\n\n**NOTE:** These scripts are by default installed to ``/usr/local/bin`` and can be executed directly. If you installed\nthe package to a user directory, these scripts will not be on the path and you will have to invoke them by navigating\nto the folder in which they have been copied (e.g. ``~/.local/bin``).\n\nWe also provide download links to a large number of previously generated IPASN data files. These are based on\nweekly  snapshots of the Routeviews data from 2005-2015, accessible here:\nhttp://data.3tu.nl/repository/uuid:d4d23b8e-2077-4592-8b47-cb476ad16e12\n\n**New in v1.6:** To save disk space, you can gzip IPASN data files. The load time will be slighlty longer.\n\n\nPerformance Tip\n===============\nInitial loading of a IPASN data file is the most heavy operation of the package. For fast lookups using multiple\nIPASN data files, for instance for historical lookups on multiple dates, we recommend caching of loaded data files\nfor better performance.\n\n\nUninstalling pyasn\n==================\nYou can remove *pyasn* as follows: ::\n\n    pip uninstall pyasn\n\nIf you built and installed the package your self use the recorded log to remove the installed files.\n\n**Removing PyASN version 1.2**: *pyasn* v1.5/1.6 and v1.2 can be installed side by side (due to lower-cased package\nname). To avoid mistakes, you can uninstall the old **PyASN** by deleting the following files from your Python\ninstallation: ::\n\n    PYTHONDIR/dist-packages/PyASN.so\n    PYTHONDIR/dist-packages/PyASN-1.2.egg-info\n\n\nPackage Structure\n=================\nThe main portions of the directory tree are as follows: ::\n\n    .\n    ├── pyasn/__init__.py       # Python code of the main pyasn module\n    ├── pyasn/pyasn_radix.c     # C extension code (Python RADIX module with bulk load)\n    ├── pyasn/_radix/*          # C extension code (Based on original RADIX code from MRTd)\n    ├── pyasn/mrtx.py           # python module used to convert MRT files to pyasn DB files\n    ├── pyasn-utils/*.py        # Scripts to download & convert BGP MRT dumps to IPASN databases\n    ├── data/                   # Test Resources and some sample DBs to use\n    ├── tests/                  # Tests\n    └── setup.py                # Standard setup.py for installation/testing/etc.\n\n\n\nTesting pyasn Sources\n=====================\nA limited number of unit tests are provided in the ``tests/`` directory when downlading the sources. They can be\nrun with the following command: ::\n\n    python setup.py test\n\nThis beta release has been tested under python version 2.6, 2.7, 3.3, 3.4 and 3.5. We appreciate contributions towards\ntesting *pyasn*!\n\n**New in v1.6:** pyasn_util_convert.py offers a '--dump-screen' option which shows the MRT/RIB archive contents and\nthe chosen origin-AS.\n\n\nLicense & Acknowledgments\n=========================\n*pyasn* is licensed under the MIT license.\n\nIt extends code from py-radix (Michael J. Schultz and Damien Miller),  and improves upon it in several ways, for\ninstance in lowering memory usage and adding bulk prefix/origin load. The underlying radix tree implementation is\ntaken (and modified) from MRTd. These are all subject to their respective licenses.  Please see the LICENSE file\nfor details.\n\nThanks to Dr. Chris Lee (of Shadowserver) for proposing the use of radix trees.\n\nA handful of GitHub developers have contributed features and bug fixes to the latest releases.\nMany thanks to all of them.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": null,
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/hadiasghari/pyasn",
            "keywords": "ip asn autonomous system bgp whois prefix radix python routing networking",
            "license": "MIT",
            "maintainer": null,
            "maintainer_email": null,
            "name": "pyasn",
            "package_url": "https://pypi.org/project/pyasn/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/pyasn/",
            "project_urls": {
               "Homepage": "https://github.com/hadiasghari/pyasn"
            },
            "release_url": "https://pypi.org/project/pyasn/1.6.0b1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Offline IP address to Autonomous System Number lookup module.",
            "version": "1.6.0b1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Perdix Software",
            "author_email": "ssmith@perdixsw.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 2 - Pre-Alpha",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.4",
               "Programming Language :: Python :: 3.5",
               "Programming Language :: Python :: 3.6",
               "Topic :: Office/Business :: Financial",
               "Topic :: Scientific/Engineering :: Mathematics"
            ],
            "description": "UNKNOWN",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "https://www.github.com/perdixsw/umpy/tarball/0.1.0",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://www.github.com/perdixsw/umpy",
            "keywords": "units,measure,measurement,conversion,converter",
            "license": "MIT",
            "maintainer": null,
            "maintainer_email": null,
            "name": "umpy",
            "package_url": "https://pypi.org/project/umpy/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/umpy/",
            "project_urls": {
               "Download": "https://www.github.com/perdixsw/umpy/tarball/0.1.0",
               "Homepage": "https://www.github.com/perdixsw/umpy"
            },
            "release_url": "https://pypi.org/project/umpy/0.1.0/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Simple unit of measure conversion for python, optimized for manufacturing contexts.",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Jay Marcyes",
            "author_email": "jay@marcyes.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Environment :: Console",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Topic :: Software Development :: Testing"
            ],
            "description": "Pyt\n===\n\nPyt is a lightweight wrapper around `Python’s unittest\nmodule <https://docs.python.org/3/library/unittest.html>`__ that adds\nsome nice features and enhancements over the stock ``unittest`` module.\n\nQuickstart\n~~~~~~~~~~\n\nPyt overrides unittest’s built-in pathfinding to be smarter and less\nverbose, so you can match tests using prefix matching which makes\nrunning a test like:\n\n::\n\n   $ python -m unittest tests.foo_test.BarTestCase.test_che\n\nas simple as:\n\n::\n\n   $ pyt foo.Bar.che\n\nBut it’s even less verbose if you want it to be, pyt can reach into the\nmodules and classes to do its matching, so you don’t even need to\nspecify the module and class if you don’t want to:\n\n::\n\n   $ pyt che\n\nMore examples\n^^^^^^^^^^^^^\n\nTo run all the ``Happy`` tests:\n\n::\n\n   $ pyt Happy\n\nTo run all the ``newmodule`` tests:\n\n::\n\n   $ pyt newmodule\n\nTo run more than one test:\n\n::\n\n   $ pyt test1 test2 ...\n\nTo run every test ``pyt`` can find:\n\n::\n\n   $ pyt\n\nAnd the way I like to run all tests in the current directory:\n\n::\n\n   $ pyt -vb\n\nWhich can also be written:\n\n::\n\n   $ pyt --verbose --buffer\n\nFlags\n~~~~~\n\nTo see everything pyt can do\n\n::\n\n   $ pyt --help\n\n–warnings\n^^^^^^^^^\n\nThis will convert warnings into errors.\n\n::\n\n   $ pyt --warnings\n\n–rerun\n^^^^^^\n\nIf your last testrun had failing tests this will rerun only the tests\nthat failed.\n\n::\n\n   $pyt --rerun\n\nThings to be aware of\n~~~~~~~~~~~~~~~~~~~~~\n\npyt uses Python’s PEP 8 style conventions\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n``pyt`` uses `Python’s code styling\nconventions <http://www.python.org/dev/peps/pep-0008/>`__ to decide what\nis the module and class, so, given input like this:\n\n::\n\n   $ pyt foo.bar.Baz.che\n\n``pyt`` will consider ``foo.bar`` to be the module, ``Baz`` to be a\nclass (because it starts with a capital letter), and ``che`` to be a\nmethod (since it comes after the class).\n\nLikewise, ``pyt`` uses unittest conventions, so a test module should end\nwith ``_test`` (eg, ``foo.bar_test``) or start with test (eg,\n``test_foo.py``) and a TestCase class should extend\n``unittest.TestCase``, and test methods should start with ``test_`` (eg,\n``test_che``).\n\nVague input can cause pyt to run more tests than you expect\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSo if you have something like this:\n\n::\n\n   project/\n     __init__.py\n     user.py\n     foo/\n       __init__.py\n       user.py\n     tests/\n       __init__.py\n       user_test.py\n       foo/\n         __init__.py\n         user_test.py\n\nAnd you want to run tests for ``foo.user`` and you run:\n\n::\n\n   $ pyt user\n\nit will run both ``tests/user_test`` and ``tests.foo.user_test``, the\nsolution is to just be more verbose when you have to be:\n\n::\n\n   $ pyt foo.user\n\nEnvironment Variables\n^^^^^^^^^^^^^^^^^^^^^\n\nIf you are running the tests within pyt, you might notice there is an\nenvironment variable ``PYT_TEST_COUNT`` that contains the count of how\nmany tests pyt found to run.\n\nInstallation\n------------\n\nUse ``pip``:\n\n::\n\n   $ pip install pyt\n\nYou can also get it directly from the repo:\n\n::\n\n   $ pip install --upgrade git+https://github.com/Jaymon/pyt#egg=pyt\n\nIf you install pyt using Python 3 it can also be invoked using the\n``pyt3`` command:\n\n::\n\n   $ pyt3 --help\n\nLikewise, Python 2 installs a ``pyt2`` command:\n\n::\n\n   $ pyt2 --help\n\nTesting\n-------\n\nTesting in 2.7 on most systems:\n\n::\n\n   $ python -m unittest pyt_test\n\nTesting in 3.5 on MacOS:\n\n::\n\n   $ python3.5 -m unittest pyt_test\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "http://github.com/Jaymon/pyt",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyt",
            "package_url": "https://pypi.org/project/pyt/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyt/",
            "project_urls": {
               "Homepage": "http://github.com/Jaymon/pyt"
            },
            "release_url": "https://pypi.org/project/pyt/1.0.5/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "easily run python unit tests",
            "version": "1.0.5",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Bradley Odell",
            "author_email": "btodell@hotmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Environment :: Console",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
               "Natural Language :: English",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 2.6",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Topic :: Software Development :: Build Tools"
            ],
            "description": "pyz\n===\n\n*Packages all source code and dependencies into a single Python zip application.*\n\nSummary\n-------\n\nDeploying a Python application any larger than a single file is\ncumbersome - this library aims to solve that problem.\n\nPython has been able to run code from within a zip file since version\n2.6. Python 3.5 introduced the `zipapp <https://docs.python.org/3/library/zipapp.html>`__ module\nwhich aims to simplify the process of creating a zip application.\nHowever, **zipapp** isn't a complete solution to the problem - it\ndoesn't handle dependencies and it doesn't include certain extra\nfeatures that this library provides.\n\nThis library allows you to bundle all of your Python code **AND** your\ndependencies into a single Python zip application file.\n\nNote: The dependency bundling feature is not implemented yet, but it is\nin the works!\n\nFeatures\n--------\n\n1. Bundle all Python source code with fine-grained control over included files.\n2. Ability to \"unixify\" the output application by prepending a customizable\n   `shebang <https://en.wikipedia.org/wiki/Shebang_(Unix)>`__.\n3. Python interpreter version check - display a friendly notice instead\n   of a Python exception if the user runs your application using an\n   unsupported Python version.\n\nPlanned\n-------\n\n1. Automatically identify dependencies and package them accordingly.\n",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "https://github.com/BTOdell/pyz/archive/0.4.3.tar.gz",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/BTOdell/pyz",
            "keywords": "pyz zip app zipapp bundle dependencies library",
            "license": "GPLv3",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyz",
            "package_url": "https://pypi.org/project/pyz/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyz/",
            "project_urls": {
               "Download": "https://github.com/BTOdell/pyz/archive/0.4.3.tar.gz",
               "Homepage": "https://github.com/BTOdell/pyz"
            },
            "release_url": "https://pypi.org/project/pyz/0.4.3/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Packages all source code and dependencies into a single Python zip application.",
            "version": "0.4.3",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Val Neekman",
            "author_email": "info@neekware.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 3 - Alpha",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Operating System :: POSIX",
               "Programming Language :: Python",
               "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description": "AWSLI\n====================\n\n**Amazon Web Services Line Interpreter**\n\n**Author:** Val Neekman [ info@neekware.com, @vneekman ]\n\nOverview\n========\n\nA Line Interpreter for Amazon Web Services.\n\nHow to install\n==================\n\n    1. easy_install awsli\n    2. pip install awsli\n    3. git clone http://github.com/un33k/awsli\n        a. cd awsli\n        b. run python setup.py\n    4. wget https://github.com/un33k/awsli/zipball/master\n        a. unzip the downloaded file\n        b. cd into awsli-* directory\n        c. run python setup.py\n\nHow to use\n=================\n\n``Usage``\n\n``Note:``\n\nRunning the tests\n=================\n\nTo run the tests against the current environment:\n\n    python test.py\n\nChangelog\n=========\n\n0.1\n-----\n\n* Initial release\n\n\nLicense\n=======\n\nCopyright (c) 2012, Val Neekman\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without \nmodification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this \nlist of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this \nlist of conditions and the following disclaimer in the documentation and/or \nother materials provided with the distribution.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND \nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED \nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE \nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE \nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL \nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR \nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, \nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE \nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/un33k/awsli",
            "keywords": null,
            "license": "BSD",
            "maintainer": null,
            "maintainer_email": null,
            "name": "awsli",
            "package_url": "https://pypi.org/project/awsli/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/awsli/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/un33k/awsli"
            },
            "release_url": "https://pypi.org/project/awsli/0.0.1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "A Line Interpreter for Amazon Web Services",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Armin Ronacher",
            "author_email": "armin.ronacher@active-4.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Environment :: Web Environment",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
               "Topic :: Software Development :: Libraries :: Python Modules",
               "Topic :: Text Processing :: Markup :: HTML"
            ],
            "description": "jinja\n~~~~~\n\nJinja is a `sandboxed`_ template engine written in pure Python. It\nprovides a `Django`_ like non-XML syntax and compiles templates into\nexecutable python code. It's basically a combination of Django templates\nand python code.\n\nNutshell\n--------\n\nHere a small example of a Jinja template::\n\n    {% extends 'base.html' %}\n    {% block title %}Memberlist{% endblock %}\n    {% block content %}\n      <ul>\n      {% for user in users %}\n        <li><a href=\"{{ user.url|e }}\">{{ user.username|e }}</a></li>\n      {% endfor %}\n      </ul>\n    {% endblock %}\n\nPhilosophy\n----------\n\nApplication logic is for the controller but don't try to make the life\nfor the template designer too hard by giving him too few functionality.\n\nFor more informations visit the new `jinja webpage`_ and `documentation`_.\n\nNote\n----\n\nThis is the Jinja 1.0 release which is completely incompatible with the\nold \"pre 1.0\" branch. The old branch will still receive security updates\nand bugfixes but the 1.0 branch will be the only version that receives\nsupport.\n\nIf you have an application that uses Jinja 0.9 and won't be updated in\nthe near future the best idea is to ship a Jinja 0.9 checkout together\nwith the application.\n\nThe `Jinja tip`_ is installable via `easy_install` with ``easy_install\nJinja==dev``.\n\n.. _sandboxed: http://en.wikipedia.org/wiki/Sandbox_(computer_security)\n.. _Django: http://www.djangoproject.com/\n.. _jinja webpage: http://jinja.pocoo.org/\n.. _documentation: http://jinja.pocoo.org/documentation/index.html\n.. _Jinja tip: http://dev.pocoo.org/hg/jinja-main/archive/tip.tar.gz#egg=Jinja-dev\n\n\n:copyright: 2007 by Armin Ronacher.\n:license: BSD, see LICENSE for more details.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "http://jinja.pocoo.org/",
            "keywords": "python.templating.engines",
            "license": "BSD",
            "maintainer": null,
            "maintainer_email": null,
            "name": "Jinja",
            "package_url": "https://pypi.org/project/Jinja/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/Jinja/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "http://jinja.pocoo.org/"
            },
            "release_url": "https://pypi.org/project/Jinja/1.2/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "A small but fast and easy to use stand-alone template engine written in pure python.",
            "version": "1.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Hsiaoming Yang",
            "author_email": "me@lepture.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Environment :: Console",
               "Environment :: Web Environment",
               "Framework :: Django",
               "Framework :: Flask",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.5",
               "Programming Language :: Python :: 3.6",
               "Programming Language :: Python :: 3.7",
               "Programming Language :: Python :: 3.8",
               "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
               "Topic :: Internet :: WWW/HTTP :: WSGI :: Application",
               "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description": "Authlib\n=======\n\nThe ultimate Python library in building OAuth and OpenID Connect servers.\nJWS, JWK, JWA, JWT are included.\n\nUseful Links\n------------\n\n1. Homepage: https://authlib.org/\n2. Documentation: https://docs.authlib.org/\n3. Purchase Commercial License: https://authlib.org/plans\n4. Blog: https://blog.authlib.org/\n5. More Repositories: https://github.com/authlib\n6. Twitter: https://twitter.com/authlib\n7. Donate: https://www.patreon.com/lepture\n\nSpecifications\n--------------\n\n- RFC5849: The OAuth 1.0 Protocol\n- RFC6749: The OAuth 2.0 Authorization Framework\n- RFC6750: The OAuth 2.0 Authorization Framework: Bearer Token Usage\n- RFC7009: OAuth 2.0 Token Revocation\n- RFC7515: JSON Web Signature\n- RFC7516: JSON Web Encryption\n- RFC7517: JSON Web Key\n- RFC7518: JSON Web Algorithms\n- RFC7519: JSON Web Token\n- RFC7521: Assertion Framework for OAuth 2.0 Client Authentication and Authorization Grants\n- RFC7523: JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants\n- RFC7591: OAuth 2.0 Dynamic Client Registration Protocol\n- RFC7662: OAuth 2.0 Token Introspection\n- RFC8414: OAuth 2.0 Authorization Server Metadata\n- RFC8628: OAuth 2.0 Device Authorization Grant\n- OpenID Connect 1.0\n- OpenID Connect Discovery 1.0\n\nImplementations\n---------------\n\n- Requests OAuth 1 Session\n- Requests OAuth 2 Session\n- Requests Assertion Session\n- Flask OAuth 1/2 Client\n- Django OAuth 1/2 Client\n- Flask OAuth 1.0 Server\n- Flask OAuth 2.0 Server\n- Flask OpenID Connect 1.0\n- Django OAuth 1.0 Server\n- Django OAuth 2.0 Server\n- Django OpenID Connect 1.0\n\nLicense\n-------\n\nAuthlib is licensed under BSD. Please see LICENSE for licensing details.\n\nIf this license does not fit your company, consider to purchase a commercial\nlicense. Find more information on `Authlib Plans`_.\n\n.. _`Authlib Plans`: https://authlib.org/plans\n\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://authlib.org/",
            "keywords": "",
            "license": "BSD-3-Clause",
            "maintainer": "",
            "maintainer_email": "",
            "name": "Authlib",
            "package_url": "https://pypi.org/project/Authlib/",
            "platform": "any",
            "project_url": "https://pypi.org/project/Authlib/",
            "project_urls": {
               "Blog": "https://blog.authlib.org/",
               "Bug Tracker": "https://github.com/lepture/authlib/issues",
               "Commercial License": "https://authlib.org/plans",
               "Documentation": "https://docs.authlib.org/",
               "Donate": "https://lepture.com/donate",
               "Homepage": "https://authlib.org/",
               "Source Code": "https://github.com/lepture/authlib"
            },
            "release_url": "https://pypi.org/project/Authlib/0.14.3/",
            "requires_dist": [
               "cryptography",
               "requests ; extra == 'client'"
            ],
            "requires_python": "",
            "summary": "The ultimate Python library in building OAuth and OpenID Connect servers.",
            "version": "0.14.3",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Julien Bigot",
            "author_email": "julien.bigot@cea.fr",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Environment :: Console",
               "License :: OSI Approved :: MIT License"
            ],
            "description": "# zpp\n\nThis is zpp, the Z Pre-Processor.\n\nZpp transforms bash in a pre-processor for F90 source files.\nIt offers a set of functions specifically tailored to build clean Fortran90\ninterfaces by generating code for all types, kinds, and array ranks supported by\na given compiler.\n\n## Syntax\n\nZpp files are typically named `*.F90.zpp`.\n\nIn these files, the lines that start with `!$SH` are interpreted as bash lines. \nOther lines are copied as-is, except that variable substitution is operated as\nin a double-quoted string, including bash commands `${VAR}` or `$(command)`.\nIf inside a bash control block (`if`, `for`, etc.), the output generation obeys\nthe control statement.\n\nFor example, this code:\n```\n!$SH for GREETED in world universe multiverse ; do\nprint *, \"Hello ${GREETED}\"\n!$SH done\n```\n\nWould produce the following result:\n```\nprint *, \"Hello world\"\nprint *, \"Hello universe\"\nprint *, \"Hello multiverse\"\n```\n\n### Support functions\n\nPredefined bash functions, variable and code can be provided in `.zpp.sh` files\nthat can be included with `#!SH source <filename>.zpp.sh`.\n\n**Beware**: a file NEEDs to have the `.zpp.sh` extension to be included from\nzpp.\n\nZpp provides a standard library of functions tailored to build clean Fortran90\ninterfaces by generating code for all types, kinds, and array ranks supported by\na given compiler.\n\n#### zpp_str_repeat\n\nFound in `base.zpp.sh`\n\nOutputs a string multiple times.\n\nParameters:\n1. the string to Repeat\n2. the lower bound of the iterations (inclusive)\n3. the upper bound of the iterations (inclusive)\n4. the string separator\n5. the string starter\n6. the string ender\n\nRepeats string `$1` (`$3`-`$2`+1) times, separated by string `$4` inside `$5`\n`$6`.\n* If the number of repetitions is negative, the result is empty.\n* If `$1` contains the '@N' substring, it will be replaced by the iteration\n  number (from `$2` to `$3`).\n\nexample:\n```\n#!SH source base.zpp.sh\nzpp_str_repeat v@N 5 7 '...' '<<' '>>'\nzpp_str_repeat w@N 1 1 '...' '<<' '>>'\nzpp_str_repeat x@N 1 0 '...' '<<' '>>'\n```\noutput:\n```\n<<v5...v6...v7>>\n<<w1>>\n```\n\n#### zpp_str_repeat_reverse\n\nFound in `base.zpp.sh`\n\nOutputs a string multiple times in reverse order.\n\nParameters:\n1. the string to Repeat\n2. the upper bound of the iterations (inclusive)\n3. the lower bound of the iterations (inclusive)\n4. the string separator\n5. the string starter\n6. the string ender\n\nRepeats string `$1` (`$2`-`$3`+1) times, separated by string `$4` inside `$5`\n`$6`.\n* If the number of repetitions is negative, the result is empty.\n* If `$1` contains the '@N' substring, it will be replaced by the iteration\n  number (from `$2` to `$3`, i.e. upper to lower).\n\nexample:\n```\n#!SH source base.zpp.sh\nzpp_str_repeat_reverse v@N 5 7 '...' '<<' '>>'\nzpp_str_repeat_reverse w@N 1 1 '...' '<<' '>>'\nzpp_str_repeat_reverse x@N 1 0 '...' '<<' '>>'\n```\noutput:\n```\n<<v7...v6...v5>>\n<<w1>>\n```\n\n#### ZPP_FORT_TYPES\n\nFound in `fortran.zpp.sh`\n\nThe list of types supported by the fortran compiler as zpp:typeIDs.\n\nThe compiler ID should be provided in `ZPP_CONFIG` as `config.<ID>`.\nThe supported predefined IDs are: `Gnu`, `Intel`, `PGI` and `XL`.\nYou can also provide definitions for an additional compiler by defining\n`ZPP_FORT_TYPES` in a file named `config.<ID>.zpp.sh`.\n\nIf you use cmake, it will automatically generate such a file for your compiler\nand define  `ZPP_CONFIG` so you don't have to handle it.\n\n### zpp_fort_array_desc\n\nFound in `fortran.zpp.sh`\n\nOutputs an assumed shaped array descriptor of the provided size.\n\nParameters:\n1. the size of the assumed shaped array\n\nexample:\n```\n#!SH source fortran.zpp.sh\ninteger:: scalar$(zpp_fort_array_desc 0)\ninteger:: array1d$(zpp_fort_array_desc 1)\ninteger:: array2d$(zpp_fort_array_desc 2)\n```\noutput:\n```\ninteger:: scalar\ninteger:: array1d(:)\ninteger:: array2d(:,:)\n```\n\n### zpp_fort_ptype\n\nFound in `fortran.zpp.sh`\n\nOutputs the type associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\nexample:\n```\n#!SH source fortran.zpp.sh\n!$SH for T in ${ZPP_FORT_TYPES} ; do\n$(zpp_fort_ptype $1)\n!$SH done\n```\nexample output:\n```\nCHARACTER\nCOMPLEX\nCOMPLEX\nINTEGER\nINTEGER\nINTEGER\nINTEGER\nLOGICAL\nREAL\nREAL\n```\n\n### zpp_fort_kind\n\nFound in `fortran.zpp.sh`\n\nOutputs the kind associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\nexample:\n```\n#!SH source fortran.zpp.sh\n!$SH for T in ${ZPP_FORT_TYPES} ; do\n$(zpp_fort_kind $1)\n!$SH done\n```\nexample output:\n```\n1\n4\n8\n1\n2\n4\n8\n1\n4\n8\n```\n\n### zpp_fort_type\n\nFound in `fortran.zpp.sh`\n\nOutputs the full type (with kind included) associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n2. additional attributes for the type\n\nexample:\n```\n#!SH source fortran.zpp.sh\n!$SH for T in ${MY_CHAR_TYPES} ; do\n$(zpp_fort_type $1)\n$(zpp_fort_type $1 \"len=5\")\n!$SH done\n```\nexample output:\n```\nCHARACTER(KIND=1)\nCHARACTER(KIND=1,len=5)\n```\n\n### zpp_fort_sizeof\n\nFound in `fortran.zpp.sh`\n\nOutputs the size in bits associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\n### zpp_fort_io_format\n\nFound in `fortran.zpp.sh`\n\nOutputs an IO descriptor suitable for a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\n### ZPP_HDF5F_TYPES\n\nFound in `hdf5_fortran.zpp.sh`\n\nA list of zpp:typeIDs supported by HDF5.\n\n### hdf5_constant\n\nFound in `hdf5_fortran.zpp.sh`\n\nOutputs the HDF5 type constant associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\nexample:\n```\n#!SH source hdf5_fortran.zpp.sh\n!$SH for T in ${ZPP_HDF5F_TYPES} ; do\n$(hdf5_constant $1)\n!$SH done\n```\nexample output:\n```\nH5T_NATIVE_INTEGER\nH5T_NATIVE_REAL\nH5T_NATIVE_REAL\nH5T_NATIVE_CHARACTER\n```\n\n\n## Command-line interface\n\nZpp basic usage is as follow:\n```\nUsage: zpp [Options...] <source> [<destination>]\n  use `zpp -h' for more info\n\nPreprocesses BASH in-line commands in a source file\n\nOptions:\n  --version        show program's version number and exit\n  -h, --help       show this help message and exit\n  -I DIR           Add DIR to search list for source directives\n  -o FILE          Place the preprocessed code in file FILE.\n  -D OPTION=VALUE  Set the value of OPTION to VALUE\n```\n\n## CMake interface\n\nSupport is provided for using zpp from CMake based projects, but you can use\nit from plain Makefiles too.\n\nThere are two ways you can use zpp from your CMake project:\n* with `add_subdirectory`: include zpp in your project and use it directly from\n  there,\n* with `find_package`: install zpp and use it as an external dependency of your\n  project.\n\n#### CMake subdirectory usage\n\nUsing zpp with `add_subdirectory` is very simple.\nJust copy the `zpp` directory in your source and point to it with\n`add_subdirectory(zpp)`.\nThe `zpp_preprocess` then becomes available to process zpp files.\n\nThis is demonstrated in `example/cmake_subdirectory`.\n\n#### CMake find usage\n\nUsing zpp with `find_package` is no more complex.\nIf zpp is installed, just add a `find_package(zpp REQUIRED)`.\nThe `zpp_preprocess` then becomes available to process zpp files.\n\nThis is demonstrated in `example/cmake_find`.\n\n## GMake usage\n\nUsing zpp from a GNU Makefile is slightly less powerful than from CMake.\nThe types and kinds supported by the Fortran compiler will not be automatically\ndetected.\nPredefined lists of supported types for well known compilers are provided\ninstead.\n\nTo use zpp from a Makefile, include the `share/zpp/zpp.mk` file (either from an\ninstalled location or from a subdirectory in your project).\nYou can then set the `zpp_COMPILER_ID` variable to the compiler you use and\n`.F90` files will be automatically generated from their `.F90.zpp` equivalent.\nThe `zppFLAGS` variable is automatically passed to zpp similarly to `CFLAGS` or\n`CXXFLAGS` for `cc` and `cxx`.\n\nThis is demonstrated in `example/cmake_makefile`.\n\n## Installation\n\nZpp can be installed using the usual python way with `setup.py`.\n```\n./setup.py --help\n```\n\nThe cmake approach is deprecated.\n\n## FAQ\n\nQ. Isn't zpp redundant with assumed type parameters?\n\nA.\nThe assumed type parameters functionality allows to implement part of what can\nbe done with zpp (support for all kinds of a type). However as of 2013 it was\nnot correctly supported on most compilers installed on the supercomputers.\n\nIn addition, many things can be done with zpp but not with assumed type\nparameters, such as support for variable array rank or small variations of the\ncode depending on the kind.\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "bash Fortran pre-processor",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "zpp",
            "package_url": "https://pypi.org/project/zpp/",
            "platform": "",
            "project_url": "https://pypi.org/project/zpp/",
            "project_urls": {
               "Source Code": "https://github.com/pdidev/zpp/"
            },
            "release_url": "https://pypi.org/project/zpp/1.0.4/",
            "requires_dist": [
               "setuptools"
            ],
            "requires_python": "",
            "summary": "a Bash Pre-Processor for Fortran. ZPP is useful in order to build clean Fortran90 interfaces. It allows to generate Fortran code for all types, kinds, and array ranks supported by the compiler.",
            "version": "1.0.4",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Dheepak Krishnamurthy",
            "author_email": "kdheepak89@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# zip [![](https://travis-ci.org/kdheepak/zip.svg?branch=master)](https://travis-ci.org/kdheepak/zip/branches)\n\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/kdheepak/zip",
            "keywords": "",
            "license": "Revised BSD License",
            "maintainer": "",
            "maintainer_email": "",
            "name": "zip",
            "package_url": "https://pypi.org/project/zip/",
            "platform": "",
            "project_url": "https://pypi.org/project/zip/",
            "project_urls": {
               "Homepage": "https://github.com/kdheepak/zip"
            },
            "release_url": "https://pypi.org/project/zip/0.0.2/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Intel Corporation",
            "author_email": "scripting@intel.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "Intended Audience :: Education",
               "Intended Audience :: Other Audience",
               "Intended Audience :: Science/Research",
               "Intended Audience :: System Administrators",
               "License :: Other/Proprietary License",
               "Operating System :: MacOS",
               "Operating System :: Microsoft :: Windows",
               "Operating System :: POSIX",
               "Operating System :: Unix",
               "Topic :: Software Development :: Libraries"
            ],
            "description": "Intel(R) Performance Primitives provides developers with high-quality, production-ready, low-level building blocks for image processing, signal processing, and data processing (data compression and decompression, and cryptography) applications.\n\nOne of many Intel(R) accelerated Python packages and performance library runtimes available on [PyPI](https://software.intel.com/en-us/articles/installing-the-intel-distribution-for-python-and-intel-performance-libraries-with-pip-and), and as part of [Intel(R) Distribution for Python](https://software.intel.com/en-us/distribution-for-python).\n\nFor latest release updates and security notifications, please [subscribe](https://software.intel.com/en-us/forums/intel-distribution-for-python) to the Intel(R) Distribution for Python Community forum.\n\nFree to use and redistribute pursuant to the [Intel Simplified Software License](https://software.intel.com/en-us/license/intel-simplified-software-license).\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://software.intel.com/en-us/articles/empowering-science-with-high-performance-python",
            "keywords": "",
            "license": "Proprietary - Intel",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ipp",
            "package_url": "https://pypi.org/project/ipp/",
            "platform": "",
            "project_url": "https://pypi.org/project/ipp/",
            "project_urls": {
               "Homepage": "https://software.intel.com/en-us/articles/empowering-science-with-high-performance-python"
            },
            "release_url": "https://pypi.org/project/ipp/2019.4.243/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Intel(R) Performance Primitives",
            "version": "2019.4.243",
            "yanked": false,
            "yanked_reason": null
         }
      ],
      "docutils": [
         {
            "author": "Gabriel Alves",
            "author_email": "gabriel.alves@pickcells.bio",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# sx\n#### Framework to manage gRPC-based microservices application",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "https://github.com/itsmealves/sx/releases/download/0.6.0/sx-0.6.0.tar.gz",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/itsmealves/sx",
            "keywords": "sx microservices rpc grpc Framework",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "sx",
            "package_url": "https://pypi.org/project/sx/",
            "platform": "",
            "project_url": "https://pypi.org/project/sx/",
            "project_urls": {
               "Download": "https://github.com/itsmealves/sx/releases/download/0.6.0/sx-0.6.0.tar.gz",
               "Homepage": "https://github.com/itsmealves/sx"
            },
            "release_url": "https://pypi.org/project/sx/0.6.0/",
            "requires_dist": null,
            "requires_python": ">=3.5",
            "summary": "Framework to manage gRPC-based microservices application",
            "version": "0.6.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "chrysn",
            "author_email": "chrysn@fsfe.org",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 3 - Alpha",
               "Intended Audience :: Education",
               "Intended Audience :: Science/Research",
               "License :: OSI Approved :: GNU General Public License (GPL)"
            ],
            "description": "UNKNOWN",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "UNKNOWN",
            "keywords": null,
            "license": "GPL",
            "maintainer": null,
            "maintainer_email": null,
            "name": "si",
            "package_url": "https://pypi.org/project/si/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/si/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "UNKNOWN"
            },
            "release_url": "https://pypi.org/project/si/0.1.1-1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Module to represent SI units",
            "version": "0.1.1-1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "leesoar",
            "author_email": "secure@tom.com",
            "bugtrack_url": null,
            "classifiers": [
               "License :: OSI Approved :: MIT License",
               "Programming Language :: Python :: 3.5",
               "Programming Language :: Python :: 3.6",
               "Programming Language :: Python :: 3.7",
               "Programming Language :: Python :: Implementation :: CPython",
               "Programming Language :: Python :: Implementation :: PyPy"
            ],
            "description": "\nDevelop soon\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://leesoar.com",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ida",
            "package_url": "https://pypi.org/project/ida/",
            "platform": "",
            "project_url": "https://pypi.org/project/ida/",
            "project_urls": {
               "Homepage": "https://leesoar.com"
            },
            "release_url": "https://pypi.org/project/ida/0.0.1/",
            "requires_dist": null,
            "requires_python": ">=3.3.0",
            "summary": "Develop soon",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Xavier Bruhiere",
            "author_email": "xavier.bruhiere@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 2 - Pre-Alpha",
               "Intended Audience :: Science/Research",
               "License :: OSI Approved :: Apache Software License",
               "Natural Language :: English",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2.7",
               "Topic :: Software Development",
               "Topic :: System :: Shells"
            ],
            "description": "python library DNA\n==================\n\n[![Coverage Status](https://coveralls.io/repos/hivetech/dna/badge.png)](https://coveralls.io/r/hivetech/dna)\n\n> Generic python utilities\n\nInstallation\n------------\n\n```console\npip install dna\n```\n\nExample\n-----\n\n```python\nimport dna.utils as utils\nimport dna.logger as logger\n\nlog_setup = logger.setup(level='info', filename='app.log')\nlog = logger.logger(__name__)\nwith log_setup.applicationbound():\n\n    log.info('hello', where='world')\n\n    useless_id = utils.generate_unique_id()\n    useless_name = utils.generate_random_name()\n\n    if utils.docker_check() and utils.is_running('ipyhon'):\n\n        print utils.Version('0.4.1')\n\n        module = utils.dynamic_import('dna.settings', 'LOG')\n        print utils.emphasis(module, align=False)\n\n        print utils.self_ip()\n```",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/hivetech/dna",
            "keywords": null,
            "license": "Apache 2.0",
            "maintainer": null,
            "maintainer_email": null,
            "name": "dna",
            "package_url": "https://pypi.org/project/dna/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/dna/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/hivetech/dna"
            },
            "release_url": "https://pypi.org/project/dna/0.0.7/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Generic python utilities",
            "version": "0.0.7",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Christopher Brown",
            "author_email": "io@henrian.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 2 - Pre-Alpha",
               "License :: OSI Approved :: MIT License",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.6",
               "Programming Language :: Python :: 2.7",
               "Topic :: Software Development :: Libraries :: Python Modules",
               "Topic :: System :: Archiving :: Packaging",
               "Topic :: System :: Filesystems"
            ],
            "description": "Python (package) installation\n-----------------------------\n\nGetting started from `PyPI <https://pypi.python.org/pypi/pi/>`__:\n\n::\n\n    easy_install pi\n\n`Whence easy\\_install? <#setuptools>`__\n\nCommands\n--------\n\n-  Uninstall package named \"pip\":\n\n   ::\n\n       pi uninstall pip\n\n-  Install package named \"filesequence\":\n\n   ::\n\n       pi install filesequence\n\n-  List paths that Python searches for imported modules:\n\n   ::\n\n       pi paths\n\n-  List installed packages:\n\n   ::\n\n       pi list\n\nTesting\n-------\n\nContinuous integration:\n\n|Travis CI Build Status|\n\nOr run tests locally:\n\n::\n\n    nosetests --with-doctest\n\nRelated\n~~~~~~~\n\n-  http://guide.python-distribute.org/creation.html\n-  `distribute/pkg\\_resources\n   docs <http://pythonhosted.org/distribute/pkg_resources.html>`__\n-  standard library\n   ```site`` <http://docs.python.org/2/library/site.html>`__\n-  standard library `environment\n   variables <http://docs.python.org/2/using/cmdline.html#environment-variables>`__\n\nSetuptools\n~~~~~~~~~~\n\n``pi`` does not yet completely replace\n`setuptools <https://pypi.python.org/pypi/setuptools>`__. You may need\nto install it first:\n\n+----------+-----------------------------------------+\n| Distro   | Package manager command                 |\n+==========+=========================================+\n| Ubuntu   | ``apt-get install python-setuptools``   |\n+----------+-----------------------------------------+\n| Mac      | built-in                                |\n+----------+-----------------------------------------+\n| Arch     | ``pacman -S python-setuptools``         |\n+----------+-----------------------------------------+\n| CentOS   | ``yum install python-setuptools``       |\n+----------+-----------------------------------------+\n\nLicense\n-------\n\nCopyright (c) 2013 Christopher Brown. `MIT\nLicensed <https://raw.github.com/chbrown/pi/master/LICENSE>`__.\n\n.. |Travis CI Build Status| image:: https://travis-ci.org/chbrown/pi.png?branch=master\n   :target: https://travis-ci.org/chbrown/pi",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/chbrown/pi",
            "keywords": null,
            "license": "Copyright (c) 2013 Christopher Brown\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.",
            "maintainer": null,
            "maintainer_email": null,
            "name": "pi",
            "package_url": "https://pypi.org/project/pi/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/pi/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/chbrown/pi"
            },
            "release_url": "https://pypi.org/project/pi/0.1.2/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Simpler python package installation",
            "version": "0.1.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ip",
            "package_url": "https://pypi.org/project/ip/",
            "platform": "",
            "project_url": "https://pypi.org/project/ip/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/ip/0.0.1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Vitalii Vanovschi",
            "author_email": "support@parallelpython.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Natural Language :: English",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Topic :: Software Development",
               "Topic :: System :: Distributed Computing"
            ],
            "description": "Parallel Python module (PP) provides an easy and efficient way to create parallel-enabled applications for SMP computers and clusters. PP module features cross-platform portability and dynamic load balancing. Thus application written with PP will parallelize efficiently even on heterogeneous and multi-platform clusters (including clusters running other application with variable CPU loads). Visit http://www.parallelpython.com for further information.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "http://www.parallelpython.com/downloads/pp/pp-1.6.5.zip",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "http://www.parallelpython.com",
            "keywords": null,
            "license": "BSD-like",
            "maintainer": null,
            "maintainer_email": null,
            "name": "pp",
            "package_url": "https://pypi.org/project/pp/",
            "platform": "Windows,Linux,Unix",
            "project_url": "https://pypi.org/project/pp/",
            "project_urls": {
               "Download": "http://www.parallelpython.com/downloads/pp/pp-1.6.5.zip",
               "Homepage": "http://www.parallelpython.com"
            },
            "release_url": "https://pypi.org/project/pp/1.6.5/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Parallel and distributed programming for Python",
            "version": "1.6.5",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Marcus Donnelly",
            "author_email": "marcus.k.donnelly@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "Intended Audience :: Science/Research",
               "License :: OSI Approved :: BSD License",
               "Programming Language :: Python :: 3",
               "Topic :: Scientific/Engineering"
            ],
            "description": "",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "Oceanography,Utilities",
            "license": "BSD",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ocutils",
            "package_url": "https://pypi.org/project/ocutils/",
            "platform": "",
            "project_url": "https://pypi.org/project/ocutils/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/ocutils/1.1.1/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Utility functions for oceanography related work",
            "version": "1.1.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Kiana Alessandra V. Villaera",
            "author_email": "kiana.villaera@senti.com.ph",
            "bugtrack_url": null,
            "classifiers": [
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 3"
            ],
            "description": "Contains everything you might need to perform essential data center functions\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/K-Winkles/dcutils",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dcutils",
            "package_url": "https://pypi.org/project/dcutils/",
            "platform": "",
            "project_url": "https://pypi.org/project/dcutils/",
            "project_urls": {
               "Homepage": "https://github.com/K-Winkles/dcutils"
            },
            "release_url": "https://pypi.org/project/dcutils/0.6/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "A simple package for data center utilities",
            "version": "0.6",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Mike Kazantsev",
            "author_email": "mk.fraggod@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Intended Audience :: Developers",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3.5",
               "Topic :: Software Development",
               "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description": "pretty-yaml (or pyaml)\n======================\n\nPyYAML-based python module to produce pretty and readable YAML-serialized data.\n\nThis module is for serialization only, see `ruamel.yaml`_ module for literate\nYAML parsing (keeping track of comments, spacing, line/column numbers of values, etc).\n\n[note: to dump stuff parsed by ruamel.yaml with this module, use only ``YAML(typ='safe')`` there]\n\n.. contents::\n  :backlinks: none\n\n\nWarning\n-------\n\nPrime goal of this module is to produce human-readable output that can be easily\nmanipulated and re-used, but maybe with some occasional caveats.\n\nOne good example of such \"caveat\" is that e.g. ``{'foo': '123'}`` will serialize\nto ``foo: 123``, which for PyYAML would be a bug, as 123 will then be read back\nas an integer from that, but here it's a feature.\n\nSo please do not rely on the thing to produce output that can always be\ndeserialized exactly to what was exported, at least - use PyYAML (e.g. with\noptions from the next section) for that.\n\n\nWhat this module does and why\n-----------------------------\n\nYAML is generally nice and easy format to read *if* it was written by humans.\n\nPyYAML can a do fairly decent job of making stuff readable, and the best\ncombination of parameters for such output that I've seen so far is probably this one::\n\n  >>> m = [123, 45.67, {1: None, 2: False}, u'some text']\n  >>> data = dict(a=u'asldnsa\\nasldpáknsa\\n', b=u'whatever text', ma=m, mb=m)\n  >>> yaml.safe_dump(data, sys.stdout, allow_unicode=True, default_flow_style=False)\n  a: 'asldnsa\n\n    asldpáknsa\n\n    '\n  b: whatever text\n  ma: &id001\n  - 123\n  - 45.67\n  - 1: null\n    2: false\n  - some text\n  mb: *id001\n\npyaml tries to improve on that a bit, with the following tweaks:\n\n* Most human-friendly representation options in PyYAML (that I know of) get\n  picked as defaults.\n\n* Does not dump \"null\" values, if possible, replacing these with just empty\n  strings, which have the same meaning but reduce visual clutter and are easier\n  to edit.\n\n* Dicts, sets, OrderedDicts, defaultdicts, namedtuples, etc are representable\n  and get sorted on output (OrderedDicts and namedtuples keep their ordering),\n  so that output would be as diff-friendly as possible, and not arbitrarily\n  depend on python internals.\n\n  It appears that at least recent PyYAML versions also do such sorting for\n  python dicts.\n\n* List items get indented, as they should be.\n\n* bytestrings that can't be auto-converted to unicode raise error, as yaml has\n  no \"binary bytes\" (i.e. unix strings) type.\n\n* Attempt is made to pick more readable string representation styles, depending\n  on the value, e.g.::\n\n    >>> yaml.safe_dump(cert, sys.stdout)\n    cert: '-----BEGIN CERTIFICATE-----\n\n      MIIH3jCCBcagAwIBAgIJAJi7AjQ4Z87OMA0GCSqGSIb3DQEBCwUAMIHBMRcwFQYD\n\n      VQQKFA52YWxlcm9uLm5vX2lzcDEeMBwGA1UECxMVQ2VydGlmaWNhdGUgQXV0aG9y\n    ...\n\n    >>> pyaml.p(cert):\n    cert: |\n      -----BEGIN CERTIFICATE-----\n      MIIH3jCCBcagAwIBAgIJAJi7AjQ4Z87OMA0GCSqGSIb3DQEBCwUAMIHBMRcwFQYD\n      VQQKFA52YWxlcm9uLm5vX2lzcDEeMBwGA1UECxMVQ2VydGlmaWNhdGUgQXV0aG9y\n    ...\n\n* \"force_embed\" option to avoid having &id stuff scattered all over the output\n  (which might be beneficial in some cases, hence the option).\n\n* \"&id\" anchors, if used, get labels from the keys they get attached to,\n  not just use meaningless enumerators.\n\n* \"string_val_style\" option to only apply to strings that are values, not keys,\n  i.e::\n\n    >>> pyaml.p(data, string_val_style='\"')\n    key: \"value\\nasldpáknsa\\n\"\n    >>> yaml.safe_dump(data, sys.stdout, allow_unicode=True, default_style='\"')\n    \"key\": \"value\\nasldpáknsa\\n\"\n\n* \"sort_dicts=False\" option to leave dict item ordering to python, and not\n  force-sort them in yaml output, which can be important for python 3.6+ where\n  they retain ordering info.\n\n* Has an option to add vertical spacing (empty lines) between keys on different\n  depths, to make output much more seekable.\n\nResult for the (rather meaningless) example above (without any additional\ntweaks)::\n\n  >>> pyaml.p(data)\n  a: |\n    asldnsa\n    asldpáknsa\n  b: 'whatever text'\n  ma: &ma\n    - 123\n    - 45.67\n    - 1:\n      2: false\n    - 'some text'\n  mb: *ma\n\n----------\n\nExtended example::\n\n  >>> pyaml.dump(conf, sys.stdout, vspacing=[2, 1]):\n  destination:\n\n    encoding:\n      xz:\n        enabled: true\n        min_size: 5120\n        options:\n        path_filter:\n          - \\.(gz|bz2|t[gb]z2?|xz|lzma|7z|zip|rar)$\n          - \\.(rpm|deb|iso)$\n          - \\.(jpe?g|gif|png|mov|avi|ogg|mkv|webm|mp[34g]|flv|flac|ape|pdf|djvu)$\n          - \\.(sqlite3?|fossil|fsl)$\n          - \\.git/objects/[0-9a-f]+/[0-9a-f]+$\n\n    result:\n      append_to_file:\n      append_to_lafs_dir:\n      print_to_stdout: true\n\n    url: http://localhost:3456/uri\n\n\n  filter:\n    - /(CVS|RCS|SCCS|_darcs|\\{arch\\})/$\n    - /\\.(git|hg|bzr|svn|cvs)(/|ignore|attributes|tags)?$\n    - /=(RELEASE-ID|meta-update|update)$\n\n\n  http:\n\n    ca_certs_files: /etc/ssl/certs/ca-certificates.crt\n\n    debug_requests: false\n\n    request_pool_options:\n      cachedConnectionTimeout: 600\n      maxPersistentPerHost: 10\n      retryAutomatically: true\n\n\n  logging:\n\n    formatters:\n      basic:\n        datefmt: '%Y-%m-%d %H:%M:%S'\n        format: '%(asctime)s :: %(name)s :: %(levelname)s: %(message)s'\n\n    handlers:\n      console:\n        class: logging.StreamHandler\n        formatter: basic\n        level: custom\n        stream: ext://sys.stderr\n\n    loggers:\n      twisted:\n        handlers:\n          - console\n        level: 0\n\n    root:\n      handlers:\n        - console\n      level: custom\n\nNote that unless there are many moderately wide and deep trees of data, which\nare expected to be read and edited by people, it might be preferrable to\ndirectly use PyYAML regardless, as it won't introduce another (rather pointless\nin that case) dependency and a point of failure.\n\n\nSome Tricks\n-----------\n\n* Pretty-print any yaml or json (yaml subset) file from the shell::\n\n    % python -m pyaml /path/to/some/file.yaml\n    % curl -s https://www.githubstatus.com/api/v2/summary.json | python -m pyaml\n\n* Process and replace json/yaml file in-place::\n\n    % python -m pyaml -r file-with-json.data\n\n* Easier \"debug printf\" for more complex data (all funcs below are aliases to\n  same thing)::\n\n    pyaml.p(stuff)\n    pyaml.pprint(my_data)\n    pyaml.pprint('----- HOW DOES THAT BREAKS!?!?', input_data, some_var, more_stuff)\n    pyaml.print(data, file=sys.stderr) # needs \"from __future__ import print_function\"\n\n* Force all string values to a certain style (see info on these in\n  `PyYAML docs`_)::\n\n    pyaml.dump(many_weird_strings, string_val_style='|')\n    pyaml.dump(multiline_words, string_val_style='>')\n    pyaml.dump(no_want_quotes, string_val_style='plain')\n\n  Using ``pyaml.add_representer()`` (note \\*p\\*yaml) as suggested in\n  `this SO thread`_ (or `github-issue-7`_) should also work.\n\n* Control indent and width of the results::\n\n    pyaml.dump(wide_and_deep, indent=4, width=120)\n\n  These are actually keywords for PyYAML Emitter (passed to it from Dumper),\n  see more info on these in `PyYAML docs`_.\n\n* Dump multiple yaml documents into a file: ``pyaml.dump_all([data1, data2, data3], dst_file)``\n\n  explicit_start=True is implied, unless explicit_start=False is passed.\n\n.. _PyYAML docs: http://pyyaml.org/wiki/PyYAMLDocumentation#Scalars\n.. _this SO thread: http://stackoverflow.com/a/7445560\n.. _github-issue-7: https://github.com/mk-fg/pretty-yaml/issues/7\n\n\nInstallation\n------------\n\nIt's a regular package for Python (3.x or 2.x).\n\nModule uses PyYAML_ for processing of the actual YAML files and should pull it\nin as a dependency.\n\nDependency on unidecode_ module is optional and should only be necessary if\nsame-id objects or recursion is used within serialized data.\n\nBe sure to use python3/python2, pip3/pip2, easy_install-... binaries below,\nbased on which python version you want to install the module for, if you have\nseveral on the system (as is norm these days for py2-py3 transition).\n\nUsing pip_ is the best way::\n\n  % pip install pyaml\n\n(add --user option to install into $HOME for current user only)\n\nOr, if you don't have \"pip\" command::\n\n  % python -m ensurepip\n  % python -m pip install --upgrade pip\n  % python -m pip install pyaml\n\n(same suggestion wrt \"install --user\" as above)\n\nOn a very old systems, one of these might work::\n\n  % curl https://bootstrap.pypa.io/get-pip.py | python\n  % pip install pyaml\n\n  % easy_install pyaml\n\n  % git clone --depth=1 https://github.com/mk-fg/pretty-yaml\n  % cd pretty-yaml\n  % python setup.py install\n\n(all of install-commands here also have --user option,\nsee also `pip docs \"installing\" section`_)\n\nCurrent-git version can be installed like this::\n\n  % pip install 'git+https://github.com/mk-fg/pretty-yaml#egg=pyaml'\n\nNote that to install stuff to system-wide PATH and site-packages (without\n--user), elevated privileges (i.e. root and su/sudo) are often required.\n\nUse \"...install --user\", `~/.pydistutils.cfg`_ or virtualenv_ to do unprivileged\ninstalls into custom paths.\n\nMore info on python packaging can be found at `packaging.python.org`_.\n\n.. _ruamel.yaml: https://bitbucket.org/ruamel/yaml/\n.. _PyYAML: http://pyyaml.org/\n.. _unidecode: http://pypi.python.org/pypi/Unidecode\n.. _pip: http://pip-installer.org/\n.. _pip docs \"installing\" section: http://www.pip-installer.org/en/latest/installing.html\n.. _~/.pydistutils.cfg: http://docs.python.org/install/index.html#distutils-configuration-files\n.. _virtualenv: http://pypi.python.org/pypi/virtualenv\n.. _packaging.python.org: https://packaging.python.org/installing/\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/mk-fg/pretty-yaml",
            "keywords": "yaml serialization pretty print format human readable readability",
            "license": "WTFPL",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyaml",
            "package_url": "https://pypi.org/project/pyaml/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyaml/",
            "project_urls": {
               "Homepage": "https://github.com/mk-fg/pretty-yaml"
            },
            "release_url": "https://pypi.org/project/pyaml/20.4.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "PyYAML-based module to produce pretty and readable YAML-serialized data",
            "version": "20.4.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "haogege",
            "author_email": "1394168335@qq.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# pyyml\nUse python in yaml\n## 基本使用\n在python中使用：\n```python\nfrom pyyml import load\n\nwith open('conf.yml') as f:\n    raw_conf = f.read()\nconfig = load(raw_conf)\nprint(config)\n```\n在yaml中 `${...}` 中的内容将会被python执行：\n\nyaml内容\n```yaml\nsum: ${1 + 1}\n```\n实际解析内容\n```python\n{'sum': 2}\n```\n通过在文件开头第一行注释来导入所需的包：\n\n```yaml\n# libs:['os', 'os.path:path', 'this']\n```\n通过 [包名]:[别名] 取别名导入包\n\n`'os.path:path' 等同于 python 中的 from os import path`\n\n例如yaml文件内容\n```yaml\n# libs:['os', 'os.path:path', 'this']\nos_name: ${os.name}\nbase_dir: ${path.abspath(path.dirname(__file__))}\n```\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/q1394168335/pyyml",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyyml",
            "package_url": "https://pypi.org/project/pyyml/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyyml/",
            "project_urls": {
               "Homepage": "https://github.com/q1394168335/pyyml"
            },
            "release_url": "https://pypi.org/project/pyyml/0.0.2/",
            "requires_dist": [
               "pyyaml (>=3.13)"
            ],
            "requires_python": "",
            "summary": "Use python in yaml",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Michael Foord",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "rs",
            "package_url": "https://pypi.org/project/rs/",
            "platform": "",
            "project_url": "https://pypi.org/project/rs/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/rs/0.0/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "",
            "version": "0.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Ramses",
            "author_email": "hello@ramses.tech",
            "bugtrack_url": null,
            "classifiers": [
               "Framework :: Pyramid",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.4",
               "Programming Language :: Python :: 3.5",
               "Topic :: Internet :: WWW/HTTP",
               "Topic :: Internet :: WWW/HTTP :: WSGI :: Application"
            ],
            "description": "# `Ra`\n[![Build Status](https://travis-ci.org/ramses-tech/ra.svg?branch=master)](https://travis-ci.org/ramses-tech/ra)\n[![Documentation](https://readthedocs.org/projects/ra/badge/?version=stable)](http://ra.readthedocs.org)\n\nRa is a test suite generator and helper library for testing APIs described\nin [RAML](http://raml.org/).\n\nOut of the box, Ra provides a basic, automated test suite to test the routes\ndeclared in the RAML document. It provides test helpers for augmenting these\nwith custom tests to test application-specific logic, side effects, etc.\n\nRa is primarily designed to provide testing support for\n[ramses](http://github.com/ramses-tech/ramses) and\n[nefertari](http://github.com/ramses-tech/nefertari) applications, but can\nbe used with any WSGI-conformant, RAML-described API.\n\nIt currently depends on pytest but may be adapted for other test frameworks\nin the future. It works best using WebTest but doesn't require it.\n\n## Name\n\nRa was the god of the sun, the most important god in ancient Egypt.\n\n\n## Try it (dev)\n\nRun the test suite:\n\n```bash\n    $ pip install -r requirements.txt\n    $ py.test\n```\n\nCheck out the example:\n\n```bash\n    $ cd examples/ramses-test\n    $ pip install -r requirements.txt\n    $ py.test\n```\n\nThe example RAML at `examples/ramses-test/api.raml` and the test file\n`examples/ramses-test/tests/test_api.py` should be helpful to reference.\n\nSee the docs in `docs/`, and the `api.raml` and `tests/test_api.py` in\n`tests/apps/ramses_test`",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/ramses-tech/ra",
            "keywords": "web raml",
            "license": "UNKNOWN",
            "maintainer": null,
            "maintainer_email": null,
            "name": "ra",
            "package_url": "https://pypi.org/project/ra/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/ra/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/ramses-tech/ra"
            },
            "release_url": "https://pypi.org/project/ra/0.2.0/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Test RAML API definition",
            "version": "0.2.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Shoumik Palkar",
            "author_email": "shoumik@cs.stanford.edu",
            "bugtrack_url": null,
            "classifiers": [
               "License :: OSI Approved :: BSD License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 3"
            ],
            "description": "## split annotations\n\nThis package contains the Python implementation of [split annotations](), a system for optimizing applications\nthat combine many data-intensive library functions. See some useful links below.\n\n* [Documentation for this package](https://www.weld.rs/split-annotations/docs/)\n* [GitHub repository](https://www.github.com/weld-project/split-annotations)\n* [SOSP 2019 Paper describing the system](https://shoumik.xyz/static/papers/mozart-sosp19final.pdf)\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://www.github.com/weld-project/split-annotations",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "sa",
            "package_url": "https://pypi.org/project/sa/",
            "platform": "",
            "project_url": "https://pypi.org/project/sa/",
            "project_urls": {
               "Homepage": "https://www.github.com/weld-project/split-annotations"
            },
            "release_url": "https://pypi.org/project/sa/0.0.4/",
            "requires_dist": [
               "numpy",
               "pandas",
               "scipy",
               "sharedmem"
            ],
            "requires_python": ">=3.6",
            "summary": "Python split annotations package",
            "version": "0.0.4",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Mitch Garnaat",
            "author_email": "mitch@garnaat.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.6",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.3",
               "Programming Language :: Python :: 3.4",
               "Topic :: Internet"
            ],
            "description": "####\nboto\n####\nboto 2.49.0\n\nReleased: 11-July-2018\n\n.. image:: https://travis-ci.org/boto/boto.svg?branch=develop\n        :target: https://travis-ci.org/boto/boto\n\n.. image:: https://pypip.in/d/boto/badge.svg\n        :target: https://pypi.python.org/pypi/boto/\n\n******\nBoto 3\n******\n\n`Boto3 <https://github.com/boto/boto3>`__, the next version of Boto, is now\nstable and recommended for general use.  It can be used side-by-side with Boto\nin the same project, so it is easy to start using Boto3 in your existing\nprojects as well as new projects. Going forward, API updates and all new\nfeature work will be focused on Boto3.\n\nTo assist users who still depend on Boto and cannot immediately switch over, we\nwill be triaging and addressing critical issues and PRs in Boto in the short\nterm. As more users make the switch to Boto3, we expect to reduce our\nmaintenance involvement over time. If we decide on a cutoff date or any\nsignificant changes to our maintenance plan, we will make pre-announcements\nwell ahead of schedule to allow ample time for our users to adapt/migrate.\n\n\n************\nIntroduction\n************\n\nBoto is a Python package that provides interfaces to Amazon Web Services.\nCurrently, all features work with Python 2.6 and 2.7. Work is under way to\nsupport Python 3.3+ in the same codebase. Modules are being ported one at\na time with the help of the open source community, so please check below\nfor compatibility with Python 3.3+.\n\nTo port a module to Python 3.3+, please view our `Contributing Guidelines`_\nand the `Porting Guide`_. If you would like, you can open an issue to let\nothers know about your work in progress. Tests **must** pass on Python\n2.6, 2.7, 3.3, and 3.4 for pull requests to be accepted.\n\n\n********\nServices\n********\n\nAt the moment, boto supports:\n\n* Compute\n\n  * Amazon Elastic Compute Cloud (EC2) (Python 3)\n  * Amazon Elastic Map Reduce (EMR) (Python 3)\n  * AutoScaling (Python 3)\n  * Amazon Kinesis (Python 3)\n  * AWS Lambda (Python 3)\n  * Amazon EC2 Container Service (Python 3)\n\n* Content Delivery\n\n  * Amazon CloudFront (Python 3)\n\n* Database\n\n  * Amazon Relational Data Service (RDS)\n  * Amazon DynamoDB (Python 3)\n  * Amazon SimpleDB (Python 3)\n  * Amazon ElastiCache (Python 3)\n  * Amazon Redshift (Python 3)\n\n* Deployment and Management\n\n  * AWS Elastic Beanstalk (Python 3)\n  * AWS CloudFormation (Python 3)\n  * AWS Data Pipeline (Python 3)\n  * AWS Opsworks (Python 3)\n  * AWS CloudTrail (Python 3)\n  * AWS CodeDeploy (Python 3)\n\n* Administration & Security\n\n  * AWS Identity and Access Management (IAM) (Python 3)\n  * AWS Key Management Service (KMS) (Python 3)\n  * AWS Config (Python 3)\n  * AWS CloudHSM (Python 3)\n\n* Application Services\n\n  * Amazon CloudSearch (Python 3)\n  * Amazon CloudSearch Domain (Python 3)\n  * Amazon Elastic Transcoder (Python 3)\n  * Amazon Simple Workflow Service (SWF) (Python 3)\n  * Amazon Simple Queue Service (SQS) (Python 3)\n  * Amazon Simple Notification Server (SNS) (Python 3)\n  * Amazon Simple Email Service (SES) (Python 3)\n  * Amazon Cognito Identity (Python 3)\n  * Amazon Cognito Sync (Python 3)\n  * Amazon Machine Learning (Python 3)\n\n* Monitoring\n\n  * Amazon CloudWatch (EC2 Only) (Python 3)\n  * Amazon CloudWatch Logs (Python 3)\n\n* Networking\n\n  * Amazon Route53 (Python 3)\n  * Amazon Route 53 Domains (Python 3)\n  * Amazon Virtual Private Cloud (VPC) (Python 3)\n  * Elastic Load Balancing (ELB) (Python 3)\n  * AWS Direct Connect (Python 3)\n\n* Payments and Billing\n\n  * Amazon Flexible Payment Service (FPS)\n\n* Storage\n\n  * Amazon Simple Storage Service (S3) (Python 3)\n  * Amazon Glacier (Python 3)\n  * Amazon Elastic Block Store (EBS)\n  * Google Cloud Storage\n\n* Workforce\n\n  * Amazon Mechanical Turk\n\n* Other\n\n  * Marketplace Web Services (Python 3)\n  * AWS Support (Python 3)\n\nThe goal of boto is to support the full breadth and depth of Amazon\nWeb Services.  In addition, boto provides support for other public\nservices such as Google Storage in addition to private cloud systems\nlike Eucalyptus, OpenStack and Open Nebula.\n\nBoto is developed mainly using Python 2.6.6 and Python 2.7.3 on Mac OSX\nand Ubuntu Maverick.  It is known to work on other Linux distributions\nand on Windows.  Most of Boto requires no additional libraries or packages\nother than those that are distributed with Python.  Efforts are made\nto keep boto compatible with Python 2.5.x but no guarantees are made.\n\n************\nInstallation\n************\n\nInstall via `pip`_:\n\n::\n\n    $ pip install boto\n\nInstall from source:\n\n::\n\n    $ git clone git://github.com/boto/boto.git\n    $ cd boto\n    $ python setup.py install\n\n**********\nChangeLogs\n**********\n\nTo see what has changed over time in boto, you can check out the\nrelease notes at `http://docs.pythonboto.org/en/latest/#release-notes`\n\n***************************\nFinding Out More About Boto\n***************************\n\nThe main source code repository for boto can be found on `github.com`_.\nThe boto project uses the `gitflow`_ model for branching.\n\n`Online documentation`_ is also available. The online documentation includes\nfull API documentation as well as Getting Started Guides for many of the boto\nmodules.\n\nBoto releases can be found on the `Python Cheese Shop`_.\n\nJoin our IRC channel `#boto` on FreeNode.\nWebchat IRC channel: http://webchat.freenode.net/?channels=boto\n\nJoin the `boto-users Google Group`_.\n\n*************************\nGetting Started with Boto\n*************************\n\nYour credentials can be passed into the methods that create\nconnections.  Alternatively, boto will check for the existence of the\nfollowing environment variables to ascertain your credentials:\n\n**AWS_ACCESS_KEY_ID** - Your AWS Access Key ID\n\n**AWS_SECRET_ACCESS_KEY** - Your AWS Secret Access Key\n\nCredentials and other boto-related settings can also be stored in a\nboto config file.  See `this`_ for details.\n\n.. _Contributing Guidelines: https://github.com/boto/boto/blob/develop/CONTRIBUTING\n.. _Porting Guide: http://boto.readthedocs.org/en/latest/porting_guide.html\n.. _pip: http://www.pip-installer.org/\n.. _release notes: https://github.com/boto/boto/wiki\n.. _github.com: http://github.com/boto/boto\n.. _Online documentation: http://docs.pythonboto.org\n.. _Python Cheese Shop: http://pypi.python.org/pypi/boto\n.. _this: http://docs.pythonboto.org/en/latest/boto_config_tut.html\n.. _gitflow: http://nvie.com/posts/a-successful-git-branching-model/\n.. _neo: https://github.com/boto/boto/tree/neo\n.. _boto-users Google Group: https://groups.google.com/forum/?fromgroups#!forum/boto-users\n\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/boto/boto/",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "boto",
            "package_url": "https://pypi.org/project/boto/",
            "platform": "Posix; MacOS X; Windows",
            "project_url": "https://pypi.org/project/boto/",
            "project_urls": {
               "Homepage": "https://github.com/boto/boto/"
            },
            "release_url": "https://pypi.org/project/boto/2.49.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Amazon Web Services Library",
            "version": "2.49.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Hadi Asghari",
            "author_email": "hd.asghari@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 3",
               "Topic :: Software Development :: Libraries :: Python Modules",
               "Topic :: System :: Networking"
            ],
            "description": "pyasn\n=====\n\n.. image:: https://pypip.in/v/pyasn/badge.png\n   :target: https://pypi.python.org/pypi/pyasn\n\n.. image:: https://pypip.in/d/pyasn/badge.png\n   :target: https://pypi.python.org/pypi/pyasn\n\n\n**pyasn** is a Python extension module that enables very fast IP address to Autonomous System Number lookups.\nCurrent state and Historical lookups can be done, based on the MRT/RIB BGP archive used as input.\n\n*pyasn* is different from other ASN lookup tools in that it provides **offline** and **historical** lookups.\nIt provides utility scripts for users to build their own lookup databases based on any MRT/RIB archive.\nThis makes *pyasn* much faster than online dig/whois/json lookups.\n\nThe module is written in C and Python, and cross-compiles on Linux and Windows. Underneath, it uses a radix tree\ndata structure for storage of IP addresses. In the current version, it borrows code from *py-radix* to support\nboth IPV4 and IPV6 network prefixes. The current release is a beta. Compared to the previous version, it provides\nsupport for Python 2 and 3; adds new functionality, performance improvements, and unit-tests.\n\n*pyasn* is developed and maintained by researchers at the Economics of Cybersecurity research group at Delft\nUniversity of Technology (http://econsec.tbm.tudlft.nl). The package is used on an almost daily basis and bugs\nare fixed pretty quickly.  The package is largely developed and maintained by Hadi Asghari and Arman Noroozian.\nPlease report any bugs via GitHub (https://github.com/hadiasghari/pyasn) or email the developers.\n\n\nInstallation\n============\nInstallation is a breeze via pip: ::\n\n    pip install pyasn --pre\n\nOr with the standard Python: ::\n\n    python setup.py build\n    python setup.py install --record log\n\nYou will need to have pip, setuptools and build essentials installed if you build the package manually. On\nUbuntu/Debian you can get them using the following command: ::\n\n    sudo apt-get install python-pip python-dev build-essential\n\nBuilding the C module on Windows, using either pip or from source, requires Microsoft Visual C++ to be installed.\npyasn has been tested using Visual C++ Express 2010, available freely from Microsoft's website, on both the\nofficial Python 3.4 release and Miniconda3. Other versions of Python, Visual Studio, and Cygwin could also work\nwith minor modifications.\n\nWe plan to release *pyasn* packages to major Linux repositories once it is out of beta.\n\n\nUsage\n=====\nA simple example that demonstrates most of the features: ::\n\n    import pyasn\n\n    # Initialize module and load IP to ASN database\n    # the sample database can be downloaded or built - see below\n    asndb = pyasn.pyasn('ipasn_20140513.dat')\n\n    asndb.lookup('8.8.8.8')\n    # should return: (15169, '8.8.8.0/24'), the origin AS, and the BGP prefix it matches\n\n    asndb.get_as_prefixes(1128)\n    # returns ['130.161.0.0/16', '131.180.0.0/16', '145.94.0.0/16'], TU-Delft prefixes\n\n\nIPASN Data Files\n================\nIPASN data files are a long list of prefixes used to lookup AS number for IPs. An excerpt from such a file looks\nlike this: ::\n\n    ; IP-ASN32-DAT file\n    ; Original file : <Path to a rib file>\n    ; Converted on  : Tue May 13 22:03:05 2014\n    ; CIDRs         : 512490\n    ;\n    1.0.0.0/24  15169\n    1.0.128.0/17        9737\n    1.0.128.0/18        9737\n    1.0.128.0/19        9737\n    1.0.129.0/24        23969\n    ...\n\nIPASN data files can be created by downloading MRT/RIB BGP archives from Routeviews (or similar sources),\nand parsing them using provided scripts that tail the BGP AS-Path. This can be done simply as follows: ::\n\n    pyasn_util_download.py --latest\n    pyasn_util_convert.py --single <Downloaded RIB File> <ipasn_db_file_name>\n\n\n**NOTE:** These scripts are by default installed to ``/usr/local/bin`` and can be executed directly. If you installed\nthe package to a user directory, these scripts will not be on the path and you will have to invoke them by navigating\nto the folder in which they have been copied (e.g. ``~/.local/bin``).\n\nWe also provide download links to a large number of previously generated IPASN data files. These are based on\nweekly  snapshots of the Routeviews data from 2005-2015, accessible here:\nhttp://data.3tu.nl/repository/uuid:d4d23b8e-2077-4592-8b47-cb476ad16e12\n\n**New in v1.6:** To save disk space, you can gzip IPASN data files. The load time will be slighlty longer.\n\n\nPerformance Tip\n===============\nInitial loading of a IPASN data file is the most heavy operation of the package. For fast lookups using multiple\nIPASN data files, for instance for historical lookups on multiple dates, we recommend caching of loaded data files\nfor better performance.\n\n\nUninstalling pyasn\n==================\nYou can remove *pyasn* as follows: ::\n\n    pip uninstall pyasn\n\nIf you built and installed the package your self use the recorded log to remove the installed files.\n\n**Removing PyASN version 1.2**: *pyasn* v1.5/1.6 and v1.2 can be installed side by side (due to lower-cased package\nname). To avoid mistakes, you can uninstall the old **PyASN** by deleting the following files from your Python\ninstallation: ::\n\n    PYTHONDIR/dist-packages/PyASN.so\n    PYTHONDIR/dist-packages/PyASN-1.2.egg-info\n\n\nPackage Structure\n=================\nThe main portions of the directory tree are as follows: ::\n\n    .\n    ├── pyasn/__init__.py       # Python code of the main pyasn module\n    ├── pyasn/pyasn_radix.c     # C extension code (Python RADIX module with bulk load)\n    ├── pyasn/_radix/*          # C extension code (Based on original RADIX code from MRTd)\n    ├── pyasn/mrtx.py           # python module used to convert MRT files to pyasn DB files\n    ├── pyasn-utils/*.py        # Scripts to download & convert BGP MRT dumps to IPASN databases\n    ├── data/                   # Test Resources and some sample DBs to use\n    ├── tests/                  # Tests\n    └── setup.py                # Standard setup.py for installation/testing/etc.\n\n\n\nTesting pyasn Sources\n=====================\nA limited number of unit tests are provided in the ``tests/`` directory when downlading the sources. They can be\nrun with the following command: ::\n\n    python setup.py test\n\nThis beta release has been tested under python version 2.6, 2.7, 3.3, 3.4 and 3.5. We appreciate contributions towards\ntesting *pyasn*!\n\n**New in v1.6:** pyasn_util_convert.py offers a '--dump-screen' option which shows the MRT/RIB archive contents and\nthe chosen origin-AS.\n\n\nLicense & Acknowledgments\n=========================\n*pyasn* is licensed under the MIT license.\n\nIt extends code from py-radix (Michael J. Schultz and Damien Miller),  and improves upon it in several ways, for\ninstance in lowering memory usage and adding bulk prefix/origin load. The underlying radix tree implementation is\ntaken (and modified) from MRTd. These are all subject to their respective licenses.  Please see the LICENSE file\nfor details.\n\nThanks to Dr. Chris Lee (of Shadowserver) for proposing the use of radix trees.\n\nA handful of GitHub developers have contributed features and bug fixes to the latest releases.\nMany thanks to all of them.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": null,
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/hadiasghari/pyasn",
            "keywords": "ip asn autonomous system bgp whois prefix radix python routing networking",
            "license": "MIT",
            "maintainer": null,
            "maintainer_email": null,
            "name": "pyasn",
            "package_url": "https://pypi.org/project/pyasn/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/pyasn/",
            "project_urls": {
               "Homepage": "https://github.com/hadiasghari/pyasn"
            },
            "release_url": "https://pypi.org/project/pyasn/1.6.0b1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Offline IP address to Autonomous System Number lookup module.",
            "version": "1.6.0b1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Perdix Software",
            "author_email": "ssmith@perdixsw.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 2 - Pre-Alpha",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.4",
               "Programming Language :: Python :: 3.5",
               "Programming Language :: Python :: 3.6",
               "Topic :: Office/Business :: Financial",
               "Topic :: Scientific/Engineering :: Mathematics"
            ],
            "description": "UNKNOWN",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "https://www.github.com/perdixsw/umpy/tarball/0.1.0",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://www.github.com/perdixsw/umpy",
            "keywords": "units,measure,measurement,conversion,converter",
            "license": "MIT",
            "maintainer": null,
            "maintainer_email": null,
            "name": "umpy",
            "package_url": "https://pypi.org/project/umpy/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/umpy/",
            "project_urls": {
               "Download": "https://www.github.com/perdixsw/umpy/tarball/0.1.0",
               "Homepage": "https://www.github.com/perdixsw/umpy"
            },
            "release_url": "https://pypi.org/project/umpy/0.1.0/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Simple unit of measure conversion for python, optimized for manufacturing contexts.",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Jay Marcyes",
            "author_email": "jay@marcyes.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Environment :: Console",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Topic :: Software Development :: Testing"
            ],
            "description": "Pyt\n===\n\nPyt is a lightweight wrapper around `Python’s unittest\nmodule <https://docs.python.org/3/library/unittest.html>`__ that adds\nsome nice features and enhancements over the stock ``unittest`` module.\n\nQuickstart\n~~~~~~~~~~\n\nPyt overrides unittest’s built-in pathfinding to be smarter and less\nverbose, so you can match tests using prefix matching which makes\nrunning a test like:\n\n::\n\n   $ python -m unittest tests.foo_test.BarTestCase.test_che\n\nas simple as:\n\n::\n\n   $ pyt foo.Bar.che\n\nBut it’s even less verbose if you want it to be, pyt can reach into the\nmodules and classes to do its matching, so you don’t even need to\nspecify the module and class if you don’t want to:\n\n::\n\n   $ pyt che\n\nMore examples\n^^^^^^^^^^^^^\n\nTo run all the ``Happy`` tests:\n\n::\n\n   $ pyt Happy\n\nTo run all the ``newmodule`` tests:\n\n::\n\n   $ pyt newmodule\n\nTo run more than one test:\n\n::\n\n   $ pyt test1 test2 ...\n\nTo run every test ``pyt`` can find:\n\n::\n\n   $ pyt\n\nAnd the way I like to run all tests in the current directory:\n\n::\n\n   $ pyt -vb\n\nWhich can also be written:\n\n::\n\n   $ pyt --verbose --buffer\n\nFlags\n~~~~~\n\nTo see everything pyt can do\n\n::\n\n   $ pyt --help\n\n–warnings\n^^^^^^^^^\n\nThis will convert warnings into errors.\n\n::\n\n   $ pyt --warnings\n\n–rerun\n^^^^^^\n\nIf your last testrun had failing tests this will rerun only the tests\nthat failed.\n\n::\n\n   $pyt --rerun\n\nThings to be aware of\n~~~~~~~~~~~~~~~~~~~~~\n\npyt uses Python’s PEP 8 style conventions\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n``pyt`` uses `Python’s code styling\nconventions <http://www.python.org/dev/peps/pep-0008/>`__ to decide what\nis the module and class, so, given input like this:\n\n::\n\n   $ pyt foo.bar.Baz.che\n\n``pyt`` will consider ``foo.bar`` to be the module, ``Baz`` to be a\nclass (because it starts with a capital letter), and ``che`` to be a\nmethod (since it comes after the class).\n\nLikewise, ``pyt`` uses unittest conventions, so a test module should end\nwith ``_test`` (eg, ``foo.bar_test``) or start with test (eg,\n``test_foo.py``) and a TestCase class should extend\n``unittest.TestCase``, and test methods should start with ``test_`` (eg,\n``test_che``).\n\nVague input can cause pyt to run more tests than you expect\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSo if you have something like this:\n\n::\n\n   project/\n     __init__.py\n     user.py\n     foo/\n       __init__.py\n       user.py\n     tests/\n       __init__.py\n       user_test.py\n       foo/\n         __init__.py\n         user_test.py\n\nAnd you want to run tests for ``foo.user`` and you run:\n\n::\n\n   $ pyt user\n\nit will run both ``tests/user_test`` and ``tests.foo.user_test``, the\nsolution is to just be more verbose when you have to be:\n\n::\n\n   $ pyt foo.user\n\nEnvironment Variables\n^^^^^^^^^^^^^^^^^^^^^\n\nIf you are running the tests within pyt, you might notice there is an\nenvironment variable ``PYT_TEST_COUNT`` that contains the count of how\nmany tests pyt found to run.\n\nInstallation\n------------\n\nUse ``pip``:\n\n::\n\n   $ pip install pyt\n\nYou can also get it directly from the repo:\n\n::\n\n   $ pip install --upgrade git+https://github.com/Jaymon/pyt#egg=pyt\n\nIf you install pyt using Python 3 it can also be invoked using the\n``pyt3`` command:\n\n::\n\n   $ pyt3 --help\n\nLikewise, Python 2 installs a ``pyt2`` command:\n\n::\n\n   $ pyt2 --help\n\nTesting\n-------\n\nTesting in 2.7 on most systems:\n\n::\n\n   $ python -m unittest pyt_test\n\nTesting in 3.5 on MacOS:\n\n::\n\n   $ python3.5 -m unittest pyt_test\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "http://github.com/Jaymon/pyt",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyt",
            "package_url": "https://pypi.org/project/pyt/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyt/",
            "project_urls": {
               "Homepage": "http://github.com/Jaymon/pyt"
            },
            "release_url": "https://pypi.org/project/pyt/1.0.5/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "easily run python unit tests",
            "version": "1.0.5",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Bradley Odell",
            "author_email": "btodell@hotmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Environment :: Console",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
               "Natural Language :: English",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 2.6",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Topic :: Software Development :: Build Tools"
            ],
            "description": "pyz\n===\n\n*Packages all source code and dependencies into a single Python zip application.*\n\nSummary\n-------\n\nDeploying a Python application any larger than a single file is\ncumbersome - this library aims to solve that problem.\n\nPython has been able to run code from within a zip file since version\n2.6. Python 3.5 introduced the `zipapp <https://docs.python.org/3/library/zipapp.html>`__ module\nwhich aims to simplify the process of creating a zip application.\nHowever, **zipapp** isn't a complete solution to the problem - it\ndoesn't handle dependencies and it doesn't include certain extra\nfeatures that this library provides.\n\nThis library allows you to bundle all of your Python code **AND** your\ndependencies into a single Python zip application file.\n\nNote: The dependency bundling feature is not implemented yet, but it is\nin the works!\n\nFeatures\n--------\n\n1. Bundle all Python source code with fine-grained control over included files.\n2. Ability to \"unixify\" the output application by prepending a customizable\n   `shebang <https://en.wikipedia.org/wiki/Shebang_(Unix)>`__.\n3. Python interpreter version check - display a friendly notice instead\n   of a Python exception if the user runs your application using an\n   unsupported Python version.\n\nPlanned\n-------\n\n1. Automatically identify dependencies and package them accordingly.\n",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "https://github.com/BTOdell/pyz/archive/0.4.3.tar.gz",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/BTOdell/pyz",
            "keywords": "pyz zip app zipapp bundle dependencies library",
            "license": "GPLv3",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyz",
            "package_url": "https://pypi.org/project/pyz/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyz/",
            "project_urls": {
               "Download": "https://github.com/BTOdell/pyz/archive/0.4.3.tar.gz",
               "Homepage": "https://github.com/BTOdell/pyz"
            },
            "release_url": "https://pypi.org/project/pyz/0.4.3/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Packages all source code and dependencies into a single Python zip application.",
            "version": "0.4.3",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Val Neekman",
            "author_email": "info@neekware.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 3 - Alpha",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Operating System :: POSIX",
               "Programming Language :: Python",
               "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description": "AWSLI\n====================\n\n**Amazon Web Services Line Interpreter**\n\n**Author:** Val Neekman [ info@neekware.com, @vneekman ]\n\nOverview\n========\n\nA Line Interpreter for Amazon Web Services.\n\nHow to install\n==================\n\n    1. easy_install awsli\n    2. pip install awsli\n    3. git clone http://github.com/un33k/awsli\n        a. cd awsli\n        b. run python setup.py\n    4. wget https://github.com/un33k/awsli/zipball/master\n        a. unzip the downloaded file\n        b. cd into awsli-* directory\n        c. run python setup.py\n\nHow to use\n=================\n\n``Usage``\n\n``Note:``\n\nRunning the tests\n=================\n\nTo run the tests against the current environment:\n\n    python test.py\n\nChangelog\n=========\n\n0.1\n-----\n\n* Initial release\n\n\nLicense\n=======\n\nCopyright (c) 2012, Val Neekman\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without \nmodification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this \nlist of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this \nlist of conditions and the following disclaimer in the documentation and/or \nother materials provided with the distribution.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND \nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED \nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE \nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE \nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL \nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR \nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, \nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE \nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/un33k/awsli",
            "keywords": null,
            "license": "BSD",
            "maintainer": null,
            "maintainer_email": null,
            "name": "awsli",
            "package_url": "https://pypi.org/project/awsli/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/awsli/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/un33k/awsli"
            },
            "release_url": "https://pypi.org/project/awsli/0.0.1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "A Line Interpreter for Amazon Web Services",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Armin Ronacher",
            "author_email": "armin.ronacher@active-4.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Environment :: Web Environment",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
               "Topic :: Software Development :: Libraries :: Python Modules",
               "Topic :: Text Processing :: Markup :: HTML"
            ],
            "description": "jinja\n~~~~~\n\nJinja is a `sandboxed`_ template engine written in pure Python. It\nprovides a `Django`_ like non-XML syntax and compiles templates into\nexecutable python code. It's basically a combination of Django templates\nand python code.\n\nNutshell\n--------\n\nHere a small example of a Jinja template::\n\n    {% extends 'base.html' %}\n    {% block title %}Memberlist{% endblock %}\n    {% block content %}\n      <ul>\n      {% for user in users %}\n        <li><a href=\"{{ user.url|e }}\">{{ user.username|e }}</a></li>\n      {% endfor %}\n      </ul>\n    {% endblock %}\n\nPhilosophy\n----------\n\nApplication logic is for the controller but don't try to make the life\nfor the template designer too hard by giving him too few functionality.\n\nFor more informations visit the new `jinja webpage`_ and `documentation`_.\n\nNote\n----\n\nThis is the Jinja 1.0 release which is completely incompatible with the\nold \"pre 1.0\" branch. The old branch will still receive security updates\nand bugfixes but the 1.0 branch will be the only version that receives\nsupport.\n\nIf you have an application that uses Jinja 0.9 and won't be updated in\nthe near future the best idea is to ship a Jinja 0.9 checkout together\nwith the application.\n\nThe `Jinja tip`_ is installable via `easy_install` with ``easy_install\nJinja==dev``.\n\n.. _sandboxed: http://en.wikipedia.org/wiki/Sandbox_(computer_security)\n.. _Django: http://www.djangoproject.com/\n.. _jinja webpage: http://jinja.pocoo.org/\n.. _documentation: http://jinja.pocoo.org/documentation/index.html\n.. _Jinja tip: http://dev.pocoo.org/hg/jinja-main/archive/tip.tar.gz#egg=Jinja-dev\n\n\n:copyright: 2007 by Armin Ronacher.\n:license: BSD, see LICENSE for more details.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "http://jinja.pocoo.org/",
            "keywords": "python.templating.engines",
            "license": "BSD",
            "maintainer": null,
            "maintainer_email": null,
            "name": "Jinja",
            "package_url": "https://pypi.org/project/Jinja/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/Jinja/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "http://jinja.pocoo.org/"
            },
            "release_url": "https://pypi.org/project/Jinja/1.2/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "A small but fast and easy to use stand-alone template engine written in pure python.",
            "version": "1.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Hsiaoming Yang",
            "author_email": "me@lepture.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Environment :: Console",
               "Environment :: Web Environment",
               "Framework :: Django",
               "Framework :: Flask",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.5",
               "Programming Language :: Python :: 3.6",
               "Programming Language :: Python :: 3.7",
               "Programming Language :: Python :: 3.8",
               "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
               "Topic :: Internet :: WWW/HTTP :: WSGI :: Application",
               "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description": "Authlib\n=======\n\nThe ultimate Python library in building OAuth and OpenID Connect servers.\nJWS, JWK, JWA, JWT are included.\n\nUseful Links\n------------\n\n1. Homepage: https://authlib.org/\n2. Documentation: https://docs.authlib.org/\n3. Purchase Commercial License: https://authlib.org/plans\n4. Blog: https://blog.authlib.org/\n5. More Repositories: https://github.com/authlib\n6. Twitter: https://twitter.com/authlib\n7. Donate: https://www.patreon.com/lepture\n\nSpecifications\n--------------\n\n- RFC5849: The OAuth 1.0 Protocol\n- RFC6749: The OAuth 2.0 Authorization Framework\n- RFC6750: The OAuth 2.0 Authorization Framework: Bearer Token Usage\n- RFC7009: OAuth 2.0 Token Revocation\n- RFC7515: JSON Web Signature\n- RFC7516: JSON Web Encryption\n- RFC7517: JSON Web Key\n- RFC7518: JSON Web Algorithms\n- RFC7519: JSON Web Token\n- RFC7521: Assertion Framework for OAuth 2.0 Client Authentication and Authorization Grants\n- RFC7523: JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants\n- RFC7591: OAuth 2.0 Dynamic Client Registration Protocol\n- RFC7662: OAuth 2.0 Token Introspection\n- RFC8414: OAuth 2.0 Authorization Server Metadata\n- RFC8628: OAuth 2.0 Device Authorization Grant\n- OpenID Connect 1.0\n- OpenID Connect Discovery 1.0\n\nImplementations\n---------------\n\n- Requests OAuth 1 Session\n- Requests OAuth 2 Session\n- Requests Assertion Session\n- Flask OAuth 1/2 Client\n- Django OAuth 1/2 Client\n- Flask OAuth 1.0 Server\n- Flask OAuth 2.0 Server\n- Flask OpenID Connect 1.0\n- Django OAuth 1.0 Server\n- Django OAuth 2.0 Server\n- Django OpenID Connect 1.0\n\nLicense\n-------\n\nAuthlib is licensed under BSD. Please see LICENSE for licensing details.\n\nIf this license does not fit your company, consider to purchase a commercial\nlicense. Find more information on `Authlib Plans`_.\n\n.. _`Authlib Plans`: https://authlib.org/plans\n\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://authlib.org/",
            "keywords": "",
            "license": "BSD-3-Clause",
            "maintainer": "",
            "maintainer_email": "",
            "name": "Authlib",
            "package_url": "https://pypi.org/project/Authlib/",
            "platform": "any",
            "project_url": "https://pypi.org/project/Authlib/",
            "project_urls": {
               "Blog": "https://blog.authlib.org/",
               "Bug Tracker": "https://github.com/lepture/authlib/issues",
               "Commercial License": "https://authlib.org/plans",
               "Documentation": "https://docs.authlib.org/",
               "Donate": "https://lepture.com/donate",
               "Homepage": "https://authlib.org/",
               "Source Code": "https://github.com/lepture/authlib"
            },
            "release_url": "https://pypi.org/project/Authlib/0.14.3/",
            "requires_dist": [
               "cryptography",
               "requests ; extra == 'client'"
            ],
            "requires_python": "",
            "summary": "The ultimate Python library in building OAuth and OpenID Connect servers.",
            "version": "0.14.3",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Julien Bigot",
            "author_email": "julien.bigot@cea.fr",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Environment :: Console",
               "License :: OSI Approved :: MIT License"
            ],
            "description": "# zpp\n\nThis is zpp, the Z Pre-Processor.\n\nZpp transforms bash in a pre-processor for F90 source files.\nIt offers a set of functions specifically tailored to build clean Fortran90\ninterfaces by generating code for all types, kinds, and array ranks supported by\na given compiler.\n\n## Syntax\n\nZpp files are typically named `*.F90.zpp`.\n\nIn these files, the lines that start with `!$SH` are interpreted as bash lines. \nOther lines are copied as-is, except that variable substitution is operated as\nin a double-quoted string, including bash commands `${VAR}` or `$(command)`.\nIf inside a bash control block (`if`, `for`, etc.), the output generation obeys\nthe control statement.\n\nFor example, this code:\n```\n!$SH for GREETED in world universe multiverse ; do\nprint *, \"Hello ${GREETED}\"\n!$SH done\n```\n\nWould produce the following result:\n```\nprint *, \"Hello world\"\nprint *, \"Hello universe\"\nprint *, \"Hello multiverse\"\n```\n\n### Support functions\n\nPredefined bash functions, variable and code can be provided in `.zpp.sh` files\nthat can be included with `#!SH source <filename>.zpp.sh`.\n\n**Beware**: a file NEEDs to have the `.zpp.sh` extension to be included from\nzpp.\n\nZpp provides a standard library of functions tailored to build clean Fortran90\ninterfaces by generating code for all types, kinds, and array ranks supported by\na given compiler.\n\n#### zpp_str_repeat\n\nFound in `base.zpp.sh`\n\nOutputs a string multiple times.\n\nParameters:\n1. the string to Repeat\n2. the lower bound of the iterations (inclusive)\n3. the upper bound of the iterations (inclusive)\n4. the string separator\n5. the string starter\n6. the string ender\n\nRepeats string `$1` (`$3`-`$2`+1) times, separated by string `$4` inside `$5`\n`$6`.\n* If the number of repetitions is negative, the result is empty.\n* If `$1` contains the '@N' substring, it will be replaced by the iteration\n  number (from `$2` to `$3`).\n\nexample:\n```\n#!SH source base.zpp.sh\nzpp_str_repeat v@N 5 7 '...' '<<' '>>'\nzpp_str_repeat w@N 1 1 '...' '<<' '>>'\nzpp_str_repeat x@N 1 0 '...' '<<' '>>'\n```\noutput:\n```\n<<v5...v6...v7>>\n<<w1>>\n```\n\n#### zpp_str_repeat_reverse\n\nFound in `base.zpp.sh`\n\nOutputs a string multiple times in reverse order.\n\nParameters:\n1. the string to Repeat\n2. the upper bound of the iterations (inclusive)\n3. the lower bound of the iterations (inclusive)\n4. the string separator\n5. the string starter\n6. the string ender\n\nRepeats string `$1` (`$2`-`$3`+1) times, separated by string `$4` inside `$5`\n`$6`.\n* If the number of repetitions is negative, the result is empty.\n* If `$1` contains the '@N' substring, it will be replaced by the iteration\n  number (from `$2` to `$3`, i.e. upper to lower).\n\nexample:\n```\n#!SH source base.zpp.sh\nzpp_str_repeat_reverse v@N 5 7 '...' '<<' '>>'\nzpp_str_repeat_reverse w@N 1 1 '...' '<<' '>>'\nzpp_str_repeat_reverse x@N 1 0 '...' '<<' '>>'\n```\noutput:\n```\n<<v7...v6...v5>>\n<<w1>>\n```\n\n#### ZPP_FORT_TYPES\n\nFound in `fortran.zpp.sh`\n\nThe list of types supported by the fortran compiler as zpp:typeIDs.\n\nThe compiler ID should be provided in `ZPP_CONFIG` as `config.<ID>`.\nThe supported predefined IDs are: `Gnu`, `Intel`, `PGI` and `XL`.\nYou can also provide definitions for an additional compiler by defining\n`ZPP_FORT_TYPES` in a file named `config.<ID>.zpp.sh`.\n\nIf you use cmake, it will automatically generate such a file for your compiler\nand define  `ZPP_CONFIG` so you don't have to handle it.\n\n### zpp_fort_array_desc\n\nFound in `fortran.zpp.sh`\n\nOutputs an assumed shaped array descriptor of the provided size.\n\nParameters:\n1. the size of the assumed shaped array\n\nexample:\n```\n#!SH source fortran.zpp.sh\ninteger:: scalar$(zpp_fort_array_desc 0)\ninteger:: array1d$(zpp_fort_array_desc 1)\ninteger:: array2d$(zpp_fort_array_desc 2)\n```\noutput:\n```\ninteger:: scalar\ninteger:: array1d(:)\ninteger:: array2d(:,:)\n```\n\n### zpp_fort_ptype\n\nFound in `fortran.zpp.sh`\n\nOutputs the type associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\nexample:\n```\n#!SH source fortran.zpp.sh\n!$SH for T in ${ZPP_FORT_TYPES} ; do\n$(zpp_fort_ptype $1)\n!$SH done\n```\nexample output:\n```\nCHARACTER\nCOMPLEX\nCOMPLEX\nINTEGER\nINTEGER\nINTEGER\nINTEGER\nLOGICAL\nREAL\nREAL\n```\n\n### zpp_fort_kind\n\nFound in `fortran.zpp.sh`\n\nOutputs the kind associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\nexample:\n```\n#!SH source fortran.zpp.sh\n!$SH for T in ${ZPP_FORT_TYPES} ; do\n$(zpp_fort_kind $1)\n!$SH done\n```\nexample output:\n```\n1\n4\n8\n1\n2\n4\n8\n1\n4\n8\n```\n\n### zpp_fort_type\n\nFound in `fortran.zpp.sh`\n\nOutputs the full type (with kind included) associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n2. additional attributes for the type\n\nexample:\n```\n#!SH source fortran.zpp.sh\n!$SH for T in ${MY_CHAR_TYPES} ; do\n$(zpp_fort_type $1)\n$(zpp_fort_type $1 \"len=5\")\n!$SH done\n```\nexample output:\n```\nCHARACTER(KIND=1)\nCHARACTER(KIND=1,len=5)\n```\n\n### zpp_fort_sizeof\n\nFound in `fortran.zpp.sh`\n\nOutputs the size in bits associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\n### zpp_fort_io_format\n\nFound in `fortran.zpp.sh`\n\nOutputs an IO descriptor suitable for a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\n### ZPP_HDF5F_TYPES\n\nFound in `hdf5_fortran.zpp.sh`\n\nA list of zpp:typeIDs supported by HDF5.\n\n### hdf5_constant\n\nFound in `hdf5_fortran.zpp.sh`\n\nOutputs the HDF5 type constant associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\nexample:\n```\n#!SH source hdf5_fortran.zpp.sh\n!$SH for T in ${ZPP_HDF5F_TYPES} ; do\n$(hdf5_constant $1)\n!$SH done\n```\nexample output:\n```\nH5T_NATIVE_INTEGER\nH5T_NATIVE_REAL\nH5T_NATIVE_REAL\nH5T_NATIVE_CHARACTER\n```\n\n\n## Command-line interface\n\nZpp basic usage is as follow:\n```\nUsage: zpp [Options...] <source> [<destination>]\n  use `zpp -h' for more info\n\nPreprocesses BASH in-line commands in a source file\n\nOptions:\n  --version        show program's version number and exit\n  -h, --help       show this help message and exit\n  -I DIR           Add DIR to search list for source directives\n  -o FILE          Place the preprocessed code in file FILE.\n  -D OPTION=VALUE  Set the value of OPTION to VALUE\n```\n\n## CMake interface\n\nSupport is provided for using zpp from CMake based projects, but you can use\nit from plain Makefiles too.\n\nThere are two ways you can use zpp from your CMake project:\n* with `add_subdirectory`: include zpp in your project and use it directly from\n  there,\n* with `find_package`: install zpp and use it as an external dependency of your\n  project.\n\n#### CMake subdirectory usage\n\nUsing zpp with `add_subdirectory` is very simple.\nJust copy the `zpp` directory in your source and point to it with\n`add_subdirectory(zpp)`.\nThe `zpp_preprocess` then becomes available to process zpp files.\n\nThis is demonstrated in `example/cmake_subdirectory`.\n\n#### CMake find usage\n\nUsing zpp with `find_package` is no more complex.\nIf zpp is installed, just add a `find_package(zpp REQUIRED)`.\nThe `zpp_preprocess` then becomes available to process zpp files.\n\nThis is demonstrated in `example/cmake_find`.\n\n## GMake usage\n\nUsing zpp from a GNU Makefile is slightly less powerful than from CMake.\nThe types and kinds supported by the Fortran compiler will not be automatically\ndetected.\nPredefined lists of supported types for well known compilers are provided\ninstead.\n\nTo use zpp from a Makefile, include the `share/zpp/zpp.mk` file (either from an\ninstalled location or from a subdirectory in your project).\nYou can then set the `zpp_COMPILER_ID` variable to the compiler you use and\n`.F90` files will be automatically generated from their `.F90.zpp` equivalent.\nThe `zppFLAGS` variable is automatically passed to zpp similarly to `CFLAGS` or\n`CXXFLAGS` for `cc` and `cxx`.\n\nThis is demonstrated in `example/cmake_makefile`.\n\n## Installation\n\nZpp can be installed using the usual python way with `setup.py`.\n```\n./setup.py --help\n```\n\nThe cmake approach is deprecated.\n\n## FAQ\n\nQ. Isn't zpp redundant with assumed type parameters?\n\nA.\nThe assumed type parameters functionality allows to implement part of what can\nbe done with zpp (support for all kinds of a type). However as of 2013 it was\nnot correctly supported on most compilers installed on the supercomputers.\n\nIn addition, many things can be done with zpp but not with assumed type\nparameters, such as support for variable array rank or small variations of the\ncode depending on the kind.\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "bash Fortran pre-processor",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "zpp",
            "package_url": "https://pypi.org/project/zpp/",
            "platform": "",
            "project_url": "https://pypi.org/project/zpp/",
            "project_urls": {
               "Source Code": "https://github.com/pdidev/zpp/"
            },
            "release_url": "https://pypi.org/project/zpp/1.0.4/",
            "requires_dist": [
               "setuptools"
            ],
            "requires_python": "",
            "summary": "a Bash Pre-Processor for Fortran. ZPP is useful in order to build clean Fortran90 interfaces. It allows to generate Fortran code for all types, kinds, and array ranks supported by the compiler.",
            "version": "1.0.4",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Dheepak Krishnamurthy",
            "author_email": "kdheepak89@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# zip [![](https://travis-ci.org/kdheepak/zip.svg?branch=master)](https://travis-ci.org/kdheepak/zip/branches)\n\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/kdheepak/zip",
            "keywords": "",
            "license": "Revised BSD License",
            "maintainer": "",
            "maintainer_email": "",
            "name": "zip",
            "package_url": "https://pypi.org/project/zip/",
            "platform": "",
            "project_url": "https://pypi.org/project/zip/",
            "project_urls": {
               "Homepage": "https://github.com/kdheepak/zip"
            },
            "release_url": "https://pypi.org/project/zip/0.0.2/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Intel Corporation",
            "author_email": "scripting@intel.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "Intended Audience :: Education",
               "Intended Audience :: Other Audience",
               "Intended Audience :: Science/Research",
               "Intended Audience :: System Administrators",
               "License :: Other/Proprietary License",
               "Operating System :: MacOS",
               "Operating System :: Microsoft :: Windows",
               "Operating System :: POSIX",
               "Operating System :: Unix",
               "Topic :: Software Development :: Libraries"
            ],
            "description": "Intel(R) Performance Primitives provides developers with high-quality, production-ready, low-level building blocks for image processing, signal processing, and data processing (data compression and decompression, and cryptography) applications.\n\nOne of many Intel(R) accelerated Python packages and performance library runtimes available on [PyPI](https://software.intel.com/en-us/articles/installing-the-intel-distribution-for-python-and-intel-performance-libraries-with-pip-and), and as part of [Intel(R) Distribution for Python](https://software.intel.com/en-us/distribution-for-python).\n\nFor latest release updates and security notifications, please [subscribe](https://software.intel.com/en-us/forums/intel-distribution-for-python) to the Intel(R) Distribution for Python Community forum.\n\nFree to use and redistribute pursuant to the [Intel Simplified Software License](https://software.intel.com/en-us/license/intel-simplified-software-license).\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://software.intel.com/en-us/articles/empowering-science-with-high-performance-python",
            "keywords": "",
            "license": "Proprietary - Intel",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ipp",
            "package_url": "https://pypi.org/project/ipp/",
            "platform": "",
            "project_url": "https://pypi.org/project/ipp/",
            "project_urls": {
               "Homepage": "https://software.intel.com/en-us/articles/empowering-science-with-high-performance-python"
            },
            "release_url": "https://pypi.org/project/ipp/2019.4.243/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Intel(R) Performance Primitives",
            "version": "2019.4.243",
            "yanked": false,
            "yanked_reason": null
         }
      ],
      "pyyaml": [
         {
            "author": "Gabriel Alves",
            "author_email": "gabriel.alves@pickcells.bio",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# sx\n#### Framework to manage gRPC-based microservices application",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "https://github.com/itsmealves/sx/releases/download/0.6.0/sx-0.6.0.tar.gz",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/itsmealves/sx",
            "keywords": "sx microservices rpc grpc Framework",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "sx",
            "package_url": "https://pypi.org/project/sx/",
            "platform": "",
            "project_url": "https://pypi.org/project/sx/",
            "project_urls": {
               "Download": "https://github.com/itsmealves/sx/releases/download/0.6.0/sx-0.6.0.tar.gz",
               "Homepage": "https://github.com/itsmealves/sx"
            },
            "release_url": "https://pypi.org/project/sx/0.6.0/",
            "requires_dist": null,
            "requires_python": ">=3.5",
            "summary": "Framework to manage gRPC-based microservices application",
            "version": "0.6.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "chrysn",
            "author_email": "chrysn@fsfe.org",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 3 - Alpha",
               "Intended Audience :: Education",
               "Intended Audience :: Science/Research",
               "License :: OSI Approved :: GNU General Public License (GPL)"
            ],
            "description": "UNKNOWN",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "UNKNOWN",
            "keywords": null,
            "license": "GPL",
            "maintainer": null,
            "maintainer_email": null,
            "name": "si",
            "package_url": "https://pypi.org/project/si/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/si/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "UNKNOWN"
            },
            "release_url": "https://pypi.org/project/si/0.1.1-1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Module to represent SI units",
            "version": "0.1.1-1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "leesoar",
            "author_email": "secure@tom.com",
            "bugtrack_url": null,
            "classifiers": [
               "License :: OSI Approved :: MIT License",
               "Programming Language :: Python :: 3.5",
               "Programming Language :: Python :: 3.6",
               "Programming Language :: Python :: 3.7",
               "Programming Language :: Python :: Implementation :: CPython",
               "Programming Language :: Python :: Implementation :: PyPy"
            ],
            "description": "\nDevelop soon\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://leesoar.com",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ida",
            "package_url": "https://pypi.org/project/ida/",
            "platform": "",
            "project_url": "https://pypi.org/project/ida/",
            "project_urls": {
               "Homepage": "https://leesoar.com"
            },
            "release_url": "https://pypi.org/project/ida/0.0.1/",
            "requires_dist": null,
            "requires_python": ">=3.3.0",
            "summary": "Develop soon",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Xavier Bruhiere",
            "author_email": "xavier.bruhiere@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 2 - Pre-Alpha",
               "Intended Audience :: Science/Research",
               "License :: OSI Approved :: Apache Software License",
               "Natural Language :: English",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2.7",
               "Topic :: Software Development",
               "Topic :: System :: Shells"
            ],
            "description": "python library DNA\n==================\n\n[![Coverage Status](https://coveralls.io/repos/hivetech/dna/badge.png)](https://coveralls.io/r/hivetech/dna)\n\n> Generic python utilities\n\nInstallation\n------------\n\n```console\npip install dna\n```\n\nExample\n-----\n\n```python\nimport dna.utils as utils\nimport dna.logger as logger\n\nlog_setup = logger.setup(level='info', filename='app.log')\nlog = logger.logger(__name__)\nwith log_setup.applicationbound():\n\n    log.info('hello', where='world')\n\n    useless_id = utils.generate_unique_id()\n    useless_name = utils.generate_random_name()\n\n    if utils.docker_check() and utils.is_running('ipyhon'):\n\n        print utils.Version('0.4.1')\n\n        module = utils.dynamic_import('dna.settings', 'LOG')\n        print utils.emphasis(module, align=False)\n\n        print utils.self_ip()\n```",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/hivetech/dna",
            "keywords": null,
            "license": "Apache 2.0",
            "maintainer": null,
            "maintainer_email": null,
            "name": "dna",
            "package_url": "https://pypi.org/project/dna/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/dna/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/hivetech/dna"
            },
            "release_url": "https://pypi.org/project/dna/0.0.7/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Generic python utilities",
            "version": "0.0.7",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Christopher Brown",
            "author_email": "io@henrian.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 2 - Pre-Alpha",
               "License :: OSI Approved :: MIT License",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.6",
               "Programming Language :: Python :: 2.7",
               "Topic :: Software Development :: Libraries :: Python Modules",
               "Topic :: System :: Archiving :: Packaging",
               "Topic :: System :: Filesystems"
            ],
            "description": "Python (package) installation\n-----------------------------\n\nGetting started from `PyPI <https://pypi.python.org/pypi/pi/>`__:\n\n::\n\n    easy_install pi\n\n`Whence easy\\_install? <#setuptools>`__\n\nCommands\n--------\n\n-  Uninstall package named \"pip\":\n\n   ::\n\n       pi uninstall pip\n\n-  Install package named \"filesequence\":\n\n   ::\n\n       pi install filesequence\n\n-  List paths that Python searches for imported modules:\n\n   ::\n\n       pi paths\n\n-  List installed packages:\n\n   ::\n\n       pi list\n\nTesting\n-------\n\nContinuous integration:\n\n|Travis CI Build Status|\n\nOr run tests locally:\n\n::\n\n    nosetests --with-doctest\n\nRelated\n~~~~~~~\n\n-  http://guide.python-distribute.org/creation.html\n-  `distribute/pkg\\_resources\n   docs <http://pythonhosted.org/distribute/pkg_resources.html>`__\n-  standard library\n   ```site`` <http://docs.python.org/2/library/site.html>`__\n-  standard library `environment\n   variables <http://docs.python.org/2/using/cmdline.html#environment-variables>`__\n\nSetuptools\n~~~~~~~~~~\n\n``pi`` does not yet completely replace\n`setuptools <https://pypi.python.org/pypi/setuptools>`__. You may need\nto install it first:\n\n+----------+-----------------------------------------+\n| Distro   | Package manager command                 |\n+==========+=========================================+\n| Ubuntu   | ``apt-get install python-setuptools``   |\n+----------+-----------------------------------------+\n| Mac      | built-in                                |\n+----------+-----------------------------------------+\n| Arch     | ``pacman -S python-setuptools``         |\n+----------+-----------------------------------------+\n| CentOS   | ``yum install python-setuptools``       |\n+----------+-----------------------------------------+\n\nLicense\n-------\n\nCopyright (c) 2013 Christopher Brown. `MIT\nLicensed <https://raw.github.com/chbrown/pi/master/LICENSE>`__.\n\n.. |Travis CI Build Status| image:: https://travis-ci.org/chbrown/pi.png?branch=master\n   :target: https://travis-ci.org/chbrown/pi",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/chbrown/pi",
            "keywords": null,
            "license": "Copyright (c) 2013 Christopher Brown\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.",
            "maintainer": null,
            "maintainer_email": null,
            "name": "pi",
            "package_url": "https://pypi.org/project/pi/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/pi/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/chbrown/pi"
            },
            "release_url": "https://pypi.org/project/pi/0.1.2/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Simpler python package installation",
            "version": "0.1.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ip",
            "package_url": "https://pypi.org/project/ip/",
            "platform": "",
            "project_url": "https://pypi.org/project/ip/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/ip/0.0.1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Vitalii Vanovschi",
            "author_email": "support@parallelpython.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Natural Language :: English",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Topic :: Software Development",
               "Topic :: System :: Distributed Computing"
            ],
            "description": "Parallel Python module (PP) provides an easy and efficient way to create parallel-enabled applications for SMP computers and clusters. PP module features cross-platform portability and dynamic load balancing. Thus application written with PP will parallelize efficiently even on heterogeneous and multi-platform clusters (including clusters running other application with variable CPU loads). Visit http://www.parallelpython.com for further information.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "http://www.parallelpython.com/downloads/pp/pp-1.6.5.zip",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "http://www.parallelpython.com",
            "keywords": null,
            "license": "BSD-like",
            "maintainer": null,
            "maintainer_email": null,
            "name": "pp",
            "package_url": "https://pypi.org/project/pp/",
            "platform": "Windows,Linux,Unix",
            "project_url": "https://pypi.org/project/pp/",
            "project_urls": {
               "Download": "http://www.parallelpython.com/downloads/pp/pp-1.6.5.zip",
               "Homepage": "http://www.parallelpython.com"
            },
            "release_url": "https://pypi.org/project/pp/1.6.5/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Parallel and distributed programming for Python",
            "version": "1.6.5",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Marcus Donnelly",
            "author_email": "marcus.k.donnelly@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "Intended Audience :: Science/Research",
               "License :: OSI Approved :: BSD License",
               "Programming Language :: Python :: 3",
               "Topic :: Scientific/Engineering"
            ],
            "description": "",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "Oceanography,Utilities",
            "license": "BSD",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ocutils",
            "package_url": "https://pypi.org/project/ocutils/",
            "platform": "",
            "project_url": "https://pypi.org/project/ocutils/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/ocutils/1.1.1/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Utility functions for oceanography related work",
            "version": "1.1.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Kiana Alessandra V. Villaera",
            "author_email": "kiana.villaera@senti.com.ph",
            "bugtrack_url": null,
            "classifiers": [
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 3"
            ],
            "description": "Contains everything you might need to perform essential data center functions\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/K-Winkles/dcutils",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dcutils",
            "package_url": "https://pypi.org/project/dcutils/",
            "platform": "",
            "project_url": "https://pypi.org/project/dcutils/",
            "project_urls": {
               "Homepage": "https://github.com/K-Winkles/dcutils"
            },
            "release_url": "https://pypi.org/project/dcutils/0.6/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "A simple package for data center utilities",
            "version": "0.6",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Mike Kazantsev",
            "author_email": "mk.fraggod@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Intended Audience :: Developers",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3.5",
               "Topic :: Software Development",
               "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description": "pretty-yaml (or pyaml)\n======================\n\nPyYAML-based python module to produce pretty and readable YAML-serialized data.\n\nThis module is for serialization only, see `ruamel.yaml`_ module for literate\nYAML parsing (keeping track of comments, spacing, line/column numbers of values, etc).\n\n[note: to dump stuff parsed by ruamel.yaml with this module, use only ``YAML(typ='safe')`` there]\n\n.. contents::\n  :backlinks: none\n\n\nWarning\n-------\n\nPrime goal of this module is to produce human-readable output that can be easily\nmanipulated and re-used, but maybe with some occasional caveats.\n\nOne good example of such \"caveat\" is that e.g. ``{'foo': '123'}`` will serialize\nto ``foo: 123``, which for PyYAML would be a bug, as 123 will then be read back\nas an integer from that, but here it's a feature.\n\nSo please do not rely on the thing to produce output that can always be\ndeserialized exactly to what was exported, at least - use PyYAML (e.g. with\noptions from the next section) for that.\n\n\nWhat this module does and why\n-----------------------------\n\nYAML is generally nice and easy format to read *if* it was written by humans.\n\nPyYAML can a do fairly decent job of making stuff readable, and the best\ncombination of parameters for such output that I've seen so far is probably this one::\n\n  >>> m = [123, 45.67, {1: None, 2: False}, u'some text']\n  >>> data = dict(a=u'asldnsa\\nasldpáknsa\\n', b=u'whatever text', ma=m, mb=m)\n  >>> yaml.safe_dump(data, sys.stdout, allow_unicode=True, default_flow_style=False)\n  a: 'asldnsa\n\n    asldpáknsa\n\n    '\n  b: whatever text\n  ma: &id001\n  - 123\n  - 45.67\n  - 1: null\n    2: false\n  - some text\n  mb: *id001\n\npyaml tries to improve on that a bit, with the following tweaks:\n\n* Most human-friendly representation options in PyYAML (that I know of) get\n  picked as defaults.\n\n* Does not dump \"null\" values, if possible, replacing these with just empty\n  strings, which have the same meaning but reduce visual clutter and are easier\n  to edit.\n\n* Dicts, sets, OrderedDicts, defaultdicts, namedtuples, etc are representable\n  and get sorted on output (OrderedDicts and namedtuples keep their ordering),\n  so that output would be as diff-friendly as possible, and not arbitrarily\n  depend on python internals.\n\n  It appears that at least recent PyYAML versions also do such sorting for\n  python dicts.\n\n* List items get indented, as they should be.\n\n* bytestrings that can't be auto-converted to unicode raise error, as yaml has\n  no \"binary bytes\" (i.e. unix strings) type.\n\n* Attempt is made to pick more readable string representation styles, depending\n  on the value, e.g.::\n\n    >>> yaml.safe_dump(cert, sys.stdout)\n    cert: '-----BEGIN CERTIFICATE-----\n\n      MIIH3jCCBcagAwIBAgIJAJi7AjQ4Z87OMA0GCSqGSIb3DQEBCwUAMIHBMRcwFQYD\n\n      VQQKFA52YWxlcm9uLm5vX2lzcDEeMBwGA1UECxMVQ2VydGlmaWNhdGUgQXV0aG9y\n    ...\n\n    >>> pyaml.p(cert):\n    cert: |\n      -----BEGIN CERTIFICATE-----\n      MIIH3jCCBcagAwIBAgIJAJi7AjQ4Z87OMA0GCSqGSIb3DQEBCwUAMIHBMRcwFQYD\n      VQQKFA52YWxlcm9uLm5vX2lzcDEeMBwGA1UECxMVQ2VydGlmaWNhdGUgQXV0aG9y\n    ...\n\n* \"force_embed\" option to avoid having &id stuff scattered all over the output\n  (which might be beneficial in some cases, hence the option).\n\n* \"&id\" anchors, if used, get labels from the keys they get attached to,\n  not just use meaningless enumerators.\n\n* \"string_val_style\" option to only apply to strings that are values, not keys,\n  i.e::\n\n    >>> pyaml.p(data, string_val_style='\"')\n    key: \"value\\nasldpáknsa\\n\"\n    >>> yaml.safe_dump(data, sys.stdout, allow_unicode=True, default_style='\"')\n    \"key\": \"value\\nasldpáknsa\\n\"\n\n* \"sort_dicts=False\" option to leave dict item ordering to python, and not\n  force-sort them in yaml output, which can be important for python 3.6+ where\n  they retain ordering info.\n\n* Has an option to add vertical spacing (empty lines) between keys on different\n  depths, to make output much more seekable.\n\nResult for the (rather meaningless) example above (without any additional\ntweaks)::\n\n  >>> pyaml.p(data)\n  a: |\n    asldnsa\n    asldpáknsa\n  b: 'whatever text'\n  ma: &ma\n    - 123\n    - 45.67\n    - 1:\n      2: false\n    - 'some text'\n  mb: *ma\n\n----------\n\nExtended example::\n\n  >>> pyaml.dump(conf, sys.stdout, vspacing=[2, 1]):\n  destination:\n\n    encoding:\n      xz:\n        enabled: true\n        min_size: 5120\n        options:\n        path_filter:\n          - \\.(gz|bz2|t[gb]z2?|xz|lzma|7z|zip|rar)$\n          - \\.(rpm|deb|iso)$\n          - \\.(jpe?g|gif|png|mov|avi|ogg|mkv|webm|mp[34g]|flv|flac|ape|pdf|djvu)$\n          - \\.(sqlite3?|fossil|fsl)$\n          - \\.git/objects/[0-9a-f]+/[0-9a-f]+$\n\n    result:\n      append_to_file:\n      append_to_lafs_dir:\n      print_to_stdout: true\n\n    url: http://localhost:3456/uri\n\n\n  filter:\n    - /(CVS|RCS|SCCS|_darcs|\\{arch\\})/$\n    - /\\.(git|hg|bzr|svn|cvs)(/|ignore|attributes|tags)?$\n    - /=(RELEASE-ID|meta-update|update)$\n\n\n  http:\n\n    ca_certs_files: /etc/ssl/certs/ca-certificates.crt\n\n    debug_requests: false\n\n    request_pool_options:\n      cachedConnectionTimeout: 600\n      maxPersistentPerHost: 10\n      retryAutomatically: true\n\n\n  logging:\n\n    formatters:\n      basic:\n        datefmt: '%Y-%m-%d %H:%M:%S'\n        format: '%(asctime)s :: %(name)s :: %(levelname)s: %(message)s'\n\n    handlers:\n      console:\n        class: logging.StreamHandler\n        formatter: basic\n        level: custom\n        stream: ext://sys.stderr\n\n    loggers:\n      twisted:\n        handlers:\n          - console\n        level: 0\n\n    root:\n      handlers:\n        - console\n      level: custom\n\nNote that unless there are many moderately wide and deep trees of data, which\nare expected to be read and edited by people, it might be preferrable to\ndirectly use PyYAML regardless, as it won't introduce another (rather pointless\nin that case) dependency and a point of failure.\n\n\nSome Tricks\n-----------\n\n* Pretty-print any yaml or json (yaml subset) file from the shell::\n\n    % python -m pyaml /path/to/some/file.yaml\n    % curl -s https://www.githubstatus.com/api/v2/summary.json | python -m pyaml\n\n* Process and replace json/yaml file in-place::\n\n    % python -m pyaml -r file-with-json.data\n\n* Easier \"debug printf\" for more complex data (all funcs below are aliases to\n  same thing)::\n\n    pyaml.p(stuff)\n    pyaml.pprint(my_data)\n    pyaml.pprint('----- HOW DOES THAT BREAKS!?!?', input_data, some_var, more_stuff)\n    pyaml.print(data, file=sys.stderr) # needs \"from __future__ import print_function\"\n\n* Force all string values to a certain style (see info on these in\n  `PyYAML docs`_)::\n\n    pyaml.dump(many_weird_strings, string_val_style='|')\n    pyaml.dump(multiline_words, string_val_style='>')\n    pyaml.dump(no_want_quotes, string_val_style='plain')\n\n  Using ``pyaml.add_representer()`` (note \\*p\\*yaml) as suggested in\n  `this SO thread`_ (or `github-issue-7`_) should also work.\n\n* Control indent and width of the results::\n\n    pyaml.dump(wide_and_deep, indent=4, width=120)\n\n  These are actually keywords for PyYAML Emitter (passed to it from Dumper),\n  see more info on these in `PyYAML docs`_.\n\n* Dump multiple yaml documents into a file: ``pyaml.dump_all([data1, data2, data3], dst_file)``\n\n  explicit_start=True is implied, unless explicit_start=False is passed.\n\n.. _PyYAML docs: http://pyyaml.org/wiki/PyYAMLDocumentation#Scalars\n.. _this SO thread: http://stackoverflow.com/a/7445560\n.. _github-issue-7: https://github.com/mk-fg/pretty-yaml/issues/7\n\n\nInstallation\n------------\n\nIt's a regular package for Python (3.x or 2.x).\n\nModule uses PyYAML_ for processing of the actual YAML files and should pull it\nin as a dependency.\n\nDependency on unidecode_ module is optional and should only be necessary if\nsame-id objects or recursion is used within serialized data.\n\nBe sure to use python3/python2, pip3/pip2, easy_install-... binaries below,\nbased on which python version you want to install the module for, if you have\nseveral on the system (as is norm these days for py2-py3 transition).\n\nUsing pip_ is the best way::\n\n  % pip install pyaml\n\n(add --user option to install into $HOME for current user only)\n\nOr, if you don't have \"pip\" command::\n\n  % python -m ensurepip\n  % python -m pip install --upgrade pip\n  % python -m pip install pyaml\n\n(same suggestion wrt \"install --user\" as above)\n\nOn a very old systems, one of these might work::\n\n  % curl https://bootstrap.pypa.io/get-pip.py | python\n  % pip install pyaml\n\n  % easy_install pyaml\n\n  % git clone --depth=1 https://github.com/mk-fg/pretty-yaml\n  % cd pretty-yaml\n  % python setup.py install\n\n(all of install-commands here also have --user option,\nsee also `pip docs \"installing\" section`_)\n\nCurrent-git version can be installed like this::\n\n  % pip install 'git+https://github.com/mk-fg/pretty-yaml#egg=pyaml'\n\nNote that to install stuff to system-wide PATH and site-packages (without\n--user), elevated privileges (i.e. root and su/sudo) are often required.\n\nUse \"...install --user\", `~/.pydistutils.cfg`_ or virtualenv_ to do unprivileged\ninstalls into custom paths.\n\nMore info on python packaging can be found at `packaging.python.org`_.\n\n.. _ruamel.yaml: https://bitbucket.org/ruamel/yaml/\n.. _PyYAML: http://pyyaml.org/\n.. _unidecode: http://pypi.python.org/pypi/Unidecode\n.. _pip: http://pip-installer.org/\n.. _pip docs \"installing\" section: http://www.pip-installer.org/en/latest/installing.html\n.. _~/.pydistutils.cfg: http://docs.python.org/install/index.html#distutils-configuration-files\n.. _virtualenv: http://pypi.python.org/pypi/virtualenv\n.. _packaging.python.org: https://packaging.python.org/installing/\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/mk-fg/pretty-yaml",
            "keywords": "yaml serialization pretty print format human readable readability",
            "license": "WTFPL",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyaml",
            "package_url": "https://pypi.org/project/pyaml/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyaml/",
            "project_urls": {
               "Homepage": "https://github.com/mk-fg/pretty-yaml"
            },
            "release_url": "https://pypi.org/project/pyaml/20.4.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "PyYAML-based module to produce pretty and readable YAML-serialized data",
            "version": "20.4.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "haogege",
            "author_email": "1394168335@qq.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# pyyml\nUse python in yaml\n## 基本使用\n在python中使用：\n```python\nfrom pyyml import load\n\nwith open('conf.yml') as f:\n    raw_conf = f.read()\nconfig = load(raw_conf)\nprint(config)\n```\n在yaml中 `${...}` 中的内容将会被python执行：\n\nyaml内容\n```yaml\nsum: ${1 + 1}\n```\n实际解析内容\n```python\n{'sum': 2}\n```\n通过在文件开头第一行注释来导入所需的包：\n\n```yaml\n# libs:['os', 'os.path:path', 'this']\n```\n通过 [包名]:[别名] 取别名导入包\n\n`'os.path:path' 等同于 python 中的 from os import path`\n\n例如yaml文件内容\n```yaml\n# libs:['os', 'os.path:path', 'this']\nos_name: ${os.name}\nbase_dir: ${path.abspath(path.dirname(__file__))}\n```\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/q1394168335/pyyml",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyyml",
            "package_url": "https://pypi.org/project/pyyml/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyyml/",
            "project_urls": {
               "Homepage": "https://github.com/q1394168335/pyyml"
            },
            "release_url": "https://pypi.org/project/pyyml/0.0.2/",
            "requires_dist": [
               "pyyaml (>=3.13)"
            ],
            "requires_python": "",
            "summary": "Use python in yaml",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Michael Foord",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "rs",
            "package_url": "https://pypi.org/project/rs/",
            "platform": "",
            "project_url": "https://pypi.org/project/rs/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/rs/0.0/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "",
            "version": "0.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Ramses",
            "author_email": "hello@ramses.tech",
            "bugtrack_url": null,
            "classifiers": [
               "Framework :: Pyramid",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.4",
               "Programming Language :: Python :: 3.5",
               "Topic :: Internet :: WWW/HTTP",
               "Topic :: Internet :: WWW/HTTP :: WSGI :: Application"
            ],
            "description": "# `Ra`\n[![Build Status](https://travis-ci.org/ramses-tech/ra.svg?branch=master)](https://travis-ci.org/ramses-tech/ra)\n[![Documentation](https://readthedocs.org/projects/ra/badge/?version=stable)](http://ra.readthedocs.org)\n\nRa is a test suite generator and helper library for testing APIs described\nin [RAML](http://raml.org/).\n\nOut of the box, Ra provides a basic, automated test suite to test the routes\ndeclared in the RAML document. It provides test helpers for augmenting these\nwith custom tests to test application-specific logic, side effects, etc.\n\nRa is primarily designed to provide testing support for\n[ramses](http://github.com/ramses-tech/ramses) and\n[nefertari](http://github.com/ramses-tech/nefertari) applications, but can\nbe used with any WSGI-conformant, RAML-described API.\n\nIt currently depends on pytest but may be adapted for other test frameworks\nin the future. It works best using WebTest but doesn't require it.\n\n## Name\n\nRa was the god of the sun, the most important god in ancient Egypt.\n\n\n## Try it (dev)\n\nRun the test suite:\n\n```bash\n    $ pip install -r requirements.txt\n    $ py.test\n```\n\nCheck out the example:\n\n```bash\n    $ cd examples/ramses-test\n    $ pip install -r requirements.txt\n    $ py.test\n```\n\nThe example RAML at `examples/ramses-test/api.raml` and the test file\n`examples/ramses-test/tests/test_api.py` should be helpful to reference.\n\nSee the docs in `docs/`, and the `api.raml` and `tests/test_api.py` in\n`tests/apps/ramses_test`",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/ramses-tech/ra",
            "keywords": "web raml",
            "license": "UNKNOWN",
            "maintainer": null,
            "maintainer_email": null,
            "name": "ra",
            "package_url": "https://pypi.org/project/ra/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/ra/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/ramses-tech/ra"
            },
            "release_url": "https://pypi.org/project/ra/0.2.0/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Test RAML API definition",
            "version": "0.2.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Shoumik Palkar",
            "author_email": "shoumik@cs.stanford.edu",
            "bugtrack_url": null,
            "classifiers": [
               "License :: OSI Approved :: BSD License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 3"
            ],
            "description": "## split annotations\n\nThis package contains the Python implementation of [split annotations](), a system for optimizing applications\nthat combine many data-intensive library functions. See some useful links below.\n\n* [Documentation for this package](https://www.weld.rs/split-annotations/docs/)\n* [GitHub repository](https://www.github.com/weld-project/split-annotations)\n* [SOSP 2019 Paper describing the system](https://shoumik.xyz/static/papers/mozart-sosp19final.pdf)\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://www.github.com/weld-project/split-annotations",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "sa",
            "package_url": "https://pypi.org/project/sa/",
            "platform": "",
            "project_url": "https://pypi.org/project/sa/",
            "project_urls": {
               "Homepage": "https://www.github.com/weld-project/split-annotations"
            },
            "release_url": "https://pypi.org/project/sa/0.0.4/",
            "requires_dist": [
               "numpy",
               "pandas",
               "scipy",
               "sharedmem"
            ],
            "requires_python": ">=3.6",
            "summary": "Python split annotations package",
            "version": "0.0.4",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Mitch Garnaat",
            "author_email": "mitch@garnaat.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.6",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.3",
               "Programming Language :: Python :: 3.4",
               "Topic :: Internet"
            ],
            "description": "####\nboto\n####\nboto 2.49.0\n\nReleased: 11-July-2018\n\n.. image:: https://travis-ci.org/boto/boto.svg?branch=develop\n        :target: https://travis-ci.org/boto/boto\n\n.. image:: https://pypip.in/d/boto/badge.svg\n        :target: https://pypi.python.org/pypi/boto/\n\n******\nBoto 3\n******\n\n`Boto3 <https://github.com/boto/boto3>`__, the next version of Boto, is now\nstable and recommended for general use.  It can be used side-by-side with Boto\nin the same project, so it is easy to start using Boto3 in your existing\nprojects as well as new projects. Going forward, API updates and all new\nfeature work will be focused on Boto3.\n\nTo assist users who still depend on Boto and cannot immediately switch over, we\nwill be triaging and addressing critical issues and PRs in Boto in the short\nterm. As more users make the switch to Boto3, we expect to reduce our\nmaintenance involvement over time. If we decide on a cutoff date or any\nsignificant changes to our maintenance plan, we will make pre-announcements\nwell ahead of schedule to allow ample time for our users to adapt/migrate.\n\n\n************\nIntroduction\n************\n\nBoto is a Python package that provides interfaces to Amazon Web Services.\nCurrently, all features work with Python 2.6 and 2.7. Work is under way to\nsupport Python 3.3+ in the same codebase. Modules are being ported one at\na time with the help of the open source community, so please check below\nfor compatibility with Python 3.3+.\n\nTo port a module to Python 3.3+, please view our `Contributing Guidelines`_\nand the `Porting Guide`_. If you would like, you can open an issue to let\nothers know about your work in progress. Tests **must** pass on Python\n2.6, 2.7, 3.3, and 3.4 for pull requests to be accepted.\n\n\n********\nServices\n********\n\nAt the moment, boto supports:\n\n* Compute\n\n  * Amazon Elastic Compute Cloud (EC2) (Python 3)\n  * Amazon Elastic Map Reduce (EMR) (Python 3)\n  * AutoScaling (Python 3)\n  * Amazon Kinesis (Python 3)\n  * AWS Lambda (Python 3)\n  * Amazon EC2 Container Service (Python 3)\n\n* Content Delivery\n\n  * Amazon CloudFront (Python 3)\n\n* Database\n\n  * Amazon Relational Data Service (RDS)\n  * Amazon DynamoDB (Python 3)\n  * Amazon SimpleDB (Python 3)\n  * Amazon ElastiCache (Python 3)\n  * Amazon Redshift (Python 3)\n\n* Deployment and Management\n\n  * AWS Elastic Beanstalk (Python 3)\n  * AWS CloudFormation (Python 3)\n  * AWS Data Pipeline (Python 3)\n  * AWS Opsworks (Python 3)\n  * AWS CloudTrail (Python 3)\n  * AWS CodeDeploy (Python 3)\n\n* Administration & Security\n\n  * AWS Identity and Access Management (IAM) (Python 3)\n  * AWS Key Management Service (KMS) (Python 3)\n  * AWS Config (Python 3)\n  * AWS CloudHSM (Python 3)\n\n* Application Services\n\n  * Amazon CloudSearch (Python 3)\n  * Amazon CloudSearch Domain (Python 3)\n  * Amazon Elastic Transcoder (Python 3)\n  * Amazon Simple Workflow Service (SWF) (Python 3)\n  * Amazon Simple Queue Service (SQS) (Python 3)\n  * Amazon Simple Notification Server (SNS) (Python 3)\n  * Amazon Simple Email Service (SES) (Python 3)\n  * Amazon Cognito Identity (Python 3)\n  * Amazon Cognito Sync (Python 3)\n  * Amazon Machine Learning (Python 3)\n\n* Monitoring\n\n  * Amazon CloudWatch (EC2 Only) (Python 3)\n  * Amazon CloudWatch Logs (Python 3)\n\n* Networking\n\n  * Amazon Route53 (Python 3)\n  * Amazon Route 53 Domains (Python 3)\n  * Amazon Virtual Private Cloud (VPC) (Python 3)\n  * Elastic Load Balancing (ELB) (Python 3)\n  * AWS Direct Connect (Python 3)\n\n* Payments and Billing\n\n  * Amazon Flexible Payment Service (FPS)\n\n* Storage\n\n  * Amazon Simple Storage Service (S3) (Python 3)\n  * Amazon Glacier (Python 3)\n  * Amazon Elastic Block Store (EBS)\n  * Google Cloud Storage\n\n* Workforce\n\n  * Amazon Mechanical Turk\n\n* Other\n\n  * Marketplace Web Services (Python 3)\n  * AWS Support (Python 3)\n\nThe goal of boto is to support the full breadth and depth of Amazon\nWeb Services.  In addition, boto provides support for other public\nservices such as Google Storage in addition to private cloud systems\nlike Eucalyptus, OpenStack and Open Nebula.\n\nBoto is developed mainly using Python 2.6.6 and Python 2.7.3 on Mac OSX\nand Ubuntu Maverick.  It is known to work on other Linux distributions\nand on Windows.  Most of Boto requires no additional libraries or packages\nother than those that are distributed with Python.  Efforts are made\nto keep boto compatible with Python 2.5.x but no guarantees are made.\n\n************\nInstallation\n************\n\nInstall via `pip`_:\n\n::\n\n    $ pip install boto\n\nInstall from source:\n\n::\n\n    $ git clone git://github.com/boto/boto.git\n    $ cd boto\n    $ python setup.py install\n\n**********\nChangeLogs\n**********\n\nTo see what has changed over time in boto, you can check out the\nrelease notes at `http://docs.pythonboto.org/en/latest/#release-notes`\n\n***************************\nFinding Out More About Boto\n***************************\n\nThe main source code repository for boto can be found on `github.com`_.\nThe boto project uses the `gitflow`_ model for branching.\n\n`Online documentation`_ is also available. The online documentation includes\nfull API documentation as well as Getting Started Guides for many of the boto\nmodules.\n\nBoto releases can be found on the `Python Cheese Shop`_.\n\nJoin our IRC channel `#boto` on FreeNode.\nWebchat IRC channel: http://webchat.freenode.net/?channels=boto\n\nJoin the `boto-users Google Group`_.\n\n*************************\nGetting Started with Boto\n*************************\n\nYour credentials can be passed into the methods that create\nconnections.  Alternatively, boto will check for the existence of the\nfollowing environment variables to ascertain your credentials:\n\n**AWS_ACCESS_KEY_ID** - Your AWS Access Key ID\n\n**AWS_SECRET_ACCESS_KEY** - Your AWS Secret Access Key\n\nCredentials and other boto-related settings can also be stored in a\nboto config file.  See `this`_ for details.\n\n.. _Contributing Guidelines: https://github.com/boto/boto/blob/develop/CONTRIBUTING\n.. _Porting Guide: http://boto.readthedocs.org/en/latest/porting_guide.html\n.. _pip: http://www.pip-installer.org/\n.. _release notes: https://github.com/boto/boto/wiki\n.. _github.com: http://github.com/boto/boto\n.. _Online documentation: http://docs.pythonboto.org\n.. _Python Cheese Shop: http://pypi.python.org/pypi/boto\n.. _this: http://docs.pythonboto.org/en/latest/boto_config_tut.html\n.. _gitflow: http://nvie.com/posts/a-successful-git-branching-model/\n.. _neo: https://github.com/boto/boto/tree/neo\n.. _boto-users Google Group: https://groups.google.com/forum/?fromgroups#!forum/boto-users\n\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/boto/boto/",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "boto",
            "package_url": "https://pypi.org/project/boto/",
            "platform": "Posix; MacOS X; Windows",
            "project_url": "https://pypi.org/project/boto/",
            "project_urls": {
               "Homepage": "https://github.com/boto/boto/"
            },
            "release_url": "https://pypi.org/project/boto/2.49.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Amazon Web Services Library",
            "version": "2.49.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Hadi Asghari",
            "author_email": "hd.asghari@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 3",
               "Topic :: Software Development :: Libraries :: Python Modules",
               "Topic :: System :: Networking"
            ],
            "description": "pyasn\n=====\n\n.. image:: https://pypip.in/v/pyasn/badge.png\n   :target: https://pypi.python.org/pypi/pyasn\n\n.. image:: https://pypip.in/d/pyasn/badge.png\n   :target: https://pypi.python.org/pypi/pyasn\n\n\n**pyasn** is a Python extension module that enables very fast IP address to Autonomous System Number lookups.\nCurrent state and Historical lookups can be done, based on the MRT/RIB BGP archive used as input.\n\n*pyasn* is different from other ASN lookup tools in that it provides **offline** and **historical** lookups.\nIt provides utility scripts for users to build their own lookup databases based on any MRT/RIB archive.\nThis makes *pyasn* much faster than online dig/whois/json lookups.\n\nThe module is written in C and Python, and cross-compiles on Linux and Windows. Underneath, it uses a radix tree\ndata structure for storage of IP addresses. In the current version, it borrows code from *py-radix* to support\nboth IPV4 and IPV6 network prefixes. The current release is a beta. Compared to the previous version, it provides\nsupport for Python 2 and 3; adds new functionality, performance improvements, and unit-tests.\n\n*pyasn* is developed and maintained by researchers at the Economics of Cybersecurity research group at Delft\nUniversity of Technology (http://econsec.tbm.tudlft.nl). The package is used on an almost daily basis and bugs\nare fixed pretty quickly.  The package is largely developed and maintained by Hadi Asghari and Arman Noroozian.\nPlease report any bugs via GitHub (https://github.com/hadiasghari/pyasn) or email the developers.\n\n\nInstallation\n============\nInstallation is a breeze via pip: ::\n\n    pip install pyasn --pre\n\nOr with the standard Python: ::\n\n    python setup.py build\n    python setup.py install --record log\n\nYou will need to have pip, setuptools and build essentials installed if you build the package manually. On\nUbuntu/Debian you can get them using the following command: ::\n\n    sudo apt-get install python-pip python-dev build-essential\n\nBuilding the C module on Windows, using either pip or from source, requires Microsoft Visual C++ to be installed.\npyasn has been tested using Visual C++ Express 2010, available freely from Microsoft's website, on both the\nofficial Python 3.4 release and Miniconda3. Other versions of Python, Visual Studio, and Cygwin could also work\nwith minor modifications.\n\nWe plan to release *pyasn* packages to major Linux repositories once it is out of beta.\n\n\nUsage\n=====\nA simple example that demonstrates most of the features: ::\n\n    import pyasn\n\n    # Initialize module and load IP to ASN database\n    # the sample database can be downloaded or built - see below\n    asndb = pyasn.pyasn('ipasn_20140513.dat')\n\n    asndb.lookup('8.8.8.8')\n    # should return: (15169, '8.8.8.0/24'), the origin AS, and the BGP prefix it matches\n\n    asndb.get_as_prefixes(1128)\n    # returns ['130.161.0.0/16', '131.180.0.0/16', '145.94.0.0/16'], TU-Delft prefixes\n\n\nIPASN Data Files\n================\nIPASN data files are a long list of prefixes used to lookup AS number for IPs. An excerpt from such a file looks\nlike this: ::\n\n    ; IP-ASN32-DAT file\n    ; Original file : <Path to a rib file>\n    ; Converted on  : Tue May 13 22:03:05 2014\n    ; CIDRs         : 512490\n    ;\n    1.0.0.0/24  15169\n    1.0.128.0/17        9737\n    1.0.128.0/18        9737\n    1.0.128.0/19        9737\n    1.0.129.0/24        23969\n    ...\n\nIPASN data files can be created by downloading MRT/RIB BGP archives from Routeviews (or similar sources),\nand parsing them using provided scripts that tail the BGP AS-Path. This can be done simply as follows: ::\n\n    pyasn_util_download.py --latest\n    pyasn_util_convert.py --single <Downloaded RIB File> <ipasn_db_file_name>\n\n\n**NOTE:** These scripts are by default installed to ``/usr/local/bin`` and can be executed directly. If you installed\nthe package to a user directory, these scripts will not be on the path and you will have to invoke them by navigating\nto the folder in which they have been copied (e.g. ``~/.local/bin``).\n\nWe also provide download links to a large number of previously generated IPASN data files. These are based on\nweekly  snapshots of the Routeviews data from 2005-2015, accessible here:\nhttp://data.3tu.nl/repository/uuid:d4d23b8e-2077-4592-8b47-cb476ad16e12\n\n**New in v1.6:** To save disk space, you can gzip IPASN data files. The load time will be slighlty longer.\n\n\nPerformance Tip\n===============\nInitial loading of a IPASN data file is the most heavy operation of the package. For fast lookups using multiple\nIPASN data files, for instance for historical lookups on multiple dates, we recommend caching of loaded data files\nfor better performance.\n\n\nUninstalling pyasn\n==================\nYou can remove *pyasn* as follows: ::\n\n    pip uninstall pyasn\n\nIf you built and installed the package your self use the recorded log to remove the installed files.\n\n**Removing PyASN version 1.2**: *pyasn* v1.5/1.6 and v1.2 can be installed side by side (due to lower-cased package\nname). To avoid mistakes, you can uninstall the old **PyASN** by deleting the following files from your Python\ninstallation: ::\n\n    PYTHONDIR/dist-packages/PyASN.so\n    PYTHONDIR/dist-packages/PyASN-1.2.egg-info\n\n\nPackage Structure\n=================\nThe main portions of the directory tree are as follows: ::\n\n    .\n    ├── pyasn/__init__.py       # Python code of the main pyasn module\n    ├── pyasn/pyasn_radix.c     # C extension code (Python RADIX module with bulk load)\n    ├── pyasn/_radix/*          # C extension code (Based on original RADIX code from MRTd)\n    ├── pyasn/mrtx.py           # python module used to convert MRT files to pyasn DB files\n    ├── pyasn-utils/*.py        # Scripts to download & convert BGP MRT dumps to IPASN databases\n    ├── data/                   # Test Resources and some sample DBs to use\n    ├── tests/                  # Tests\n    └── setup.py                # Standard setup.py for installation/testing/etc.\n\n\n\nTesting pyasn Sources\n=====================\nA limited number of unit tests are provided in the ``tests/`` directory when downlading the sources. They can be\nrun with the following command: ::\n\n    python setup.py test\n\nThis beta release has been tested under python version 2.6, 2.7, 3.3, 3.4 and 3.5. We appreciate contributions towards\ntesting *pyasn*!\n\n**New in v1.6:** pyasn_util_convert.py offers a '--dump-screen' option which shows the MRT/RIB archive contents and\nthe chosen origin-AS.\n\n\nLicense & Acknowledgments\n=========================\n*pyasn* is licensed under the MIT license.\n\nIt extends code from py-radix (Michael J. Schultz and Damien Miller),  and improves upon it in several ways, for\ninstance in lowering memory usage and adding bulk prefix/origin load. The underlying radix tree implementation is\ntaken (and modified) from MRTd. These are all subject to their respective licenses.  Please see the LICENSE file\nfor details.\n\nThanks to Dr. Chris Lee (of Shadowserver) for proposing the use of radix trees.\n\nA handful of GitHub developers have contributed features and bug fixes to the latest releases.\nMany thanks to all of them.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": null,
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/hadiasghari/pyasn",
            "keywords": "ip asn autonomous system bgp whois prefix radix python routing networking",
            "license": "MIT",
            "maintainer": null,
            "maintainer_email": null,
            "name": "pyasn",
            "package_url": "https://pypi.org/project/pyasn/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/pyasn/",
            "project_urls": {
               "Homepage": "https://github.com/hadiasghari/pyasn"
            },
            "release_url": "https://pypi.org/project/pyasn/1.6.0b1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Offline IP address to Autonomous System Number lookup module.",
            "version": "1.6.0b1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Perdix Software",
            "author_email": "ssmith@perdixsw.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 2 - Pre-Alpha",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.4",
               "Programming Language :: Python :: 3.5",
               "Programming Language :: Python :: 3.6",
               "Topic :: Office/Business :: Financial",
               "Topic :: Scientific/Engineering :: Mathematics"
            ],
            "description": "UNKNOWN",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "https://www.github.com/perdixsw/umpy/tarball/0.1.0",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://www.github.com/perdixsw/umpy",
            "keywords": "units,measure,measurement,conversion,converter",
            "license": "MIT",
            "maintainer": null,
            "maintainer_email": null,
            "name": "umpy",
            "package_url": "https://pypi.org/project/umpy/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/umpy/",
            "project_urls": {
               "Download": "https://www.github.com/perdixsw/umpy/tarball/0.1.0",
               "Homepage": "https://www.github.com/perdixsw/umpy"
            },
            "release_url": "https://pypi.org/project/umpy/0.1.0/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Simple unit of measure conversion for python, optimized for manufacturing contexts.",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Jay Marcyes",
            "author_email": "jay@marcyes.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Environment :: Console",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Topic :: Software Development :: Testing"
            ],
            "description": "Pyt\n===\n\nPyt is a lightweight wrapper around `Python’s unittest\nmodule <https://docs.python.org/3/library/unittest.html>`__ that adds\nsome nice features and enhancements over the stock ``unittest`` module.\n\nQuickstart\n~~~~~~~~~~\n\nPyt overrides unittest’s built-in pathfinding to be smarter and less\nverbose, so you can match tests using prefix matching which makes\nrunning a test like:\n\n::\n\n   $ python -m unittest tests.foo_test.BarTestCase.test_che\n\nas simple as:\n\n::\n\n   $ pyt foo.Bar.che\n\nBut it’s even less verbose if you want it to be, pyt can reach into the\nmodules and classes to do its matching, so you don’t even need to\nspecify the module and class if you don’t want to:\n\n::\n\n   $ pyt che\n\nMore examples\n^^^^^^^^^^^^^\n\nTo run all the ``Happy`` tests:\n\n::\n\n   $ pyt Happy\n\nTo run all the ``newmodule`` tests:\n\n::\n\n   $ pyt newmodule\n\nTo run more than one test:\n\n::\n\n   $ pyt test1 test2 ...\n\nTo run every test ``pyt`` can find:\n\n::\n\n   $ pyt\n\nAnd the way I like to run all tests in the current directory:\n\n::\n\n   $ pyt -vb\n\nWhich can also be written:\n\n::\n\n   $ pyt --verbose --buffer\n\nFlags\n~~~~~\n\nTo see everything pyt can do\n\n::\n\n   $ pyt --help\n\n–warnings\n^^^^^^^^^\n\nThis will convert warnings into errors.\n\n::\n\n   $ pyt --warnings\n\n–rerun\n^^^^^^\n\nIf your last testrun had failing tests this will rerun only the tests\nthat failed.\n\n::\n\n   $pyt --rerun\n\nThings to be aware of\n~~~~~~~~~~~~~~~~~~~~~\n\npyt uses Python’s PEP 8 style conventions\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n``pyt`` uses `Python’s code styling\nconventions <http://www.python.org/dev/peps/pep-0008/>`__ to decide what\nis the module and class, so, given input like this:\n\n::\n\n   $ pyt foo.bar.Baz.che\n\n``pyt`` will consider ``foo.bar`` to be the module, ``Baz`` to be a\nclass (because it starts with a capital letter), and ``che`` to be a\nmethod (since it comes after the class).\n\nLikewise, ``pyt`` uses unittest conventions, so a test module should end\nwith ``_test`` (eg, ``foo.bar_test``) or start with test (eg,\n``test_foo.py``) and a TestCase class should extend\n``unittest.TestCase``, and test methods should start with ``test_`` (eg,\n``test_che``).\n\nVague input can cause pyt to run more tests than you expect\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSo if you have something like this:\n\n::\n\n   project/\n     __init__.py\n     user.py\n     foo/\n       __init__.py\n       user.py\n     tests/\n       __init__.py\n       user_test.py\n       foo/\n         __init__.py\n         user_test.py\n\nAnd you want to run tests for ``foo.user`` and you run:\n\n::\n\n   $ pyt user\n\nit will run both ``tests/user_test`` and ``tests.foo.user_test``, the\nsolution is to just be more verbose when you have to be:\n\n::\n\n   $ pyt foo.user\n\nEnvironment Variables\n^^^^^^^^^^^^^^^^^^^^^\n\nIf you are running the tests within pyt, you might notice there is an\nenvironment variable ``PYT_TEST_COUNT`` that contains the count of how\nmany tests pyt found to run.\n\nInstallation\n------------\n\nUse ``pip``:\n\n::\n\n   $ pip install pyt\n\nYou can also get it directly from the repo:\n\n::\n\n   $ pip install --upgrade git+https://github.com/Jaymon/pyt#egg=pyt\n\nIf you install pyt using Python 3 it can also be invoked using the\n``pyt3`` command:\n\n::\n\n   $ pyt3 --help\n\nLikewise, Python 2 installs a ``pyt2`` command:\n\n::\n\n   $ pyt2 --help\n\nTesting\n-------\n\nTesting in 2.7 on most systems:\n\n::\n\n   $ python -m unittest pyt_test\n\nTesting in 3.5 on MacOS:\n\n::\n\n   $ python3.5 -m unittest pyt_test\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "http://github.com/Jaymon/pyt",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyt",
            "package_url": "https://pypi.org/project/pyt/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyt/",
            "project_urls": {
               "Homepage": "http://github.com/Jaymon/pyt"
            },
            "release_url": "https://pypi.org/project/pyt/1.0.5/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "easily run python unit tests",
            "version": "1.0.5",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Bradley Odell",
            "author_email": "btodell@hotmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Environment :: Console",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
               "Natural Language :: English",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 2.6",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Topic :: Software Development :: Build Tools"
            ],
            "description": "pyz\n===\n\n*Packages all source code and dependencies into a single Python zip application.*\n\nSummary\n-------\n\nDeploying a Python application any larger than a single file is\ncumbersome - this library aims to solve that problem.\n\nPython has been able to run code from within a zip file since version\n2.6. Python 3.5 introduced the `zipapp <https://docs.python.org/3/library/zipapp.html>`__ module\nwhich aims to simplify the process of creating a zip application.\nHowever, **zipapp** isn't a complete solution to the problem - it\ndoesn't handle dependencies and it doesn't include certain extra\nfeatures that this library provides.\n\nThis library allows you to bundle all of your Python code **AND** your\ndependencies into a single Python zip application file.\n\nNote: The dependency bundling feature is not implemented yet, but it is\nin the works!\n\nFeatures\n--------\n\n1. Bundle all Python source code with fine-grained control over included files.\n2. Ability to \"unixify\" the output application by prepending a customizable\n   `shebang <https://en.wikipedia.org/wiki/Shebang_(Unix)>`__.\n3. Python interpreter version check - display a friendly notice instead\n   of a Python exception if the user runs your application using an\n   unsupported Python version.\n\nPlanned\n-------\n\n1. Automatically identify dependencies and package them accordingly.\n",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "https://github.com/BTOdell/pyz/archive/0.4.3.tar.gz",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/BTOdell/pyz",
            "keywords": "pyz zip app zipapp bundle dependencies library",
            "license": "GPLv3",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyz",
            "package_url": "https://pypi.org/project/pyz/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyz/",
            "project_urls": {
               "Download": "https://github.com/BTOdell/pyz/archive/0.4.3.tar.gz",
               "Homepage": "https://github.com/BTOdell/pyz"
            },
            "release_url": "https://pypi.org/project/pyz/0.4.3/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Packages all source code and dependencies into a single Python zip application.",
            "version": "0.4.3",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Val Neekman",
            "author_email": "info@neekware.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 3 - Alpha",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Operating System :: POSIX",
               "Programming Language :: Python",
               "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description": "AWSLI\n====================\n\n**Amazon Web Services Line Interpreter**\n\n**Author:** Val Neekman [ info@neekware.com, @vneekman ]\n\nOverview\n========\n\nA Line Interpreter for Amazon Web Services.\n\nHow to install\n==================\n\n    1. easy_install awsli\n    2. pip install awsli\n    3. git clone http://github.com/un33k/awsli\n        a. cd awsli\n        b. run python setup.py\n    4. wget https://github.com/un33k/awsli/zipball/master\n        a. unzip the downloaded file\n        b. cd into awsli-* directory\n        c. run python setup.py\n\nHow to use\n=================\n\n``Usage``\n\n``Note:``\n\nRunning the tests\n=================\n\nTo run the tests against the current environment:\n\n    python test.py\n\nChangelog\n=========\n\n0.1\n-----\n\n* Initial release\n\n\nLicense\n=======\n\nCopyright (c) 2012, Val Neekman\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without \nmodification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this \nlist of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this \nlist of conditions and the following disclaimer in the documentation and/or \nother materials provided with the distribution.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND \nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED \nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE \nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE \nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL \nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR \nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, \nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE \nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/un33k/awsli",
            "keywords": null,
            "license": "BSD",
            "maintainer": null,
            "maintainer_email": null,
            "name": "awsli",
            "package_url": "https://pypi.org/project/awsli/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/awsli/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/un33k/awsli"
            },
            "release_url": "https://pypi.org/project/awsli/0.0.1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "A Line Interpreter for Amazon Web Services",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Armin Ronacher",
            "author_email": "armin.ronacher@active-4.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Environment :: Web Environment",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
               "Topic :: Software Development :: Libraries :: Python Modules",
               "Topic :: Text Processing :: Markup :: HTML"
            ],
            "description": "jinja\n~~~~~\n\nJinja is a `sandboxed`_ template engine written in pure Python. It\nprovides a `Django`_ like non-XML syntax and compiles templates into\nexecutable python code. It's basically a combination of Django templates\nand python code.\n\nNutshell\n--------\n\nHere a small example of a Jinja template::\n\n    {% extends 'base.html' %}\n    {% block title %}Memberlist{% endblock %}\n    {% block content %}\n      <ul>\n      {% for user in users %}\n        <li><a href=\"{{ user.url|e }}\">{{ user.username|e }}</a></li>\n      {% endfor %}\n      </ul>\n    {% endblock %}\n\nPhilosophy\n----------\n\nApplication logic is for the controller but don't try to make the life\nfor the template designer too hard by giving him too few functionality.\n\nFor more informations visit the new `jinja webpage`_ and `documentation`_.\n\nNote\n----\n\nThis is the Jinja 1.0 release which is completely incompatible with the\nold \"pre 1.0\" branch. The old branch will still receive security updates\nand bugfixes but the 1.0 branch will be the only version that receives\nsupport.\n\nIf you have an application that uses Jinja 0.9 and won't be updated in\nthe near future the best idea is to ship a Jinja 0.9 checkout together\nwith the application.\n\nThe `Jinja tip`_ is installable via `easy_install` with ``easy_install\nJinja==dev``.\n\n.. _sandboxed: http://en.wikipedia.org/wiki/Sandbox_(computer_security)\n.. _Django: http://www.djangoproject.com/\n.. _jinja webpage: http://jinja.pocoo.org/\n.. _documentation: http://jinja.pocoo.org/documentation/index.html\n.. _Jinja tip: http://dev.pocoo.org/hg/jinja-main/archive/tip.tar.gz#egg=Jinja-dev\n\n\n:copyright: 2007 by Armin Ronacher.\n:license: BSD, see LICENSE for more details.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "http://jinja.pocoo.org/",
            "keywords": "python.templating.engines",
            "license": "BSD",
            "maintainer": null,
            "maintainer_email": null,
            "name": "Jinja",
            "package_url": "https://pypi.org/project/Jinja/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/Jinja/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "http://jinja.pocoo.org/"
            },
            "release_url": "https://pypi.org/project/Jinja/1.2/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "A small but fast and easy to use stand-alone template engine written in pure python.",
            "version": "1.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Hsiaoming Yang",
            "author_email": "me@lepture.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Environment :: Console",
               "Environment :: Web Environment",
               "Framework :: Django",
               "Framework :: Flask",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.5",
               "Programming Language :: Python :: 3.6",
               "Programming Language :: Python :: 3.7",
               "Programming Language :: Python :: 3.8",
               "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
               "Topic :: Internet :: WWW/HTTP :: WSGI :: Application",
               "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description": "Authlib\n=======\n\nThe ultimate Python library in building OAuth and OpenID Connect servers.\nJWS, JWK, JWA, JWT are included.\n\nUseful Links\n------------\n\n1. Homepage: https://authlib.org/\n2. Documentation: https://docs.authlib.org/\n3. Purchase Commercial License: https://authlib.org/plans\n4. Blog: https://blog.authlib.org/\n5. More Repositories: https://github.com/authlib\n6. Twitter: https://twitter.com/authlib\n7. Donate: https://www.patreon.com/lepture\n\nSpecifications\n--------------\n\n- RFC5849: The OAuth 1.0 Protocol\n- RFC6749: The OAuth 2.0 Authorization Framework\n- RFC6750: The OAuth 2.0 Authorization Framework: Bearer Token Usage\n- RFC7009: OAuth 2.0 Token Revocation\n- RFC7515: JSON Web Signature\n- RFC7516: JSON Web Encryption\n- RFC7517: JSON Web Key\n- RFC7518: JSON Web Algorithms\n- RFC7519: JSON Web Token\n- RFC7521: Assertion Framework for OAuth 2.0 Client Authentication and Authorization Grants\n- RFC7523: JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants\n- RFC7591: OAuth 2.0 Dynamic Client Registration Protocol\n- RFC7662: OAuth 2.0 Token Introspection\n- RFC8414: OAuth 2.0 Authorization Server Metadata\n- RFC8628: OAuth 2.0 Device Authorization Grant\n- OpenID Connect 1.0\n- OpenID Connect Discovery 1.0\n\nImplementations\n---------------\n\n- Requests OAuth 1 Session\n- Requests OAuth 2 Session\n- Requests Assertion Session\n- Flask OAuth 1/2 Client\n- Django OAuth 1/2 Client\n- Flask OAuth 1.0 Server\n- Flask OAuth 2.0 Server\n- Flask OpenID Connect 1.0\n- Django OAuth 1.0 Server\n- Django OAuth 2.0 Server\n- Django OpenID Connect 1.0\n\nLicense\n-------\n\nAuthlib is licensed under BSD. Please see LICENSE for licensing details.\n\nIf this license does not fit your company, consider to purchase a commercial\nlicense. Find more information on `Authlib Plans`_.\n\n.. _`Authlib Plans`: https://authlib.org/plans\n\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://authlib.org/",
            "keywords": "",
            "license": "BSD-3-Clause",
            "maintainer": "",
            "maintainer_email": "",
            "name": "Authlib",
            "package_url": "https://pypi.org/project/Authlib/",
            "platform": "any",
            "project_url": "https://pypi.org/project/Authlib/",
            "project_urls": {
               "Blog": "https://blog.authlib.org/",
               "Bug Tracker": "https://github.com/lepture/authlib/issues",
               "Commercial License": "https://authlib.org/plans",
               "Documentation": "https://docs.authlib.org/",
               "Donate": "https://lepture.com/donate",
               "Homepage": "https://authlib.org/",
               "Source Code": "https://github.com/lepture/authlib"
            },
            "release_url": "https://pypi.org/project/Authlib/0.14.3/",
            "requires_dist": [
               "cryptography",
               "requests ; extra == 'client'"
            ],
            "requires_python": "",
            "summary": "The ultimate Python library in building OAuth and OpenID Connect servers.",
            "version": "0.14.3",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Julien Bigot",
            "author_email": "julien.bigot@cea.fr",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Environment :: Console",
               "License :: OSI Approved :: MIT License"
            ],
            "description": "# zpp\n\nThis is zpp, the Z Pre-Processor.\n\nZpp transforms bash in a pre-processor for F90 source files.\nIt offers a set of functions specifically tailored to build clean Fortran90\ninterfaces by generating code for all types, kinds, and array ranks supported by\na given compiler.\n\n## Syntax\n\nZpp files are typically named `*.F90.zpp`.\n\nIn these files, the lines that start with `!$SH` are interpreted as bash lines. \nOther lines are copied as-is, except that variable substitution is operated as\nin a double-quoted string, including bash commands `${VAR}` or `$(command)`.\nIf inside a bash control block (`if`, `for`, etc.), the output generation obeys\nthe control statement.\n\nFor example, this code:\n```\n!$SH for GREETED in world universe multiverse ; do\nprint *, \"Hello ${GREETED}\"\n!$SH done\n```\n\nWould produce the following result:\n```\nprint *, \"Hello world\"\nprint *, \"Hello universe\"\nprint *, \"Hello multiverse\"\n```\n\n### Support functions\n\nPredefined bash functions, variable and code can be provided in `.zpp.sh` files\nthat can be included with `#!SH source <filename>.zpp.sh`.\n\n**Beware**: a file NEEDs to have the `.zpp.sh` extension to be included from\nzpp.\n\nZpp provides a standard library of functions tailored to build clean Fortran90\ninterfaces by generating code for all types, kinds, and array ranks supported by\na given compiler.\n\n#### zpp_str_repeat\n\nFound in `base.zpp.sh`\n\nOutputs a string multiple times.\n\nParameters:\n1. the string to Repeat\n2. the lower bound of the iterations (inclusive)\n3. the upper bound of the iterations (inclusive)\n4. the string separator\n5. the string starter\n6. the string ender\n\nRepeats string `$1` (`$3`-`$2`+1) times, separated by string `$4` inside `$5`\n`$6`.\n* If the number of repetitions is negative, the result is empty.\n* If `$1` contains the '@N' substring, it will be replaced by the iteration\n  number (from `$2` to `$3`).\n\nexample:\n```\n#!SH source base.zpp.sh\nzpp_str_repeat v@N 5 7 '...' '<<' '>>'\nzpp_str_repeat w@N 1 1 '...' '<<' '>>'\nzpp_str_repeat x@N 1 0 '...' '<<' '>>'\n```\noutput:\n```\n<<v5...v6...v7>>\n<<w1>>\n```\n\n#### zpp_str_repeat_reverse\n\nFound in `base.zpp.sh`\n\nOutputs a string multiple times in reverse order.\n\nParameters:\n1. the string to Repeat\n2. the upper bound of the iterations (inclusive)\n3. the lower bound of the iterations (inclusive)\n4. the string separator\n5. the string starter\n6. the string ender\n\nRepeats string `$1` (`$2`-`$3`+1) times, separated by string `$4` inside `$5`\n`$6`.\n* If the number of repetitions is negative, the result is empty.\n* If `$1` contains the '@N' substring, it will be replaced by the iteration\n  number (from `$2` to `$3`, i.e. upper to lower).\n\nexample:\n```\n#!SH source base.zpp.sh\nzpp_str_repeat_reverse v@N 5 7 '...' '<<' '>>'\nzpp_str_repeat_reverse w@N 1 1 '...' '<<' '>>'\nzpp_str_repeat_reverse x@N 1 0 '...' '<<' '>>'\n```\noutput:\n```\n<<v7...v6...v5>>\n<<w1>>\n```\n\n#### ZPP_FORT_TYPES\n\nFound in `fortran.zpp.sh`\n\nThe list of types supported by the fortran compiler as zpp:typeIDs.\n\nThe compiler ID should be provided in `ZPP_CONFIG` as `config.<ID>`.\nThe supported predefined IDs are: `Gnu`, `Intel`, `PGI` and `XL`.\nYou can also provide definitions for an additional compiler by defining\n`ZPP_FORT_TYPES` in a file named `config.<ID>.zpp.sh`.\n\nIf you use cmake, it will automatically generate such a file for your compiler\nand define  `ZPP_CONFIG` so you don't have to handle it.\n\n### zpp_fort_array_desc\n\nFound in `fortran.zpp.sh`\n\nOutputs an assumed shaped array descriptor of the provided size.\n\nParameters:\n1. the size of the assumed shaped array\n\nexample:\n```\n#!SH source fortran.zpp.sh\ninteger:: scalar$(zpp_fort_array_desc 0)\ninteger:: array1d$(zpp_fort_array_desc 1)\ninteger:: array2d$(zpp_fort_array_desc 2)\n```\noutput:\n```\ninteger:: scalar\ninteger:: array1d(:)\ninteger:: array2d(:,:)\n```\n\n### zpp_fort_ptype\n\nFound in `fortran.zpp.sh`\n\nOutputs the type associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\nexample:\n```\n#!SH source fortran.zpp.sh\n!$SH for T in ${ZPP_FORT_TYPES} ; do\n$(zpp_fort_ptype $1)\n!$SH done\n```\nexample output:\n```\nCHARACTER\nCOMPLEX\nCOMPLEX\nINTEGER\nINTEGER\nINTEGER\nINTEGER\nLOGICAL\nREAL\nREAL\n```\n\n### zpp_fort_kind\n\nFound in `fortran.zpp.sh`\n\nOutputs the kind associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\nexample:\n```\n#!SH source fortran.zpp.sh\n!$SH for T in ${ZPP_FORT_TYPES} ; do\n$(zpp_fort_kind $1)\n!$SH done\n```\nexample output:\n```\n1\n4\n8\n1\n2\n4\n8\n1\n4\n8\n```\n\n### zpp_fort_type\n\nFound in `fortran.zpp.sh`\n\nOutputs the full type (with kind included) associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n2. additional attributes for the type\n\nexample:\n```\n#!SH source fortran.zpp.sh\n!$SH for T in ${MY_CHAR_TYPES} ; do\n$(zpp_fort_type $1)\n$(zpp_fort_type $1 \"len=5\")\n!$SH done\n```\nexample output:\n```\nCHARACTER(KIND=1)\nCHARACTER(KIND=1,len=5)\n```\n\n### zpp_fort_sizeof\n\nFound in `fortran.zpp.sh`\n\nOutputs the size in bits associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\n### zpp_fort_io_format\n\nFound in `fortran.zpp.sh`\n\nOutputs an IO descriptor suitable for a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\n### ZPP_HDF5F_TYPES\n\nFound in `hdf5_fortran.zpp.sh`\n\nA list of zpp:typeIDs supported by HDF5.\n\n### hdf5_constant\n\nFound in `hdf5_fortran.zpp.sh`\n\nOutputs the HDF5 type constant associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\nexample:\n```\n#!SH source hdf5_fortran.zpp.sh\n!$SH for T in ${ZPP_HDF5F_TYPES} ; do\n$(hdf5_constant $1)\n!$SH done\n```\nexample output:\n```\nH5T_NATIVE_INTEGER\nH5T_NATIVE_REAL\nH5T_NATIVE_REAL\nH5T_NATIVE_CHARACTER\n```\n\n\n## Command-line interface\n\nZpp basic usage is as follow:\n```\nUsage: zpp [Options...] <source> [<destination>]\n  use `zpp -h' for more info\n\nPreprocesses BASH in-line commands in a source file\n\nOptions:\n  --version        show program's version number and exit\n  -h, --help       show this help message and exit\n  -I DIR           Add DIR to search list for source directives\n  -o FILE          Place the preprocessed code in file FILE.\n  -D OPTION=VALUE  Set the value of OPTION to VALUE\n```\n\n## CMake interface\n\nSupport is provided for using zpp from CMake based projects, but you can use\nit from plain Makefiles too.\n\nThere are two ways you can use zpp from your CMake project:\n* with `add_subdirectory`: include zpp in your project and use it directly from\n  there,\n* with `find_package`: install zpp and use it as an external dependency of your\n  project.\n\n#### CMake subdirectory usage\n\nUsing zpp with `add_subdirectory` is very simple.\nJust copy the `zpp` directory in your source and point to it with\n`add_subdirectory(zpp)`.\nThe `zpp_preprocess` then becomes available to process zpp files.\n\nThis is demonstrated in `example/cmake_subdirectory`.\n\n#### CMake find usage\n\nUsing zpp with `find_package` is no more complex.\nIf zpp is installed, just add a `find_package(zpp REQUIRED)`.\nThe `zpp_preprocess` then becomes available to process zpp files.\n\nThis is demonstrated in `example/cmake_find`.\n\n## GMake usage\n\nUsing zpp from a GNU Makefile is slightly less powerful than from CMake.\nThe types and kinds supported by the Fortran compiler will not be automatically\ndetected.\nPredefined lists of supported types for well known compilers are provided\ninstead.\n\nTo use zpp from a Makefile, include the `share/zpp/zpp.mk` file (either from an\ninstalled location or from a subdirectory in your project).\nYou can then set the `zpp_COMPILER_ID` variable to the compiler you use and\n`.F90` files will be automatically generated from their `.F90.zpp` equivalent.\nThe `zppFLAGS` variable is automatically passed to zpp similarly to `CFLAGS` or\n`CXXFLAGS` for `cc` and `cxx`.\n\nThis is demonstrated in `example/cmake_makefile`.\n\n## Installation\n\nZpp can be installed using the usual python way with `setup.py`.\n```\n./setup.py --help\n```\n\nThe cmake approach is deprecated.\n\n## FAQ\n\nQ. Isn't zpp redundant with assumed type parameters?\n\nA.\nThe assumed type parameters functionality allows to implement part of what can\nbe done with zpp (support for all kinds of a type). However as of 2013 it was\nnot correctly supported on most compilers installed on the supercomputers.\n\nIn addition, many things can be done with zpp but not with assumed type\nparameters, such as support for variable array rank or small variations of the\ncode depending on the kind.\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "bash Fortran pre-processor",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "zpp",
            "package_url": "https://pypi.org/project/zpp/",
            "platform": "",
            "project_url": "https://pypi.org/project/zpp/",
            "project_urls": {
               "Source Code": "https://github.com/pdidev/zpp/"
            },
            "release_url": "https://pypi.org/project/zpp/1.0.4/",
            "requires_dist": [
               "setuptools"
            ],
            "requires_python": "",
            "summary": "a Bash Pre-Processor for Fortran. ZPP is useful in order to build clean Fortran90 interfaces. It allows to generate Fortran code for all types, kinds, and array ranks supported by the compiler.",
            "version": "1.0.4",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Dheepak Krishnamurthy",
            "author_email": "kdheepak89@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# zip [![](https://travis-ci.org/kdheepak/zip.svg?branch=master)](https://travis-ci.org/kdheepak/zip/branches)\n\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/kdheepak/zip",
            "keywords": "",
            "license": "Revised BSD License",
            "maintainer": "",
            "maintainer_email": "",
            "name": "zip",
            "package_url": "https://pypi.org/project/zip/",
            "platform": "",
            "project_url": "https://pypi.org/project/zip/",
            "project_urls": {
               "Homepage": "https://github.com/kdheepak/zip"
            },
            "release_url": "https://pypi.org/project/zip/0.0.2/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Intel Corporation",
            "author_email": "scripting@intel.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "Intended Audience :: Education",
               "Intended Audience :: Other Audience",
               "Intended Audience :: Science/Research",
               "Intended Audience :: System Administrators",
               "License :: Other/Proprietary License",
               "Operating System :: MacOS",
               "Operating System :: Microsoft :: Windows",
               "Operating System :: POSIX",
               "Operating System :: Unix",
               "Topic :: Software Development :: Libraries"
            ],
            "description": "Intel(R) Performance Primitives provides developers with high-quality, production-ready, low-level building blocks for image processing, signal processing, and data processing (data compression and decompression, and cryptography) applications.\n\nOne of many Intel(R) accelerated Python packages and performance library runtimes available on [PyPI](https://software.intel.com/en-us/articles/installing-the-intel-distribution-for-python-and-intel-performance-libraries-with-pip-and), and as part of [Intel(R) Distribution for Python](https://software.intel.com/en-us/distribution-for-python).\n\nFor latest release updates and security notifications, please [subscribe](https://software.intel.com/en-us/forums/intel-distribution-for-python) to the Intel(R) Distribution for Python Community forum.\n\nFree to use and redistribute pursuant to the [Intel Simplified Software License](https://software.intel.com/en-us/license/intel-simplified-software-license).\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://software.intel.com/en-us/articles/empowering-science-with-high-performance-python",
            "keywords": "",
            "license": "Proprietary - Intel",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ipp",
            "package_url": "https://pypi.org/project/ipp/",
            "platform": "",
            "project_url": "https://pypi.org/project/ipp/",
            "project_urls": {
               "Homepage": "https://software.intel.com/en-us/articles/empowering-science-with-high-performance-python"
            },
            "release_url": "https://pypi.org/project/ipp/2019.4.243/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Intel(R) Performance Primitives",
            "version": "2019.4.243",
            "yanked": false,
            "yanked_reason": null
         }
      ],
      "rsa": [
         {
            "author": "Gabriel Alves",
            "author_email": "gabriel.alves@pickcells.bio",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# sx\n#### Framework to manage gRPC-based microservices application",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "https://github.com/itsmealves/sx/releases/download/0.6.0/sx-0.6.0.tar.gz",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/itsmealves/sx",
            "keywords": "sx microservices rpc grpc Framework",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "sx",
            "package_url": "https://pypi.org/project/sx/",
            "platform": "",
            "project_url": "https://pypi.org/project/sx/",
            "project_urls": {
               "Download": "https://github.com/itsmealves/sx/releases/download/0.6.0/sx-0.6.0.tar.gz",
               "Homepage": "https://github.com/itsmealves/sx"
            },
            "release_url": "https://pypi.org/project/sx/0.6.0/",
            "requires_dist": null,
            "requires_python": ">=3.5",
            "summary": "Framework to manage gRPC-based microservices application",
            "version": "0.6.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "chrysn",
            "author_email": "chrysn@fsfe.org",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 3 - Alpha",
               "Intended Audience :: Education",
               "Intended Audience :: Science/Research",
               "License :: OSI Approved :: GNU General Public License (GPL)"
            ],
            "description": "UNKNOWN",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "UNKNOWN",
            "keywords": null,
            "license": "GPL",
            "maintainer": null,
            "maintainer_email": null,
            "name": "si",
            "package_url": "https://pypi.org/project/si/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/si/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "UNKNOWN"
            },
            "release_url": "https://pypi.org/project/si/0.1.1-1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Module to represent SI units",
            "version": "0.1.1-1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "leesoar",
            "author_email": "secure@tom.com",
            "bugtrack_url": null,
            "classifiers": [
               "License :: OSI Approved :: MIT License",
               "Programming Language :: Python :: 3.5",
               "Programming Language :: Python :: 3.6",
               "Programming Language :: Python :: 3.7",
               "Programming Language :: Python :: Implementation :: CPython",
               "Programming Language :: Python :: Implementation :: PyPy"
            ],
            "description": "\nDevelop soon\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://leesoar.com",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ida",
            "package_url": "https://pypi.org/project/ida/",
            "platform": "",
            "project_url": "https://pypi.org/project/ida/",
            "project_urls": {
               "Homepage": "https://leesoar.com"
            },
            "release_url": "https://pypi.org/project/ida/0.0.1/",
            "requires_dist": null,
            "requires_python": ">=3.3.0",
            "summary": "Develop soon",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Xavier Bruhiere",
            "author_email": "xavier.bruhiere@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 2 - Pre-Alpha",
               "Intended Audience :: Science/Research",
               "License :: OSI Approved :: Apache Software License",
               "Natural Language :: English",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2.7",
               "Topic :: Software Development",
               "Topic :: System :: Shells"
            ],
            "description": "python library DNA\n==================\n\n[![Coverage Status](https://coveralls.io/repos/hivetech/dna/badge.png)](https://coveralls.io/r/hivetech/dna)\n\n> Generic python utilities\n\nInstallation\n------------\n\n```console\npip install dna\n```\n\nExample\n-----\n\n```python\nimport dna.utils as utils\nimport dna.logger as logger\n\nlog_setup = logger.setup(level='info', filename='app.log')\nlog = logger.logger(__name__)\nwith log_setup.applicationbound():\n\n    log.info('hello', where='world')\n\n    useless_id = utils.generate_unique_id()\n    useless_name = utils.generate_random_name()\n\n    if utils.docker_check() and utils.is_running('ipyhon'):\n\n        print utils.Version('0.4.1')\n\n        module = utils.dynamic_import('dna.settings', 'LOG')\n        print utils.emphasis(module, align=False)\n\n        print utils.self_ip()\n```",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/hivetech/dna",
            "keywords": null,
            "license": "Apache 2.0",
            "maintainer": null,
            "maintainer_email": null,
            "name": "dna",
            "package_url": "https://pypi.org/project/dna/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/dna/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/hivetech/dna"
            },
            "release_url": "https://pypi.org/project/dna/0.0.7/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Generic python utilities",
            "version": "0.0.7",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Christopher Brown",
            "author_email": "io@henrian.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 2 - Pre-Alpha",
               "License :: OSI Approved :: MIT License",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.6",
               "Programming Language :: Python :: 2.7",
               "Topic :: Software Development :: Libraries :: Python Modules",
               "Topic :: System :: Archiving :: Packaging",
               "Topic :: System :: Filesystems"
            ],
            "description": "Python (package) installation\n-----------------------------\n\nGetting started from `PyPI <https://pypi.python.org/pypi/pi/>`__:\n\n::\n\n    easy_install pi\n\n`Whence easy\\_install? <#setuptools>`__\n\nCommands\n--------\n\n-  Uninstall package named \"pip\":\n\n   ::\n\n       pi uninstall pip\n\n-  Install package named \"filesequence\":\n\n   ::\n\n       pi install filesequence\n\n-  List paths that Python searches for imported modules:\n\n   ::\n\n       pi paths\n\n-  List installed packages:\n\n   ::\n\n       pi list\n\nTesting\n-------\n\nContinuous integration:\n\n|Travis CI Build Status|\n\nOr run tests locally:\n\n::\n\n    nosetests --with-doctest\n\nRelated\n~~~~~~~\n\n-  http://guide.python-distribute.org/creation.html\n-  `distribute/pkg\\_resources\n   docs <http://pythonhosted.org/distribute/pkg_resources.html>`__\n-  standard library\n   ```site`` <http://docs.python.org/2/library/site.html>`__\n-  standard library `environment\n   variables <http://docs.python.org/2/using/cmdline.html#environment-variables>`__\n\nSetuptools\n~~~~~~~~~~\n\n``pi`` does not yet completely replace\n`setuptools <https://pypi.python.org/pypi/setuptools>`__. You may need\nto install it first:\n\n+----------+-----------------------------------------+\n| Distro   | Package manager command                 |\n+==========+=========================================+\n| Ubuntu   | ``apt-get install python-setuptools``   |\n+----------+-----------------------------------------+\n| Mac      | built-in                                |\n+----------+-----------------------------------------+\n| Arch     | ``pacman -S python-setuptools``         |\n+----------+-----------------------------------------+\n| CentOS   | ``yum install python-setuptools``       |\n+----------+-----------------------------------------+\n\nLicense\n-------\n\nCopyright (c) 2013 Christopher Brown. `MIT\nLicensed <https://raw.github.com/chbrown/pi/master/LICENSE>`__.\n\n.. |Travis CI Build Status| image:: https://travis-ci.org/chbrown/pi.png?branch=master\n   :target: https://travis-ci.org/chbrown/pi",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/chbrown/pi",
            "keywords": null,
            "license": "Copyright (c) 2013 Christopher Brown\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.",
            "maintainer": null,
            "maintainer_email": null,
            "name": "pi",
            "package_url": "https://pypi.org/project/pi/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/pi/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/chbrown/pi"
            },
            "release_url": "https://pypi.org/project/pi/0.1.2/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Simpler python package installation",
            "version": "0.1.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ip",
            "package_url": "https://pypi.org/project/ip/",
            "platform": "",
            "project_url": "https://pypi.org/project/ip/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/ip/0.0.1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Vitalii Vanovschi",
            "author_email": "support@parallelpython.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Natural Language :: English",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Topic :: Software Development",
               "Topic :: System :: Distributed Computing"
            ],
            "description": "Parallel Python module (PP) provides an easy and efficient way to create parallel-enabled applications for SMP computers and clusters. PP module features cross-platform portability and dynamic load balancing. Thus application written with PP will parallelize efficiently even on heterogeneous and multi-platform clusters (including clusters running other application with variable CPU loads). Visit http://www.parallelpython.com for further information.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "http://www.parallelpython.com/downloads/pp/pp-1.6.5.zip",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "http://www.parallelpython.com",
            "keywords": null,
            "license": "BSD-like",
            "maintainer": null,
            "maintainer_email": null,
            "name": "pp",
            "package_url": "https://pypi.org/project/pp/",
            "platform": "Windows,Linux,Unix",
            "project_url": "https://pypi.org/project/pp/",
            "project_urls": {
               "Download": "http://www.parallelpython.com/downloads/pp/pp-1.6.5.zip",
               "Homepage": "http://www.parallelpython.com"
            },
            "release_url": "https://pypi.org/project/pp/1.6.5/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Parallel and distributed programming for Python",
            "version": "1.6.5",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Marcus Donnelly",
            "author_email": "marcus.k.donnelly@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "Intended Audience :: Science/Research",
               "License :: OSI Approved :: BSD License",
               "Programming Language :: Python :: 3",
               "Topic :: Scientific/Engineering"
            ],
            "description": "",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "Oceanography,Utilities",
            "license": "BSD",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ocutils",
            "package_url": "https://pypi.org/project/ocutils/",
            "platform": "",
            "project_url": "https://pypi.org/project/ocutils/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/ocutils/1.1.1/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Utility functions for oceanography related work",
            "version": "1.1.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Kiana Alessandra V. Villaera",
            "author_email": "kiana.villaera@senti.com.ph",
            "bugtrack_url": null,
            "classifiers": [
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 3"
            ],
            "description": "Contains everything you might need to perform essential data center functions\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/K-Winkles/dcutils",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dcutils",
            "package_url": "https://pypi.org/project/dcutils/",
            "platform": "",
            "project_url": "https://pypi.org/project/dcutils/",
            "project_urls": {
               "Homepage": "https://github.com/K-Winkles/dcutils"
            },
            "release_url": "https://pypi.org/project/dcutils/0.6/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "A simple package for data center utilities",
            "version": "0.6",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Mike Kazantsev",
            "author_email": "mk.fraggod@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Intended Audience :: Developers",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3.5",
               "Topic :: Software Development",
               "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description": "pretty-yaml (or pyaml)\n======================\n\nPyYAML-based python module to produce pretty and readable YAML-serialized data.\n\nThis module is for serialization only, see `ruamel.yaml`_ module for literate\nYAML parsing (keeping track of comments, spacing, line/column numbers of values, etc).\n\n[note: to dump stuff parsed by ruamel.yaml with this module, use only ``YAML(typ='safe')`` there]\n\n.. contents::\n  :backlinks: none\n\n\nWarning\n-------\n\nPrime goal of this module is to produce human-readable output that can be easily\nmanipulated and re-used, but maybe with some occasional caveats.\n\nOne good example of such \"caveat\" is that e.g. ``{'foo': '123'}`` will serialize\nto ``foo: 123``, which for PyYAML would be a bug, as 123 will then be read back\nas an integer from that, but here it's a feature.\n\nSo please do not rely on the thing to produce output that can always be\ndeserialized exactly to what was exported, at least - use PyYAML (e.g. with\noptions from the next section) for that.\n\n\nWhat this module does and why\n-----------------------------\n\nYAML is generally nice and easy format to read *if* it was written by humans.\n\nPyYAML can a do fairly decent job of making stuff readable, and the best\ncombination of parameters for such output that I've seen so far is probably this one::\n\n  >>> m = [123, 45.67, {1: None, 2: False}, u'some text']\n  >>> data = dict(a=u'asldnsa\\nasldpáknsa\\n', b=u'whatever text', ma=m, mb=m)\n  >>> yaml.safe_dump(data, sys.stdout, allow_unicode=True, default_flow_style=False)\n  a: 'asldnsa\n\n    asldpáknsa\n\n    '\n  b: whatever text\n  ma: &id001\n  - 123\n  - 45.67\n  - 1: null\n    2: false\n  - some text\n  mb: *id001\n\npyaml tries to improve on that a bit, with the following tweaks:\n\n* Most human-friendly representation options in PyYAML (that I know of) get\n  picked as defaults.\n\n* Does not dump \"null\" values, if possible, replacing these with just empty\n  strings, which have the same meaning but reduce visual clutter and are easier\n  to edit.\n\n* Dicts, sets, OrderedDicts, defaultdicts, namedtuples, etc are representable\n  and get sorted on output (OrderedDicts and namedtuples keep their ordering),\n  so that output would be as diff-friendly as possible, and not arbitrarily\n  depend on python internals.\n\n  It appears that at least recent PyYAML versions also do such sorting for\n  python dicts.\n\n* List items get indented, as they should be.\n\n* bytestrings that can't be auto-converted to unicode raise error, as yaml has\n  no \"binary bytes\" (i.e. unix strings) type.\n\n* Attempt is made to pick more readable string representation styles, depending\n  on the value, e.g.::\n\n    >>> yaml.safe_dump(cert, sys.stdout)\n    cert: '-----BEGIN CERTIFICATE-----\n\n      MIIH3jCCBcagAwIBAgIJAJi7AjQ4Z87OMA0GCSqGSIb3DQEBCwUAMIHBMRcwFQYD\n\n      VQQKFA52YWxlcm9uLm5vX2lzcDEeMBwGA1UECxMVQ2VydGlmaWNhdGUgQXV0aG9y\n    ...\n\n    >>> pyaml.p(cert):\n    cert: |\n      -----BEGIN CERTIFICATE-----\n      MIIH3jCCBcagAwIBAgIJAJi7AjQ4Z87OMA0GCSqGSIb3DQEBCwUAMIHBMRcwFQYD\n      VQQKFA52YWxlcm9uLm5vX2lzcDEeMBwGA1UECxMVQ2VydGlmaWNhdGUgQXV0aG9y\n    ...\n\n* \"force_embed\" option to avoid having &id stuff scattered all over the output\n  (which might be beneficial in some cases, hence the option).\n\n* \"&id\" anchors, if used, get labels from the keys they get attached to,\n  not just use meaningless enumerators.\n\n* \"string_val_style\" option to only apply to strings that are values, not keys,\n  i.e::\n\n    >>> pyaml.p(data, string_val_style='\"')\n    key: \"value\\nasldpáknsa\\n\"\n    >>> yaml.safe_dump(data, sys.stdout, allow_unicode=True, default_style='\"')\n    \"key\": \"value\\nasldpáknsa\\n\"\n\n* \"sort_dicts=False\" option to leave dict item ordering to python, and not\n  force-sort them in yaml output, which can be important for python 3.6+ where\n  they retain ordering info.\n\n* Has an option to add vertical spacing (empty lines) between keys on different\n  depths, to make output much more seekable.\n\nResult for the (rather meaningless) example above (without any additional\ntweaks)::\n\n  >>> pyaml.p(data)\n  a: |\n    asldnsa\n    asldpáknsa\n  b: 'whatever text'\n  ma: &ma\n    - 123\n    - 45.67\n    - 1:\n      2: false\n    - 'some text'\n  mb: *ma\n\n----------\n\nExtended example::\n\n  >>> pyaml.dump(conf, sys.stdout, vspacing=[2, 1]):\n  destination:\n\n    encoding:\n      xz:\n        enabled: true\n        min_size: 5120\n        options:\n        path_filter:\n          - \\.(gz|bz2|t[gb]z2?|xz|lzma|7z|zip|rar)$\n          - \\.(rpm|deb|iso)$\n          - \\.(jpe?g|gif|png|mov|avi|ogg|mkv|webm|mp[34g]|flv|flac|ape|pdf|djvu)$\n          - \\.(sqlite3?|fossil|fsl)$\n          - \\.git/objects/[0-9a-f]+/[0-9a-f]+$\n\n    result:\n      append_to_file:\n      append_to_lafs_dir:\n      print_to_stdout: true\n\n    url: http://localhost:3456/uri\n\n\n  filter:\n    - /(CVS|RCS|SCCS|_darcs|\\{arch\\})/$\n    - /\\.(git|hg|bzr|svn|cvs)(/|ignore|attributes|tags)?$\n    - /=(RELEASE-ID|meta-update|update)$\n\n\n  http:\n\n    ca_certs_files: /etc/ssl/certs/ca-certificates.crt\n\n    debug_requests: false\n\n    request_pool_options:\n      cachedConnectionTimeout: 600\n      maxPersistentPerHost: 10\n      retryAutomatically: true\n\n\n  logging:\n\n    formatters:\n      basic:\n        datefmt: '%Y-%m-%d %H:%M:%S'\n        format: '%(asctime)s :: %(name)s :: %(levelname)s: %(message)s'\n\n    handlers:\n      console:\n        class: logging.StreamHandler\n        formatter: basic\n        level: custom\n        stream: ext://sys.stderr\n\n    loggers:\n      twisted:\n        handlers:\n          - console\n        level: 0\n\n    root:\n      handlers:\n        - console\n      level: custom\n\nNote that unless there are many moderately wide and deep trees of data, which\nare expected to be read and edited by people, it might be preferrable to\ndirectly use PyYAML regardless, as it won't introduce another (rather pointless\nin that case) dependency and a point of failure.\n\n\nSome Tricks\n-----------\n\n* Pretty-print any yaml or json (yaml subset) file from the shell::\n\n    % python -m pyaml /path/to/some/file.yaml\n    % curl -s https://www.githubstatus.com/api/v2/summary.json | python -m pyaml\n\n* Process and replace json/yaml file in-place::\n\n    % python -m pyaml -r file-with-json.data\n\n* Easier \"debug printf\" for more complex data (all funcs below are aliases to\n  same thing)::\n\n    pyaml.p(stuff)\n    pyaml.pprint(my_data)\n    pyaml.pprint('----- HOW DOES THAT BREAKS!?!?', input_data, some_var, more_stuff)\n    pyaml.print(data, file=sys.stderr) # needs \"from __future__ import print_function\"\n\n* Force all string values to a certain style (see info on these in\n  `PyYAML docs`_)::\n\n    pyaml.dump(many_weird_strings, string_val_style='|')\n    pyaml.dump(multiline_words, string_val_style='>')\n    pyaml.dump(no_want_quotes, string_val_style='plain')\n\n  Using ``pyaml.add_representer()`` (note \\*p\\*yaml) as suggested in\n  `this SO thread`_ (or `github-issue-7`_) should also work.\n\n* Control indent and width of the results::\n\n    pyaml.dump(wide_and_deep, indent=4, width=120)\n\n  These are actually keywords for PyYAML Emitter (passed to it from Dumper),\n  see more info on these in `PyYAML docs`_.\n\n* Dump multiple yaml documents into a file: ``pyaml.dump_all([data1, data2, data3], dst_file)``\n\n  explicit_start=True is implied, unless explicit_start=False is passed.\n\n.. _PyYAML docs: http://pyyaml.org/wiki/PyYAMLDocumentation#Scalars\n.. _this SO thread: http://stackoverflow.com/a/7445560\n.. _github-issue-7: https://github.com/mk-fg/pretty-yaml/issues/7\n\n\nInstallation\n------------\n\nIt's a regular package for Python (3.x or 2.x).\n\nModule uses PyYAML_ for processing of the actual YAML files and should pull it\nin as a dependency.\n\nDependency on unidecode_ module is optional and should only be necessary if\nsame-id objects or recursion is used within serialized data.\n\nBe sure to use python3/python2, pip3/pip2, easy_install-... binaries below,\nbased on which python version you want to install the module for, if you have\nseveral on the system (as is norm these days for py2-py3 transition).\n\nUsing pip_ is the best way::\n\n  % pip install pyaml\n\n(add --user option to install into $HOME for current user only)\n\nOr, if you don't have \"pip\" command::\n\n  % python -m ensurepip\n  % python -m pip install --upgrade pip\n  % python -m pip install pyaml\n\n(same suggestion wrt \"install --user\" as above)\n\nOn a very old systems, one of these might work::\n\n  % curl https://bootstrap.pypa.io/get-pip.py | python\n  % pip install pyaml\n\n  % easy_install pyaml\n\n  % git clone --depth=1 https://github.com/mk-fg/pretty-yaml\n  % cd pretty-yaml\n  % python setup.py install\n\n(all of install-commands here also have --user option,\nsee also `pip docs \"installing\" section`_)\n\nCurrent-git version can be installed like this::\n\n  % pip install 'git+https://github.com/mk-fg/pretty-yaml#egg=pyaml'\n\nNote that to install stuff to system-wide PATH and site-packages (without\n--user), elevated privileges (i.e. root and su/sudo) are often required.\n\nUse \"...install --user\", `~/.pydistutils.cfg`_ or virtualenv_ to do unprivileged\ninstalls into custom paths.\n\nMore info on python packaging can be found at `packaging.python.org`_.\n\n.. _ruamel.yaml: https://bitbucket.org/ruamel/yaml/\n.. _PyYAML: http://pyyaml.org/\n.. _unidecode: http://pypi.python.org/pypi/Unidecode\n.. _pip: http://pip-installer.org/\n.. _pip docs \"installing\" section: http://www.pip-installer.org/en/latest/installing.html\n.. _~/.pydistutils.cfg: http://docs.python.org/install/index.html#distutils-configuration-files\n.. _virtualenv: http://pypi.python.org/pypi/virtualenv\n.. _packaging.python.org: https://packaging.python.org/installing/\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/mk-fg/pretty-yaml",
            "keywords": "yaml serialization pretty print format human readable readability",
            "license": "WTFPL",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyaml",
            "package_url": "https://pypi.org/project/pyaml/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyaml/",
            "project_urls": {
               "Homepage": "https://github.com/mk-fg/pretty-yaml"
            },
            "release_url": "https://pypi.org/project/pyaml/20.4.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "PyYAML-based module to produce pretty and readable YAML-serialized data",
            "version": "20.4.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "haogege",
            "author_email": "1394168335@qq.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# pyyml\nUse python in yaml\n## 基本使用\n在python中使用：\n```python\nfrom pyyml import load\n\nwith open('conf.yml') as f:\n    raw_conf = f.read()\nconfig = load(raw_conf)\nprint(config)\n```\n在yaml中 `${...}` 中的内容将会被python执行：\n\nyaml内容\n```yaml\nsum: ${1 + 1}\n```\n实际解析内容\n```python\n{'sum': 2}\n```\n通过在文件开头第一行注释来导入所需的包：\n\n```yaml\n# libs:['os', 'os.path:path', 'this']\n```\n通过 [包名]:[别名] 取别名导入包\n\n`'os.path:path' 等同于 python 中的 from os import path`\n\n例如yaml文件内容\n```yaml\n# libs:['os', 'os.path:path', 'this']\nos_name: ${os.name}\nbase_dir: ${path.abspath(path.dirname(__file__))}\n```\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/q1394168335/pyyml",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyyml",
            "package_url": "https://pypi.org/project/pyyml/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyyml/",
            "project_urls": {
               "Homepage": "https://github.com/q1394168335/pyyml"
            },
            "release_url": "https://pypi.org/project/pyyml/0.0.2/",
            "requires_dist": [
               "pyyaml (>=3.13)"
            ],
            "requires_python": "",
            "summary": "Use python in yaml",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Michael Foord",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "rs",
            "package_url": "https://pypi.org/project/rs/",
            "platform": "",
            "project_url": "https://pypi.org/project/rs/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/rs/0.0/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "",
            "version": "0.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Ramses",
            "author_email": "hello@ramses.tech",
            "bugtrack_url": null,
            "classifiers": [
               "Framework :: Pyramid",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.4",
               "Programming Language :: Python :: 3.5",
               "Topic :: Internet :: WWW/HTTP",
               "Topic :: Internet :: WWW/HTTP :: WSGI :: Application"
            ],
            "description": "# `Ra`\n[![Build Status](https://travis-ci.org/ramses-tech/ra.svg?branch=master)](https://travis-ci.org/ramses-tech/ra)\n[![Documentation](https://readthedocs.org/projects/ra/badge/?version=stable)](http://ra.readthedocs.org)\n\nRa is a test suite generator and helper library for testing APIs described\nin [RAML](http://raml.org/).\n\nOut of the box, Ra provides a basic, automated test suite to test the routes\ndeclared in the RAML document. It provides test helpers for augmenting these\nwith custom tests to test application-specific logic, side effects, etc.\n\nRa is primarily designed to provide testing support for\n[ramses](http://github.com/ramses-tech/ramses) and\n[nefertari](http://github.com/ramses-tech/nefertari) applications, but can\nbe used with any WSGI-conformant, RAML-described API.\n\nIt currently depends on pytest but may be adapted for other test frameworks\nin the future. It works best using WebTest but doesn't require it.\n\n## Name\n\nRa was the god of the sun, the most important god in ancient Egypt.\n\n\n## Try it (dev)\n\nRun the test suite:\n\n```bash\n    $ pip install -r requirements.txt\n    $ py.test\n```\n\nCheck out the example:\n\n```bash\n    $ cd examples/ramses-test\n    $ pip install -r requirements.txt\n    $ py.test\n```\n\nThe example RAML at `examples/ramses-test/api.raml` and the test file\n`examples/ramses-test/tests/test_api.py` should be helpful to reference.\n\nSee the docs in `docs/`, and the `api.raml` and `tests/test_api.py` in\n`tests/apps/ramses_test`",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/ramses-tech/ra",
            "keywords": "web raml",
            "license": "UNKNOWN",
            "maintainer": null,
            "maintainer_email": null,
            "name": "ra",
            "package_url": "https://pypi.org/project/ra/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/ra/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/ramses-tech/ra"
            },
            "release_url": "https://pypi.org/project/ra/0.2.0/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Test RAML API definition",
            "version": "0.2.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Shoumik Palkar",
            "author_email": "shoumik@cs.stanford.edu",
            "bugtrack_url": null,
            "classifiers": [
               "License :: OSI Approved :: BSD License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 3"
            ],
            "description": "## split annotations\n\nThis package contains the Python implementation of [split annotations](), a system for optimizing applications\nthat combine many data-intensive library functions. See some useful links below.\n\n* [Documentation for this package](https://www.weld.rs/split-annotations/docs/)\n* [GitHub repository](https://www.github.com/weld-project/split-annotations)\n* [SOSP 2019 Paper describing the system](https://shoumik.xyz/static/papers/mozart-sosp19final.pdf)\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://www.github.com/weld-project/split-annotations",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "sa",
            "package_url": "https://pypi.org/project/sa/",
            "platform": "",
            "project_url": "https://pypi.org/project/sa/",
            "project_urls": {
               "Homepage": "https://www.github.com/weld-project/split-annotations"
            },
            "release_url": "https://pypi.org/project/sa/0.0.4/",
            "requires_dist": [
               "numpy",
               "pandas",
               "scipy",
               "sharedmem"
            ],
            "requires_python": ">=3.6",
            "summary": "Python split annotations package",
            "version": "0.0.4",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Mitch Garnaat",
            "author_email": "mitch@garnaat.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.6",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.3",
               "Programming Language :: Python :: 3.4",
               "Topic :: Internet"
            ],
            "description": "####\nboto\n####\nboto 2.49.0\n\nReleased: 11-July-2018\n\n.. image:: https://travis-ci.org/boto/boto.svg?branch=develop\n        :target: https://travis-ci.org/boto/boto\n\n.. image:: https://pypip.in/d/boto/badge.svg\n        :target: https://pypi.python.org/pypi/boto/\n\n******\nBoto 3\n******\n\n`Boto3 <https://github.com/boto/boto3>`__, the next version of Boto, is now\nstable and recommended for general use.  It can be used side-by-side with Boto\nin the same project, so it is easy to start using Boto3 in your existing\nprojects as well as new projects. Going forward, API updates and all new\nfeature work will be focused on Boto3.\n\nTo assist users who still depend on Boto and cannot immediately switch over, we\nwill be triaging and addressing critical issues and PRs in Boto in the short\nterm. As more users make the switch to Boto3, we expect to reduce our\nmaintenance involvement over time. If we decide on a cutoff date or any\nsignificant changes to our maintenance plan, we will make pre-announcements\nwell ahead of schedule to allow ample time for our users to adapt/migrate.\n\n\n************\nIntroduction\n************\n\nBoto is a Python package that provides interfaces to Amazon Web Services.\nCurrently, all features work with Python 2.6 and 2.7. Work is under way to\nsupport Python 3.3+ in the same codebase. Modules are being ported one at\na time with the help of the open source community, so please check below\nfor compatibility with Python 3.3+.\n\nTo port a module to Python 3.3+, please view our `Contributing Guidelines`_\nand the `Porting Guide`_. If you would like, you can open an issue to let\nothers know about your work in progress. Tests **must** pass on Python\n2.6, 2.7, 3.3, and 3.4 for pull requests to be accepted.\n\n\n********\nServices\n********\n\nAt the moment, boto supports:\n\n* Compute\n\n  * Amazon Elastic Compute Cloud (EC2) (Python 3)\n  * Amazon Elastic Map Reduce (EMR) (Python 3)\n  * AutoScaling (Python 3)\n  * Amazon Kinesis (Python 3)\n  * AWS Lambda (Python 3)\n  * Amazon EC2 Container Service (Python 3)\n\n* Content Delivery\n\n  * Amazon CloudFront (Python 3)\n\n* Database\n\n  * Amazon Relational Data Service (RDS)\n  * Amazon DynamoDB (Python 3)\n  * Amazon SimpleDB (Python 3)\n  * Amazon ElastiCache (Python 3)\n  * Amazon Redshift (Python 3)\n\n* Deployment and Management\n\n  * AWS Elastic Beanstalk (Python 3)\n  * AWS CloudFormation (Python 3)\n  * AWS Data Pipeline (Python 3)\n  * AWS Opsworks (Python 3)\n  * AWS CloudTrail (Python 3)\n  * AWS CodeDeploy (Python 3)\n\n* Administration & Security\n\n  * AWS Identity and Access Management (IAM) (Python 3)\n  * AWS Key Management Service (KMS) (Python 3)\n  * AWS Config (Python 3)\n  * AWS CloudHSM (Python 3)\n\n* Application Services\n\n  * Amazon CloudSearch (Python 3)\n  * Amazon CloudSearch Domain (Python 3)\n  * Amazon Elastic Transcoder (Python 3)\n  * Amazon Simple Workflow Service (SWF) (Python 3)\n  * Amazon Simple Queue Service (SQS) (Python 3)\n  * Amazon Simple Notification Server (SNS) (Python 3)\n  * Amazon Simple Email Service (SES) (Python 3)\n  * Amazon Cognito Identity (Python 3)\n  * Amazon Cognito Sync (Python 3)\n  * Amazon Machine Learning (Python 3)\n\n* Monitoring\n\n  * Amazon CloudWatch (EC2 Only) (Python 3)\n  * Amazon CloudWatch Logs (Python 3)\n\n* Networking\n\n  * Amazon Route53 (Python 3)\n  * Amazon Route 53 Domains (Python 3)\n  * Amazon Virtual Private Cloud (VPC) (Python 3)\n  * Elastic Load Balancing (ELB) (Python 3)\n  * AWS Direct Connect (Python 3)\n\n* Payments and Billing\n\n  * Amazon Flexible Payment Service (FPS)\n\n* Storage\n\n  * Amazon Simple Storage Service (S3) (Python 3)\n  * Amazon Glacier (Python 3)\n  * Amazon Elastic Block Store (EBS)\n  * Google Cloud Storage\n\n* Workforce\n\n  * Amazon Mechanical Turk\n\n* Other\n\n  * Marketplace Web Services (Python 3)\n  * AWS Support (Python 3)\n\nThe goal of boto is to support the full breadth and depth of Amazon\nWeb Services.  In addition, boto provides support for other public\nservices such as Google Storage in addition to private cloud systems\nlike Eucalyptus, OpenStack and Open Nebula.\n\nBoto is developed mainly using Python 2.6.6 and Python 2.7.3 on Mac OSX\nand Ubuntu Maverick.  It is known to work on other Linux distributions\nand on Windows.  Most of Boto requires no additional libraries or packages\nother than those that are distributed with Python.  Efforts are made\nto keep boto compatible with Python 2.5.x but no guarantees are made.\n\n************\nInstallation\n************\n\nInstall via `pip`_:\n\n::\n\n    $ pip install boto\n\nInstall from source:\n\n::\n\n    $ git clone git://github.com/boto/boto.git\n    $ cd boto\n    $ python setup.py install\n\n**********\nChangeLogs\n**********\n\nTo see what has changed over time in boto, you can check out the\nrelease notes at `http://docs.pythonboto.org/en/latest/#release-notes`\n\n***************************\nFinding Out More About Boto\n***************************\n\nThe main source code repository for boto can be found on `github.com`_.\nThe boto project uses the `gitflow`_ model for branching.\n\n`Online documentation`_ is also available. The online documentation includes\nfull API documentation as well as Getting Started Guides for many of the boto\nmodules.\n\nBoto releases can be found on the `Python Cheese Shop`_.\n\nJoin our IRC channel `#boto` on FreeNode.\nWebchat IRC channel: http://webchat.freenode.net/?channels=boto\n\nJoin the `boto-users Google Group`_.\n\n*************************\nGetting Started with Boto\n*************************\n\nYour credentials can be passed into the methods that create\nconnections.  Alternatively, boto will check for the existence of the\nfollowing environment variables to ascertain your credentials:\n\n**AWS_ACCESS_KEY_ID** - Your AWS Access Key ID\n\n**AWS_SECRET_ACCESS_KEY** - Your AWS Secret Access Key\n\nCredentials and other boto-related settings can also be stored in a\nboto config file.  See `this`_ for details.\n\n.. _Contributing Guidelines: https://github.com/boto/boto/blob/develop/CONTRIBUTING\n.. _Porting Guide: http://boto.readthedocs.org/en/latest/porting_guide.html\n.. _pip: http://www.pip-installer.org/\n.. _release notes: https://github.com/boto/boto/wiki\n.. _github.com: http://github.com/boto/boto\n.. _Online documentation: http://docs.pythonboto.org\n.. _Python Cheese Shop: http://pypi.python.org/pypi/boto\n.. _this: http://docs.pythonboto.org/en/latest/boto_config_tut.html\n.. _gitflow: http://nvie.com/posts/a-successful-git-branching-model/\n.. _neo: https://github.com/boto/boto/tree/neo\n.. _boto-users Google Group: https://groups.google.com/forum/?fromgroups#!forum/boto-users\n\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/boto/boto/",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "boto",
            "package_url": "https://pypi.org/project/boto/",
            "platform": "Posix; MacOS X; Windows",
            "project_url": "https://pypi.org/project/boto/",
            "project_urls": {
               "Homepage": "https://github.com/boto/boto/"
            },
            "release_url": "https://pypi.org/project/boto/2.49.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Amazon Web Services Library",
            "version": "2.49.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Hadi Asghari",
            "author_email": "hd.asghari@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 3",
               "Topic :: Software Development :: Libraries :: Python Modules",
               "Topic :: System :: Networking"
            ],
            "description": "pyasn\n=====\n\n.. image:: https://pypip.in/v/pyasn/badge.png\n   :target: https://pypi.python.org/pypi/pyasn\n\n.. image:: https://pypip.in/d/pyasn/badge.png\n   :target: https://pypi.python.org/pypi/pyasn\n\n\n**pyasn** is a Python extension module that enables very fast IP address to Autonomous System Number lookups.\nCurrent state and Historical lookups can be done, based on the MRT/RIB BGP archive used as input.\n\n*pyasn* is different from other ASN lookup tools in that it provides **offline** and **historical** lookups.\nIt provides utility scripts for users to build their own lookup databases based on any MRT/RIB archive.\nThis makes *pyasn* much faster than online dig/whois/json lookups.\n\nThe module is written in C and Python, and cross-compiles on Linux and Windows. Underneath, it uses a radix tree\ndata structure for storage of IP addresses. In the current version, it borrows code from *py-radix* to support\nboth IPV4 and IPV6 network prefixes. The current release is a beta. Compared to the previous version, it provides\nsupport for Python 2 and 3; adds new functionality, performance improvements, and unit-tests.\n\n*pyasn* is developed and maintained by researchers at the Economics of Cybersecurity research group at Delft\nUniversity of Technology (http://econsec.tbm.tudlft.nl). The package is used on an almost daily basis and bugs\nare fixed pretty quickly.  The package is largely developed and maintained by Hadi Asghari and Arman Noroozian.\nPlease report any bugs via GitHub (https://github.com/hadiasghari/pyasn) or email the developers.\n\n\nInstallation\n============\nInstallation is a breeze via pip: ::\n\n    pip install pyasn --pre\n\nOr with the standard Python: ::\n\n    python setup.py build\n    python setup.py install --record log\n\nYou will need to have pip, setuptools and build essentials installed if you build the package manually. On\nUbuntu/Debian you can get them using the following command: ::\n\n    sudo apt-get install python-pip python-dev build-essential\n\nBuilding the C module on Windows, using either pip or from source, requires Microsoft Visual C++ to be installed.\npyasn has been tested using Visual C++ Express 2010, available freely from Microsoft's website, on both the\nofficial Python 3.4 release and Miniconda3. Other versions of Python, Visual Studio, and Cygwin could also work\nwith minor modifications.\n\nWe plan to release *pyasn* packages to major Linux repositories once it is out of beta.\n\n\nUsage\n=====\nA simple example that demonstrates most of the features: ::\n\n    import pyasn\n\n    # Initialize module and load IP to ASN database\n    # the sample database can be downloaded or built - see below\n    asndb = pyasn.pyasn('ipasn_20140513.dat')\n\n    asndb.lookup('8.8.8.8')\n    # should return: (15169, '8.8.8.0/24'), the origin AS, and the BGP prefix it matches\n\n    asndb.get_as_prefixes(1128)\n    # returns ['130.161.0.0/16', '131.180.0.0/16', '145.94.0.0/16'], TU-Delft prefixes\n\n\nIPASN Data Files\n================\nIPASN data files are a long list of prefixes used to lookup AS number for IPs. An excerpt from such a file looks\nlike this: ::\n\n    ; IP-ASN32-DAT file\n    ; Original file : <Path to a rib file>\n    ; Converted on  : Tue May 13 22:03:05 2014\n    ; CIDRs         : 512490\n    ;\n    1.0.0.0/24  15169\n    1.0.128.0/17        9737\n    1.0.128.0/18        9737\n    1.0.128.0/19        9737\n    1.0.129.0/24        23969\n    ...\n\nIPASN data files can be created by downloading MRT/RIB BGP archives from Routeviews (or similar sources),\nand parsing them using provided scripts that tail the BGP AS-Path. This can be done simply as follows: ::\n\n    pyasn_util_download.py --latest\n    pyasn_util_convert.py --single <Downloaded RIB File> <ipasn_db_file_name>\n\n\n**NOTE:** These scripts are by default installed to ``/usr/local/bin`` and can be executed directly. If you installed\nthe package to a user directory, these scripts will not be on the path and you will have to invoke them by navigating\nto the folder in which they have been copied (e.g. ``~/.local/bin``).\n\nWe also provide download links to a large number of previously generated IPASN data files. These are based on\nweekly  snapshots of the Routeviews data from 2005-2015, accessible here:\nhttp://data.3tu.nl/repository/uuid:d4d23b8e-2077-4592-8b47-cb476ad16e12\n\n**New in v1.6:** To save disk space, you can gzip IPASN data files. The load time will be slighlty longer.\n\n\nPerformance Tip\n===============\nInitial loading of a IPASN data file is the most heavy operation of the package. For fast lookups using multiple\nIPASN data files, for instance for historical lookups on multiple dates, we recommend caching of loaded data files\nfor better performance.\n\n\nUninstalling pyasn\n==================\nYou can remove *pyasn* as follows: ::\n\n    pip uninstall pyasn\n\nIf you built and installed the package your self use the recorded log to remove the installed files.\n\n**Removing PyASN version 1.2**: *pyasn* v1.5/1.6 and v1.2 can be installed side by side (due to lower-cased package\nname). To avoid mistakes, you can uninstall the old **PyASN** by deleting the following files from your Python\ninstallation: ::\n\n    PYTHONDIR/dist-packages/PyASN.so\n    PYTHONDIR/dist-packages/PyASN-1.2.egg-info\n\n\nPackage Structure\n=================\nThe main portions of the directory tree are as follows: ::\n\n    .\n    ├── pyasn/__init__.py       # Python code of the main pyasn module\n    ├── pyasn/pyasn_radix.c     # C extension code (Python RADIX module with bulk load)\n    ├── pyasn/_radix/*          # C extension code (Based on original RADIX code from MRTd)\n    ├── pyasn/mrtx.py           # python module used to convert MRT files to pyasn DB files\n    ├── pyasn-utils/*.py        # Scripts to download & convert BGP MRT dumps to IPASN databases\n    ├── data/                   # Test Resources and some sample DBs to use\n    ├── tests/                  # Tests\n    └── setup.py                # Standard setup.py for installation/testing/etc.\n\n\n\nTesting pyasn Sources\n=====================\nA limited number of unit tests are provided in the ``tests/`` directory when downlading the sources. They can be\nrun with the following command: ::\n\n    python setup.py test\n\nThis beta release has been tested under python version 2.6, 2.7, 3.3, 3.4 and 3.5. We appreciate contributions towards\ntesting *pyasn*!\n\n**New in v1.6:** pyasn_util_convert.py offers a '--dump-screen' option which shows the MRT/RIB archive contents and\nthe chosen origin-AS.\n\n\nLicense & Acknowledgments\n=========================\n*pyasn* is licensed under the MIT license.\n\nIt extends code from py-radix (Michael J. Schultz and Damien Miller),  and improves upon it in several ways, for\ninstance in lowering memory usage and adding bulk prefix/origin load. The underlying radix tree implementation is\ntaken (and modified) from MRTd. These are all subject to their respective licenses.  Please see the LICENSE file\nfor details.\n\nThanks to Dr. Chris Lee (of Shadowserver) for proposing the use of radix trees.\n\nA handful of GitHub developers have contributed features and bug fixes to the latest releases.\nMany thanks to all of them.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": null,
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/hadiasghari/pyasn",
            "keywords": "ip asn autonomous system bgp whois prefix radix python routing networking",
            "license": "MIT",
            "maintainer": null,
            "maintainer_email": null,
            "name": "pyasn",
            "package_url": "https://pypi.org/project/pyasn/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/pyasn/",
            "project_urls": {
               "Homepage": "https://github.com/hadiasghari/pyasn"
            },
            "release_url": "https://pypi.org/project/pyasn/1.6.0b1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Offline IP address to Autonomous System Number lookup module.",
            "version": "1.6.0b1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Perdix Software",
            "author_email": "ssmith@perdixsw.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 2 - Pre-Alpha",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.4",
               "Programming Language :: Python :: 3.5",
               "Programming Language :: Python :: 3.6",
               "Topic :: Office/Business :: Financial",
               "Topic :: Scientific/Engineering :: Mathematics"
            ],
            "description": "UNKNOWN",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "https://www.github.com/perdixsw/umpy/tarball/0.1.0",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://www.github.com/perdixsw/umpy",
            "keywords": "units,measure,measurement,conversion,converter",
            "license": "MIT",
            "maintainer": null,
            "maintainer_email": null,
            "name": "umpy",
            "package_url": "https://pypi.org/project/umpy/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/umpy/",
            "project_urls": {
               "Download": "https://www.github.com/perdixsw/umpy/tarball/0.1.0",
               "Homepage": "https://www.github.com/perdixsw/umpy"
            },
            "release_url": "https://pypi.org/project/umpy/0.1.0/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Simple unit of measure conversion for python, optimized for manufacturing contexts.",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Jay Marcyes",
            "author_email": "jay@marcyes.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Environment :: Console",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Topic :: Software Development :: Testing"
            ],
            "description": "Pyt\n===\n\nPyt is a lightweight wrapper around `Python’s unittest\nmodule <https://docs.python.org/3/library/unittest.html>`__ that adds\nsome nice features and enhancements over the stock ``unittest`` module.\n\nQuickstart\n~~~~~~~~~~\n\nPyt overrides unittest’s built-in pathfinding to be smarter and less\nverbose, so you can match tests using prefix matching which makes\nrunning a test like:\n\n::\n\n   $ python -m unittest tests.foo_test.BarTestCase.test_che\n\nas simple as:\n\n::\n\n   $ pyt foo.Bar.che\n\nBut it’s even less verbose if you want it to be, pyt can reach into the\nmodules and classes to do its matching, so you don’t even need to\nspecify the module and class if you don’t want to:\n\n::\n\n   $ pyt che\n\nMore examples\n^^^^^^^^^^^^^\n\nTo run all the ``Happy`` tests:\n\n::\n\n   $ pyt Happy\n\nTo run all the ``newmodule`` tests:\n\n::\n\n   $ pyt newmodule\n\nTo run more than one test:\n\n::\n\n   $ pyt test1 test2 ...\n\nTo run every test ``pyt`` can find:\n\n::\n\n   $ pyt\n\nAnd the way I like to run all tests in the current directory:\n\n::\n\n   $ pyt -vb\n\nWhich can also be written:\n\n::\n\n   $ pyt --verbose --buffer\n\nFlags\n~~~~~\n\nTo see everything pyt can do\n\n::\n\n   $ pyt --help\n\n–warnings\n^^^^^^^^^\n\nThis will convert warnings into errors.\n\n::\n\n   $ pyt --warnings\n\n–rerun\n^^^^^^\n\nIf your last testrun had failing tests this will rerun only the tests\nthat failed.\n\n::\n\n   $pyt --rerun\n\nThings to be aware of\n~~~~~~~~~~~~~~~~~~~~~\n\npyt uses Python’s PEP 8 style conventions\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n``pyt`` uses `Python’s code styling\nconventions <http://www.python.org/dev/peps/pep-0008/>`__ to decide what\nis the module and class, so, given input like this:\n\n::\n\n   $ pyt foo.bar.Baz.che\n\n``pyt`` will consider ``foo.bar`` to be the module, ``Baz`` to be a\nclass (because it starts with a capital letter), and ``che`` to be a\nmethod (since it comes after the class).\n\nLikewise, ``pyt`` uses unittest conventions, so a test module should end\nwith ``_test`` (eg, ``foo.bar_test``) or start with test (eg,\n``test_foo.py``) and a TestCase class should extend\n``unittest.TestCase``, and test methods should start with ``test_`` (eg,\n``test_che``).\n\nVague input can cause pyt to run more tests than you expect\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSo if you have something like this:\n\n::\n\n   project/\n     __init__.py\n     user.py\n     foo/\n       __init__.py\n       user.py\n     tests/\n       __init__.py\n       user_test.py\n       foo/\n         __init__.py\n         user_test.py\n\nAnd you want to run tests for ``foo.user`` and you run:\n\n::\n\n   $ pyt user\n\nit will run both ``tests/user_test`` and ``tests.foo.user_test``, the\nsolution is to just be more verbose when you have to be:\n\n::\n\n   $ pyt foo.user\n\nEnvironment Variables\n^^^^^^^^^^^^^^^^^^^^^\n\nIf you are running the tests within pyt, you might notice there is an\nenvironment variable ``PYT_TEST_COUNT`` that contains the count of how\nmany tests pyt found to run.\n\nInstallation\n------------\n\nUse ``pip``:\n\n::\n\n   $ pip install pyt\n\nYou can also get it directly from the repo:\n\n::\n\n   $ pip install --upgrade git+https://github.com/Jaymon/pyt#egg=pyt\n\nIf you install pyt using Python 3 it can also be invoked using the\n``pyt3`` command:\n\n::\n\n   $ pyt3 --help\n\nLikewise, Python 2 installs a ``pyt2`` command:\n\n::\n\n   $ pyt2 --help\n\nTesting\n-------\n\nTesting in 2.7 on most systems:\n\n::\n\n   $ python -m unittest pyt_test\n\nTesting in 3.5 on MacOS:\n\n::\n\n   $ python3.5 -m unittest pyt_test\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "http://github.com/Jaymon/pyt",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyt",
            "package_url": "https://pypi.org/project/pyt/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyt/",
            "project_urls": {
               "Homepage": "http://github.com/Jaymon/pyt"
            },
            "release_url": "https://pypi.org/project/pyt/1.0.5/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "easily run python unit tests",
            "version": "1.0.5",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Bradley Odell",
            "author_email": "btodell@hotmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Environment :: Console",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
               "Natural Language :: English",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 2.6",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Topic :: Software Development :: Build Tools"
            ],
            "description": "pyz\n===\n\n*Packages all source code and dependencies into a single Python zip application.*\n\nSummary\n-------\n\nDeploying a Python application any larger than a single file is\ncumbersome - this library aims to solve that problem.\n\nPython has been able to run code from within a zip file since version\n2.6. Python 3.5 introduced the `zipapp <https://docs.python.org/3/library/zipapp.html>`__ module\nwhich aims to simplify the process of creating a zip application.\nHowever, **zipapp** isn't a complete solution to the problem - it\ndoesn't handle dependencies and it doesn't include certain extra\nfeatures that this library provides.\n\nThis library allows you to bundle all of your Python code **AND** your\ndependencies into a single Python zip application file.\n\nNote: The dependency bundling feature is not implemented yet, but it is\nin the works!\n\nFeatures\n--------\n\n1. Bundle all Python source code with fine-grained control over included files.\n2. Ability to \"unixify\" the output application by prepending a customizable\n   `shebang <https://en.wikipedia.org/wiki/Shebang_(Unix)>`__.\n3. Python interpreter version check - display a friendly notice instead\n   of a Python exception if the user runs your application using an\n   unsupported Python version.\n\nPlanned\n-------\n\n1. Automatically identify dependencies and package them accordingly.\n",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "https://github.com/BTOdell/pyz/archive/0.4.3.tar.gz",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/BTOdell/pyz",
            "keywords": "pyz zip app zipapp bundle dependencies library",
            "license": "GPLv3",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyz",
            "package_url": "https://pypi.org/project/pyz/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyz/",
            "project_urls": {
               "Download": "https://github.com/BTOdell/pyz/archive/0.4.3.tar.gz",
               "Homepage": "https://github.com/BTOdell/pyz"
            },
            "release_url": "https://pypi.org/project/pyz/0.4.3/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Packages all source code and dependencies into a single Python zip application.",
            "version": "0.4.3",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Val Neekman",
            "author_email": "info@neekware.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 3 - Alpha",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Operating System :: POSIX",
               "Programming Language :: Python",
               "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description": "AWSLI\n====================\n\n**Amazon Web Services Line Interpreter**\n\n**Author:** Val Neekman [ info@neekware.com, @vneekman ]\n\nOverview\n========\n\nA Line Interpreter for Amazon Web Services.\n\nHow to install\n==================\n\n    1. easy_install awsli\n    2. pip install awsli\n    3. git clone http://github.com/un33k/awsli\n        a. cd awsli\n        b. run python setup.py\n    4. wget https://github.com/un33k/awsli/zipball/master\n        a. unzip the downloaded file\n        b. cd into awsli-* directory\n        c. run python setup.py\n\nHow to use\n=================\n\n``Usage``\n\n``Note:``\n\nRunning the tests\n=================\n\nTo run the tests against the current environment:\n\n    python test.py\n\nChangelog\n=========\n\n0.1\n-----\n\n* Initial release\n\n\nLicense\n=======\n\nCopyright (c) 2012, Val Neekman\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without \nmodification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this \nlist of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this \nlist of conditions and the following disclaimer in the documentation and/or \nother materials provided with the distribution.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND \nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED \nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE \nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE \nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL \nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR \nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, \nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE \nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/un33k/awsli",
            "keywords": null,
            "license": "BSD",
            "maintainer": null,
            "maintainer_email": null,
            "name": "awsli",
            "package_url": "https://pypi.org/project/awsli/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/awsli/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/un33k/awsli"
            },
            "release_url": "https://pypi.org/project/awsli/0.0.1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "A Line Interpreter for Amazon Web Services",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Armin Ronacher",
            "author_email": "armin.ronacher@active-4.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Environment :: Web Environment",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
               "Topic :: Software Development :: Libraries :: Python Modules",
               "Topic :: Text Processing :: Markup :: HTML"
            ],
            "description": "jinja\n~~~~~\n\nJinja is a `sandboxed`_ template engine written in pure Python. It\nprovides a `Django`_ like non-XML syntax and compiles templates into\nexecutable python code. It's basically a combination of Django templates\nand python code.\n\nNutshell\n--------\n\nHere a small example of a Jinja template::\n\n    {% extends 'base.html' %}\n    {% block title %}Memberlist{% endblock %}\n    {% block content %}\n      <ul>\n      {% for user in users %}\n        <li><a href=\"{{ user.url|e }}\">{{ user.username|e }}</a></li>\n      {% endfor %}\n      </ul>\n    {% endblock %}\n\nPhilosophy\n----------\n\nApplication logic is for the controller but don't try to make the life\nfor the template designer too hard by giving him too few functionality.\n\nFor more informations visit the new `jinja webpage`_ and `documentation`_.\n\nNote\n----\n\nThis is the Jinja 1.0 release which is completely incompatible with the\nold \"pre 1.0\" branch. The old branch will still receive security updates\nand bugfixes but the 1.0 branch will be the only version that receives\nsupport.\n\nIf you have an application that uses Jinja 0.9 and won't be updated in\nthe near future the best idea is to ship a Jinja 0.9 checkout together\nwith the application.\n\nThe `Jinja tip`_ is installable via `easy_install` with ``easy_install\nJinja==dev``.\n\n.. _sandboxed: http://en.wikipedia.org/wiki/Sandbox_(computer_security)\n.. _Django: http://www.djangoproject.com/\n.. _jinja webpage: http://jinja.pocoo.org/\n.. _documentation: http://jinja.pocoo.org/documentation/index.html\n.. _Jinja tip: http://dev.pocoo.org/hg/jinja-main/archive/tip.tar.gz#egg=Jinja-dev\n\n\n:copyright: 2007 by Armin Ronacher.\n:license: BSD, see LICENSE for more details.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "http://jinja.pocoo.org/",
            "keywords": "python.templating.engines",
            "license": "BSD",
            "maintainer": null,
            "maintainer_email": null,
            "name": "Jinja",
            "package_url": "https://pypi.org/project/Jinja/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/Jinja/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "http://jinja.pocoo.org/"
            },
            "release_url": "https://pypi.org/project/Jinja/1.2/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "A small but fast and easy to use stand-alone template engine written in pure python.",
            "version": "1.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Hsiaoming Yang",
            "author_email": "me@lepture.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Environment :: Console",
               "Environment :: Web Environment",
               "Framework :: Django",
               "Framework :: Flask",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.5",
               "Programming Language :: Python :: 3.6",
               "Programming Language :: Python :: 3.7",
               "Programming Language :: Python :: 3.8",
               "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
               "Topic :: Internet :: WWW/HTTP :: WSGI :: Application",
               "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description": "Authlib\n=======\n\nThe ultimate Python library in building OAuth and OpenID Connect servers.\nJWS, JWK, JWA, JWT are included.\n\nUseful Links\n------------\n\n1. Homepage: https://authlib.org/\n2. Documentation: https://docs.authlib.org/\n3. Purchase Commercial License: https://authlib.org/plans\n4. Blog: https://blog.authlib.org/\n5. More Repositories: https://github.com/authlib\n6. Twitter: https://twitter.com/authlib\n7. Donate: https://www.patreon.com/lepture\n\nSpecifications\n--------------\n\n- RFC5849: The OAuth 1.0 Protocol\n- RFC6749: The OAuth 2.0 Authorization Framework\n- RFC6750: The OAuth 2.0 Authorization Framework: Bearer Token Usage\n- RFC7009: OAuth 2.0 Token Revocation\n- RFC7515: JSON Web Signature\n- RFC7516: JSON Web Encryption\n- RFC7517: JSON Web Key\n- RFC7518: JSON Web Algorithms\n- RFC7519: JSON Web Token\n- RFC7521: Assertion Framework for OAuth 2.0 Client Authentication and Authorization Grants\n- RFC7523: JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants\n- RFC7591: OAuth 2.0 Dynamic Client Registration Protocol\n- RFC7662: OAuth 2.0 Token Introspection\n- RFC8414: OAuth 2.0 Authorization Server Metadata\n- RFC8628: OAuth 2.0 Device Authorization Grant\n- OpenID Connect 1.0\n- OpenID Connect Discovery 1.0\n\nImplementations\n---------------\n\n- Requests OAuth 1 Session\n- Requests OAuth 2 Session\n- Requests Assertion Session\n- Flask OAuth 1/2 Client\n- Django OAuth 1/2 Client\n- Flask OAuth 1.0 Server\n- Flask OAuth 2.0 Server\n- Flask OpenID Connect 1.0\n- Django OAuth 1.0 Server\n- Django OAuth 2.0 Server\n- Django OpenID Connect 1.0\n\nLicense\n-------\n\nAuthlib is licensed under BSD. Please see LICENSE for licensing details.\n\nIf this license does not fit your company, consider to purchase a commercial\nlicense. Find more information on `Authlib Plans`_.\n\n.. _`Authlib Plans`: https://authlib.org/plans\n\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://authlib.org/",
            "keywords": "",
            "license": "BSD-3-Clause",
            "maintainer": "",
            "maintainer_email": "",
            "name": "Authlib",
            "package_url": "https://pypi.org/project/Authlib/",
            "platform": "any",
            "project_url": "https://pypi.org/project/Authlib/",
            "project_urls": {
               "Blog": "https://blog.authlib.org/",
               "Bug Tracker": "https://github.com/lepture/authlib/issues",
               "Commercial License": "https://authlib.org/plans",
               "Documentation": "https://docs.authlib.org/",
               "Donate": "https://lepture.com/donate",
               "Homepage": "https://authlib.org/",
               "Source Code": "https://github.com/lepture/authlib"
            },
            "release_url": "https://pypi.org/project/Authlib/0.14.3/",
            "requires_dist": [
               "cryptography",
               "requests ; extra == 'client'"
            ],
            "requires_python": "",
            "summary": "The ultimate Python library in building OAuth and OpenID Connect servers.",
            "version": "0.14.3",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Julien Bigot",
            "author_email": "julien.bigot@cea.fr",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Environment :: Console",
               "License :: OSI Approved :: MIT License"
            ],
            "description": "# zpp\n\nThis is zpp, the Z Pre-Processor.\n\nZpp transforms bash in a pre-processor for F90 source files.\nIt offers a set of functions specifically tailored to build clean Fortran90\ninterfaces by generating code for all types, kinds, and array ranks supported by\na given compiler.\n\n## Syntax\n\nZpp files are typically named `*.F90.zpp`.\n\nIn these files, the lines that start with `!$SH` are interpreted as bash lines. \nOther lines are copied as-is, except that variable substitution is operated as\nin a double-quoted string, including bash commands `${VAR}` or `$(command)`.\nIf inside a bash control block (`if`, `for`, etc.), the output generation obeys\nthe control statement.\n\nFor example, this code:\n```\n!$SH for GREETED in world universe multiverse ; do\nprint *, \"Hello ${GREETED}\"\n!$SH done\n```\n\nWould produce the following result:\n```\nprint *, \"Hello world\"\nprint *, \"Hello universe\"\nprint *, \"Hello multiverse\"\n```\n\n### Support functions\n\nPredefined bash functions, variable and code can be provided in `.zpp.sh` files\nthat can be included with `#!SH source <filename>.zpp.sh`.\n\n**Beware**: a file NEEDs to have the `.zpp.sh` extension to be included from\nzpp.\n\nZpp provides a standard library of functions tailored to build clean Fortran90\ninterfaces by generating code for all types, kinds, and array ranks supported by\na given compiler.\n\n#### zpp_str_repeat\n\nFound in `base.zpp.sh`\n\nOutputs a string multiple times.\n\nParameters:\n1. the string to Repeat\n2. the lower bound of the iterations (inclusive)\n3. the upper bound of the iterations (inclusive)\n4. the string separator\n5. the string starter\n6. the string ender\n\nRepeats string `$1` (`$3`-`$2`+1) times, separated by string `$4` inside `$5`\n`$6`.\n* If the number of repetitions is negative, the result is empty.\n* If `$1` contains the '@N' substring, it will be replaced by the iteration\n  number (from `$2` to `$3`).\n\nexample:\n```\n#!SH source base.zpp.sh\nzpp_str_repeat v@N 5 7 '...' '<<' '>>'\nzpp_str_repeat w@N 1 1 '...' '<<' '>>'\nzpp_str_repeat x@N 1 0 '...' '<<' '>>'\n```\noutput:\n```\n<<v5...v6...v7>>\n<<w1>>\n```\n\n#### zpp_str_repeat_reverse\n\nFound in `base.zpp.sh`\n\nOutputs a string multiple times in reverse order.\n\nParameters:\n1. the string to Repeat\n2. the upper bound of the iterations (inclusive)\n3. the lower bound of the iterations (inclusive)\n4. the string separator\n5. the string starter\n6. the string ender\n\nRepeats string `$1` (`$2`-`$3`+1) times, separated by string `$4` inside `$5`\n`$6`.\n* If the number of repetitions is negative, the result is empty.\n* If `$1` contains the '@N' substring, it will be replaced by the iteration\n  number (from `$2` to `$3`, i.e. upper to lower).\n\nexample:\n```\n#!SH source base.zpp.sh\nzpp_str_repeat_reverse v@N 5 7 '...' '<<' '>>'\nzpp_str_repeat_reverse w@N 1 1 '...' '<<' '>>'\nzpp_str_repeat_reverse x@N 1 0 '...' '<<' '>>'\n```\noutput:\n```\n<<v7...v6...v5>>\n<<w1>>\n```\n\n#### ZPP_FORT_TYPES\n\nFound in `fortran.zpp.sh`\n\nThe list of types supported by the fortran compiler as zpp:typeIDs.\n\nThe compiler ID should be provided in `ZPP_CONFIG` as `config.<ID>`.\nThe supported predefined IDs are: `Gnu`, `Intel`, `PGI` and `XL`.\nYou can also provide definitions for an additional compiler by defining\n`ZPP_FORT_TYPES` in a file named `config.<ID>.zpp.sh`.\n\nIf you use cmake, it will automatically generate such a file for your compiler\nand define  `ZPP_CONFIG` so you don't have to handle it.\n\n### zpp_fort_array_desc\n\nFound in `fortran.zpp.sh`\n\nOutputs an assumed shaped array descriptor of the provided size.\n\nParameters:\n1. the size of the assumed shaped array\n\nexample:\n```\n#!SH source fortran.zpp.sh\ninteger:: scalar$(zpp_fort_array_desc 0)\ninteger:: array1d$(zpp_fort_array_desc 1)\ninteger:: array2d$(zpp_fort_array_desc 2)\n```\noutput:\n```\ninteger:: scalar\ninteger:: array1d(:)\ninteger:: array2d(:,:)\n```\n\n### zpp_fort_ptype\n\nFound in `fortran.zpp.sh`\n\nOutputs the type associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\nexample:\n```\n#!SH source fortran.zpp.sh\n!$SH for T in ${ZPP_FORT_TYPES} ; do\n$(zpp_fort_ptype $1)\n!$SH done\n```\nexample output:\n```\nCHARACTER\nCOMPLEX\nCOMPLEX\nINTEGER\nINTEGER\nINTEGER\nINTEGER\nLOGICAL\nREAL\nREAL\n```\n\n### zpp_fort_kind\n\nFound in `fortran.zpp.sh`\n\nOutputs the kind associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\nexample:\n```\n#!SH source fortran.zpp.sh\n!$SH for T in ${ZPP_FORT_TYPES} ; do\n$(zpp_fort_kind $1)\n!$SH done\n```\nexample output:\n```\n1\n4\n8\n1\n2\n4\n8\n1\n4\n8\n```\n\n### zpp_fort_type\n\nFound in `fortran.zpp.sh`\n\nOutputs the full type (with kind included) associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n2. additional attributes for the type\n\nexample:\n```\n#!SH source fortran.zpp.sh\n!$SH for T in ${MY_CHAR_TYPES} ; do\n$(zpp_fort_type $1)\n$(zpp_fort_type $1 \"len=5\")\n!$SH done\n```\nexample output:\n```\nCHARACTER(KIND=1)\nCHARACTER(KIND=1,len=5)\n```\n\n### zpp_fort_sizeof\n\nFound in `fortran.zpp.sh`\n\nOutputs the size in bits associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\n### zpp_fort_io_format\n\nFound in `fortran.zpp.sh`\n\nOutputs an IO descriptor suitable for a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\n### ZPP_HDF5F_TYPES\n\nFound in `hdf5_fortran.zpp.sh`\n\nA list of zpp:typeIDs supported by HDF5.\n\n### hdf5_constant\n\nFound in `hdf5_fortran.zpp.sh`\n\nOutputs the HDF5 type constant associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\nexample:\n```\n#!SH source hdf5_fortran.zpp.sh\n!$SH for T in ${ZPP_HDF5F_TYPES} ; do\n$(hdf5_constant $1)\n!$SH done\n```\nexample output:\n```\nH5T_NATIVE_INTEGER\nH5T_NATIVE_REAL\nH5T_NATIVE_REAL\nH5T_NATIVE_CHARACTER\n```\n\n\n## Command-line interface\n\nZpp basic usage is as follow:\n```\nUsage: zpp [Options...] <source> [<destination>]\n  use `zpp -h' for more info\n\nPreprocesses BASH in-line commands in a source file\n\nOptions:\n  --version        show program's version number and exit\n  -h, --help       show this help message and exit\n  -I DIR           Add DIR to search list for source directives\n  -o FILE          Place the preprocessed code in file FILE.\n  -D OPTION=VALUE  Set the value of OPTION to VALUE\n```\n\n## CMake interface\n\nSupport is provided for using zpp from CMake based projects, but you can use\nit from plain Makefiles too.\n\nThere are two ways you can use zpp from your CMake project:\n* with `add_subdirectory`: include zpp in your project and use it directly from\n  there,\n* with `find_package`: install zpp and use it as an external dependency of your\n  project.\n\n#### CMake subdirectory usage\n\nUsing zpp with `add_subdirectory` is very simple.\nJust copy the `zpp` directory in your source and point to it with\n`add_subdirectory(zpp)`.\nThe `zpp_preprocess` then becomes available to process zpp files.\n\nThis is demonstrated in `example/cmake_subdirectory`.\n\n#### CMake find usage\n\nUsing zpp with `find_package` is no more complex.\nIf zpp is installed, just add a `find_package(zpp REQUIRED)`.\nThe `zpp_preprocess` then becomes available to process zpp files.\n\nThis is demonstrated in `example/cmake_find`.\n\n## GMake usage\n\nUsing zpp from a GNU Makefile is slightly less powerful than from CMake.\nThe types and kinds supported by the Fortran compiler will not be automatically\ndetected.\nPredefined lists of supported types for well known compilers are provided\ninstead.\n\nTo use zpp from a Makefile, include the `share/zpp/zpp.mk` file (either from an\ninstalled location or from a subdirectory in your project).\nYou can then set the `zpp_COMPILER_ID` variable to the compiler you use and\n`.F90` files will be automatically generated from their `.F90.zpp` equivalent.\nThe `zppFLAGS` variable is automatically passed to zpp similarly to `CFLAGS` or\n`CXXFLAGS` for `cc` and `cxx`.\n\nThis is demonstrated in `example/cmake_makefile`.\n\n## Installation\n\nZpp can be installed using the usual python way with `setup.py`.\n```\n./setup.py --help\n```\n\nThe cmake approach is deprecated.\n\n## FAQ\n\nQ. Isn't zpp redundant with assumed type parameters?\n\nA.\nThe assumed type parameters functionality allows to implement part of what can\nbe done with zpp (support for all kinds of a type). However as of 2013 it was\nnot correctly supported on most compilers installed on the supercomputers.\n\nIn addition, many things can be done with zpp but not with assumed type\nparameters, such as support for variable array rank or small variations of the\ncode depending on the kind.\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "bash Fortran pre-processor",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "zpp",
            "package_url": "https://pypi.org/project/zpp/",
            "platform": "",
            "project_url": "https://pypi.org/project/zpp/",
            "project_urls": {
               "Source Code": "https://github.com/pdidev/zpp/"
            },
            "release_url": "https://pypi.org/project/zpp/1.0.4/",
            "requires_dist": [
               "setuptools"
            ],
            "requires_python": "",
            "summary": "a Bash Pre-Processor for Fortran. ZPP is useful in order to build clean Fortran90 interfaces. It allows to generate Fortran code for all types, kinds, and array ranks supported by the compiler.",
            "version": "1.0.4",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Dheepak Krishnamurthy",
            "author_email": "kdheepak89@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# zip [![](https://travis-ci.org/kdheepak/zip.svg?branch=master)](https://travis-ci.org/kdheepak/zip/branches)\n\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/kdheepak/zip",
            "keywords": "",
            "license": "Revised BSD License",
            "maintainer": "",
            "maintainer_email": "",
            "name": "zip",
            "package_url": "https://pypi.org/project/zip/",
            "platform": "",
            "project_url": "https://pypi.org/project/zip/",
            "project_urls": {
               "Homepage": "https://github.com/kdheepak/zip"
            },
            "release_url": "https://pypi.org/project/zip/0.0.2/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Intel Corporation",
            "author_email": "scripting@intel.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "Intended Audience :: Education",
               "Intended Audience :: Other Audience",
               "Intended Audience :: Science/Research",
               "Intended Audience :: System Administrators",
               "License :: Other/Proprietary License",
               "Operating System :: MacOS",
               "Operating System :: Microsoft :: Windows",
               "Operating System :: POSIX",
               "Operating System :: Unix",
               "Topic :: Software Development :: Libraries"
            ],
            "description": "Intel(R) Performance Primitives provides developers with high-quality, production-ready, low-level building blocks for image processing, signal processing, and data processing (data compression and decompression, and cryptography) applications.\n\nOne of many Intel(R) accelerated Python packages and performance library runtimes available on [PyPI](https://software.intel.com/en-us/articles/installing-the-intel-distribution-for-python-and-intel-performance-libraries-with-pip-and), and as part of [Intel(R) Distribution for Python](https://software.intel.com/en-us/distribution-for-python).\n\nFor latest release updates and security notifications, please [subscribe](https://software.intel.com/en-us/forums/intel-distribution-for-python) to the Intel(R) Distribution for Python Community forum.\n\nFree to use and redistribute pursuant to the [Intel Simplified Software License](https://software.intel.com/en-us/license/intel-simplified-software-license).\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://software.intel.com/en-us/articles/empowering-science-with-high-performance-python",
            "keywords": "",
            "license": "Proprietary - Intel",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ipp",
            "package_url": "https://pypi.org/project/ipp/",
            "platform": "",
            "project_url": "https://pypi.org/project/ipp/",
            "project_urls": {
               "Homepage": "https://software.intel.com/en-us/articles/empowering-science-with-high-performance-python"
            },
            "release_url": "https://pypi.org/project/ipp/2019.4.243/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Intel(R) Performance Primitives",
            "version": "2019.4.243",
            "yanked": false,
            "yanked_reason": null
         }
      ],
      "boto3": [
         {
            "author": "Gabriel Alves",
            "author_email": "gabriel.alves@pickcells.bio",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# sx\n#### Framework to manage gRPC-based microservices application",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "https://github.com/itsmealves/sx/releases/download/0.6.0/sx-0.6.0.tar.gz",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/itsmealves/sx",
            "keywords": "sx microservices rpc grpc Framework",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "sx",
            "package_url": "https://pypi.org/project/sx/",
            "platform": "",
            "project_url": "https://pypi.org/project/sx/",
            "project_urls": {
               "Download": "https://github.com/itsmealves/sx/releases/download/0.6.0/sx-0.6.0.tar.gz",
               "Homepage": "https://github.com/itsmealves/sx"
            },
            "release_url": "https://pypi.org/project/sx/0.6.0/",
            "requires_dist": null,
            "requires_python": ">=3.5",
            "summary": "Framework to manage gRPC-based microservices application",
            "version": "0.6.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "chrysn",
            "author_email": "chrysn@fsfe.org",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 3 - Alpha",
               "Intended Audience :: Education",
               "Intended Audience :: Science/Research",
               "License :: OSI Approved :: GNU General Public License (GPL)"
            ],
            "description": "UNKNOWN",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "UNKNOWN",
            "keywords": null,
            "license": "GPL",
            "maintainer": null,
            "maintainer_email": null,
            "name": "si",
            "package_url": "https://pypi.org/project/si/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/si/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "UNKNOWN"
            },
            "release_url": "https://pypi.org/project/si/0.1.1-1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Module to represent SI units",
            "version": "0.1.1-1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "leesoar",
            "author_email": "secure@tom.com",
            "bugtrack_url": null,
            "classifiers": [
               "License :: OSI Approved :: MIT License",
               "Programming Language :: Python :: 3.5",
               "Programming Language :: Python :: 3.6",
               "Programming Language :: Python :: 3.7",
               "Programming Language :: Python :: Implementation :: CPython",
               "Programming Language :: Python :: Implementation :: PyPy"
            ],
            "description": "\nDevelop soon\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://leesoar.com",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ida",
            "package_url": "https://pypi.org/project/ida/",
            "platform": "",
            "project_url": "https://pypi.org/project/ida/",
            "project_urls": {
               "Homepage": "https://leesoar.com"
            },
            "release_url": "https://pypi.org/project/ida/0.0.1/",
            "requires_dist": null,
            "requires_python": ">=3.3.0",
            "summary": "Develop soon",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Xavier Bruhiere",
            "author_email": "xavier.bruhiere@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 2 - Pre-Alpha",
               "Intended Audience :: Science/Research",
               "License :: OSI Approved :: Apache Software License",
               "Natural Language :: English",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2.7",
               "Topic :: Software Development",
               "Topic :: System :: Shells"
            ],
            "description": "python library DNA\n==================\n\n[![Coverage Status](https://coveralls.io/repos/hivetech/dna/badge.png)](https://coveralls.io/r/hivetech/dna)\n\n> Generic python utilities\n\nInstallation\n------------\n\n```console\npip install dna\n```\n\nExample\n-----\n\n```python\nimport dna.utils as utils\nimport dna.logger as logger\n\nlog_setup = logger.setup(level='info', filename='app.log')\nlog = logger.logger(__name__)\nwith log_setup.applicationbound():\n\n    log.info('hello', where='world')\n\n    useless_id = utils.generate_unique_id()\n    useless_name = utils.generate_random_name()\n\n    if utils.docker_check() and utils.is_running('ipyhon'):\n\n        print utils.Version('0.4.1')\n\n        module = utils.dynamic_import('dna.settings', 'LOG')\n        print utils.emphasis(module, align=False)\n\n        print utils.self_ip()\n```",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/hivetech/dna",
            "keywords": null,
            "license": "Apache 2.0",
            "maintainer": null,
            "maintainer_email": null,
            "name": "dna",
            "package_url": "https://pypi.org/project/dna/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/dna/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/hivetech/dna"
            },
            "release_url": "https://pypi.org/project/dna/0.0.7/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Generic python utilities",
            "version": "0.0.7",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Christopher Brown",
            "author_email": "io@henrian.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 2 - Pre-Alpha",
               "License :: OSI Approved :: MIT License",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.6",
               "Programming Language :: Python :: 2.7",
               "Topic :: Software Development :: Libraries :: Python Modules",
               "Topic :: System :: Archiving :: Packaging",
               "Topic :: System :: Filesystems"
            ],
            "description": "Python (package) installation\n-----------------------------\n\nGetting started from `PyPI <https://pypi.python.org/pypi/pi/>`__:\n\n::\n\n    easy_install pi\n\n`Whence easy\\_install? <#setuptools>`__\n\nCommands\n--------\n\n-  Uninstall package named \"pip\":\n\n   ::\n\n       pi uninstall pip\n\n-  Install package named \"filesequence\":\n\n   ::\n\n       pi install filesequence\n\n-  List paths that Python searches for imported modules:\n\n   ::\n\n       pi paths\n\n-  List installed packages:\n\n   ::\n\n       pi list\n\nTesting\n-------\n\nContinuous integration:\n\n|Travis CI Build Status|\n\nOr run tests locally:\n\n::\n\n    nosetests --with-doctest\n\nRelated\n~~~~~~~\n\n-  http://guide.python-distribute.org/creation.html\n-  `distribute/pkg\\_resources\n   docs <http://pythonhosted.org/distribute/pkg_resources.html>`__\n-  standard library\n   ```site`` <http://docs.python.org/2/library/site.html>`__\n-  standard library `environment\n   variables <http://docs.python.org/2/using/cmdline.html#environment-variables>`__\n\nSetuptools\n~~~~~~~~~~\n\n``pi`` does not yet completely replace\n`setuptools <https://pypi.python.org/pypi/setuptools>`__. You may need\nto install it first:\n\n+----------+-----------------------------------------+\n| Distro   | Package manager command                 |\n+==========+=========================================+\n| Ubuntu   | ``apt-get install python-setuptools``   |\n+----------+-----------------------------------------+\n| Mac      | built-in                                |\n+----------+-----------------------------------------+\n| Arch     | ``pacman -S python-setuptools``         |\n+----------+-----------------------------------------+\n| CentOS   | ``yum install python-setuptools``       |\n+----------+-----------------------------------------+\n\nLicense\n-------\n\nCopyright (c) 2013 Christopher Brown. `MIT\nLicensed <https://raw.github.com/chbrown/pi/master/LICENSE>`__.\n\n.. |Travis CI Build Status| image:: https://travis-ci.org/chbrown/pi.png?branch=master\n   :target: https://travis-ci.org/chbrown/pi",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/chbrown/pi",
            "keywords": null,
            "license": "Copyright (c) 2013 Christopher Brown\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.",
            "maintainer": null,
            "maintainer_email": null,
            "name": "pi",
            "package_url": "https://pypi.org/project/pi/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/pi/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/chbrown/pi"
            },
            "release_url": "https://pypi.org/project/pi/0.1.2/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Simpler python package installation",
            "version": "0.1.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ip",
            "package_url": "https://pypi.org/project/ip/",
            "platform": "",
            "project_url": "https://pypi.org/project/ip/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/ip/0.0.1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Vitalii Vanovschi",
            "author_email": "support@parallelpython.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Natural Language :: English",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Topic :: Software Development",
               "Topic :: System :: Distributed Computing"
            ],
            "description": "Parallel Python module (PP) provides an easy and efficient way to create parallel-enabled applications for SMP computers and clusters. PP module features cross-platform portability and dynamic load balancing. Thus application written with PP will parallelize efficiently even on heterogeneous and multi-platform clusters (including clusters running other application with variable CPU loads). Visit http://www.parallelpython.com for further information.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "http://www.parallelpython.com/downloads/pp/pp-1.6.5.zip",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "http://www.parallelpython.com",
            "keywords": null,
            "license": "BSD-like",
            "maintainer": null,
            "maintainer_email": null,
            "name": "pp",
            "package_url": "https://pypi.org/project/pp/",
            "platform": "Windows,Linux,Unix",
            "project_url": "https://pypi.org/project/pp/",
            "project_urls": {
               "Download": "http://www.parallelpython.com/downloads/pp/pp-1.6.5.zip",
               "Homepage": "http://www.parallelpython.com"
            },
            "release_url": "https://pypi.org/project/pp/1.6.5/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Parallel and distributed programming for Python",
            "version": "1.6.5",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Marcus Donnelly",
            "author_email": "marcus.k.donnelly@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "Intended Audience :: Science/Research",
               "License :: OSI Approved :: BSD License",
               "Programming Language :: Python :: 3",
               "Topic :: Scientific/Engineering"
            ],
            "description": "",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "Oceanography,Utilities",
            "license": "BSD",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ocutils",
            "package_url": "https://pypi.org/project/ocutils/",
            "platform": "",
            "project_url": "https://pypi.org/project/ocutils/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/ocutils/1.1.1/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Utility functions for oceanography related work",
            "version": "1.1.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Kiana Alessandra V. Villaera",
            "author_email": "kiana.villaera@senti.com.ph",
            "bugtrack_url": null,
            "classifiers": [
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 3"
            ],
            "description": "Contains everything you might need to perform essential data center functions\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/K-Winkles/dcutils",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dcutils",
            "package_url": "https://pypi.org/project/dcutils/",
            "platform": "",
            "project_url": "https://pypi.org/project/dcutils/",
            "project_urls": {
               "Homepage": "https://github.com/K-Winkles/dcutils"
            },
            "release_url": "https://pypi.org/project/dcutils/0.6/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "A simple package for data center utilities",
            "version": "0.6",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Mike Kazantsev",
            "author_email": "mk.fraggod@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Intended Audience :: Developers",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3.5",
               "Topic :: Software Development",
               "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description": "pretty-yaml (or pyaml)\n======================\n\nPyYAML-based python module to produce pretty and readable YAML-serialized data.\n\nThis module is for serialization only, see `ruamel.yaml`_ module for literate\nYAML parsing (keeping track of comments, spacing, line/column numbers of values, etc).\n\n[note: to dump stuff parsed by ruamel.yaml with this module, use only ``YAML(typ='safe')`` there]\n\n.. contents::\n  :backlinks: none\n\n\nWarning\n-------\n\nPrime goal of this module is to produce human-readable output that can be easily\nmanipulated and re-used, but maybe with some occasional caveats.\n\nOne good example of such \"caveat\" is that e.g. ``{'foo': '123'}`` will serialize\nto ``foo: 123``, which for PyYAML would be a bug, as 123 will then be read back\nas an integer from that, but here it's a feature.\n\nSo please do not rely on the thing to produce output that can always be\ndeserialized exactly to what was exported, at least - use PyYAML (e.g. with\noptions from the next section) for that.\n\n\nWhat this module does and why\n-----------------------------\n\nYAML is generally nice and easy format to read *if* it was written by humans.\n\nPyYAML can a do fairly decent job of making stuff readable, and the best\ncombination of parameters for such output that I've seen so far is probably this one::\n\n  >>> m = [123, 45.67, {1: None, 2: False}, u'some text']\n  >>> data = dict(a=u'asldnsa\\nasldpáknsa\\n', b=u'whatever text', ma=m, mb=m)\n  >>> yaml.safe_dump(data, sys.stdout, allow_unicode=True, default_flow_style=False)\n  a: 'asldnsa\n\n    asldpáknsa\n\n    '\n  b: whatever text\n  ma: &id001\n  - 123\n  - 45.67\n  - 1: null\n    2: false\n  - some text\n  mb: *id001\n\npyaml tries to improve on that a bit, with the following tweaks:\n\n* Most human-friendly representation options in PyYAML (that I know of) get\n  picked as defaults.\n\n* Does not dump \"null\" values, if possible, replacing these with just empty\n  strings, which have the same meaning but reduce visual clutter and are easier\n  to edit.\n\n* Dicts, sets, OrderedDicts, defaultdicts, namedtuples, etc are representable\n  and get sorted on output (OrderedDicts and namedtuples keep their ordering),\n  so that output would be as diff-friendly as possible, and not arbitrarily\n  depend on python internals.\n\n  It appears that at least recent PyYAML versions also do such sorting for\n  python dicts.\n\n* List items get indented, as they should be.\n\n* bytestrings that can't be auto-converted to unicode raise error, as yaml has\n  no \"binary bytes\" (i.e. unix strings) type.\n\n* Attempt is made to pick more readable string representation styles, depending\n  on the value, e.g.::\n\n    >>> yaml.safe_dump(cert, sys.stdout)\n    cert: '-----BEGIN CERTIFICATE-----\n\n      MIIH3jCCBcagAwIBAgIJAJi7AjQ4Z87OMA0GCSqGSIb3DQEBCwUAMIHBMRcwFQYD\n\n      VQQKFA52YWxlcm9uLm5vX2lzcDEeMBwGA1UECxMVQ2VydGlmaWNhdGUgQXV0aG9y\n    ...\n\n    >>> pyaml.p(cert):\n    cert: |\n      -----BEGIN CERTIFICATE-----\n      MIIH3jCCBcagAwIBAgIJAJi7AjQ4Z87OMA0GCSqGSIb3DQEBCwUAMIHBMRcwFQYD\n      VQQKFA52YWxlcm9uLm5vX2lzcDEeMBwGA1UECxMVQ2VydGlmaWNhdGUgQXV0aG9y\n    ...\n\n* \"force_embed\" option to avoid having &id stuff scattered all over the output\n  (which might be beneficial in some cases, hence the option).\n\n* \"&id\" anchors, if used, get labels from the keys they get attached to,\n  not just use meaningless enumerators.\n\n* \"string_val_style\" option to only apply to strings that are values, not keys,\n  i.e::\n\n    >>> pyaml.p(data, string_val_style='\"')\n    key: \"value\\nasldpáknsa\\n\"\n    >>> yaml.safe_dump(data, sys.stdout, allow_unicode=True, default_style='\"')\n    \"key\": \"value\\nasldpáknsa\\n\"\n\n* \"sort_dicts=False\" option to leave dict item ordering to python, and not\n  force-sort them in yaml output, which can be important for python 3.6+ where\n  they retain ordering info.\n\n* Has an option to add vertical spacing (empty lines) between keys on different\n  depths, to make output much more seekable.\n\nResult for the (rather meaningless) example above (without any additional\ntweaks)::\n\n  >>> pyaml.p(data)\n  a: |\n    asldnsa\n    asldpáknsa\n  b: 'whatever text'\n  ma: &ma\n    - 123\n    - 45.67\n    - 1:\n      2: false\n    - 'some text'\n  mb: *ma\n\n----------\n\nExtended example::\n\n  >>> pyaml.dump(conf, sys.stdout, vspacing=[2, 1]):\n  destination:\n\n    encoding:\n      xz:\n        enabled: true\n        min_size: 5120\n        options:\n        path_filter:\n          - \\.(gz|bz2|t[gb]z2?|xz|lzma|7z|zip|rar)$\n          - \\.(rpm|deb|iso)$\n          - \\.(jpe?g|gif|png|mov|avi|ogg|mkv|webm|mp[34g]|flv|flac|ape|pdf|djvu)$\n          - \\.(sqlite3?|fossil|fsl)$\n          - \\.git/objects/[0-9a-f]+/[0-9a-f]+$\n\n    result:\n      append_to_file:\n      append_to_lafs_dir:\n      print_to_stdout: true\n\n    url: http://localhost:3456/uri\n\n\n  filter:\n    - /(CVS|RCS|SCCS|_darcs|\\{arch\\})/$\n    - /\\.(git|hg|bzr|svn|cvs)(/|ignore|attributes|tags)?$\n    - /=(RELEASE-ID|meta-update|update)$\n\n\n  http:\n\n    ca_certs_files: /etc/ssl/certs/ca-certificates.crt\n\n    debug_requests: false\n\n    request_pool_options:\n      cachedConnectionTimeout: 600\n      maxPersistentPerHost: 10\n      retryAutomatically: true\n\n\n  logging:\n\n    formatters:\n      basic:\n        datefmt: '%Y-%m-%d %H:%M:%S'\n        format: '%(asctime)s :: %(name)s :: %(levelname)s: %(message)s'\n\n    handlers:\n      console:\n        class: logging.StreamHandler\n        formatter: basic\n        level: custom\n        stream: ext://sys.stderr\n\n    loggers:\n      twisted:\n        handlers:\n          - console\n        level: 0\n\n    root:\n      handlers:\n        - console\n      level: custom\n\nNote that unless there are many moderately wide and deep trees of data, which\nare expected to be read and edited by people, it might be preferrable to\ndirectly use PyYAML regardless, as it won't introduce another (rather pointless\nin that case) dependency and a point of failure.\n\n\nSome Tricks\n-----------\n\n* Pretty-print any yaml or json (yaml subset) file from the shell::\n\n    % python -m pyaml /path/to/some/file.yaml\n    % curl -s https://www.githubstatus.com/api/v2/summary.json | python -m pyaml\n\n* Process and replace json/yaml file in-place::\n\n    % python -m pyaml -r file-with-json.data\n\n* Easier \"debug printf\" for more complex data (all funcs below are aliases to\n  same thing)::\n\n    pyaml.p(stuff)\n    pyaml.pprint(my_data)\n    pyaml.pprint('----- HOW DOES THAT BREAKS!?!?', input_data, some_var, more_stuff)\n    pyaml.print(data, file=sys.stderr) # needs \"from __future__ import print_function\"\n\n* Force all string values to a certain style (see info on these in\n  `PyYAML docs`_)::\n\n    pyaml.dump(many_weird_strings, string_val_style='|')\n    pyaml.dump(multiline_words, string_val_style='>')\n    pyaml.dump(no_want_quotes, string_val_style='plain')\n\n  Using ``pyaml.add_representer()`` (note \\*p\\*yaml) as suggested in\n  `this SO thread`_ (or `github-issue-7`_) should also work.\n\n* Control indent and width of the results::\n\n    pyaml.dump(wide_and_deep, indent=4, width=120)\n\n  These are actually keywords for PyYAML Emitter (passed to it from Dumper),\n  see more info on these in `PyYAML docs`_.\n\n* Dump multiple yaml documents into a file: ``pyaml.dump_all([data1, data2, data3], dst_file)``\n\n  explicit_start=True is implied, unless explicit_start=False is passed.\n\n.. _PyYAML docs: http://pyyaml.org/wiki/PyYAMLDocumentation#Scalars\n.. _this SO thread: http://stackoverflow.com/a/7445560\n.. _github-issue-7: https://github.com/mk-fg/pretty-yaml/issues/7\n\n\nInstallation\n------------\n\nIt's a regular package for Python (3.x or 2.x).\n\nModule uses PyYAML_ for processing of the actual YAML files and should pull it\nin as a dependency.\n\nDependency on unidecode_ module is optional and should only be necessary if\nsame-id objects or recursion is used within serialized data.\n\nBe sure to use python3/python2, pip3/pip2, easy_install-... binaries below,\nbased on which python version you want to install the module for, if you have\nseveral on the system (as is norm these days for py2-py3 transition).\n\nUsing pip_ is the best way::\n\n  % pip install pyaml\n\n(add --user option to install into $HOME for current user only)\n\nOr, if you don't have \"pip\" command::\n\n  % python -m ensurepip\n  % python -m pip install --upgrade pip\n  % python -m pip install pyaml\n\n(same suggestion wrt \"install --user\" as above)\n\nOn a very old systems, one of these might work::\n\n  % curl https://bootstrap.pypa.io/get-pip.py | python\n  % pip install pyaml\n\n  % easy_install pyaml\n\n  % git clone --depth=1 https://github.com/mk-fg/pretty-yaml\n  % cd pretty-yaml\n  % python setup.py install\n\n(all of install-commands here also have --user option,\nsee also `pip docs \"installing\" section`_)\n\nCurrent-git version can be installed like this::\n\n  % pip install 'git+https://github.com/mk-fg/pretty-yaml#egg=pyaml'\n\nNote that to install stuff to system-wide PATH and site-packages (without\n--user), elevated privileges (i.e. root and su/sudo) are often required.\n\nUse \"...install --user\", `~/.pydistutils.cfg`_ or virtualenv_ to do unprivileged\ninstalls into custom paths.\n\nMore info on python packaging can be found at `packaging.python.org`_.\n\n.. _ruamel.yaml: https://bitbucket.org/ruamel/yaml/\n.. _PyYAML: http://pyyaml.org/\n.. _unidecode: http://pypi.python.org/pypi/Unidecode\n.. _pip: http://pip-installer.org/\n.. _pip docs \"installing\" section: http://www.pip-installer.org/en/latest/installing.html\n.. _~/.pydistutils.cfg: http://docs.python.org/install/index.html#distutils-configuration-files\n.. _virtualenv: http://pypi.python.org/pypi/virtualenv\n.. _packaging.python.org: https://packaging.python.org/installing/\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/mk-fg/pretty-yaml",
            "keywords": "yaml serialization pretty print format human readable readability",
            "license": "WTFPL",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyaml",
            "package_url": "https://pypi.org/project/pyaml/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyaml/",
            "project_urls": {
               "Homepage": "https://github.com/mk-fg/pretty-yaml"
            },
            "release_url": "https://pypi.org/project/pyaml/20.4.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "PyYAML-based module to produce pretty and readable YAML-serialized data",
            "version": "20.4.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "haogege",
            "author_email": "1394168335@qq.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# pyyml\nUse python in yaml\n## 基本使用\n在python中使用：\n```python\nfrom pyyml import load\n\nwith open('conf.yml') as f:\n    raw_conf = f.read()\nconfig = load(raw_conf)\nprint(config)\n```\n在yaml中 `${...}` 中的内容将会被python执行：\n\nyaml内容\n```yaml\nsum: ${1 + 1}\n```\n实际解析内容\n```python\n{'sum': 2}\n```\n通过在文件开头第一行注释来导入所需的包：\n\n```yaml\n# libs:['os', 'os.path:path', 'this']\n```\n通过 [包名]:[别名] 取别名导入包\n\n`'os.path:path' 等同于 python 中的 from os import path`\n\n例如yaml文件内容\n```yaml\n# libs:['os', 'os.path:path', 'this']\nos_name: ${os.name}\nbase_dir: ${path.abspath(path.dirname(__file__))}\n```\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/q1394168335/pyyml",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyyml",
            "package_url": "https://pypi.org/project/pyyml/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyyml/",
            "project_urls": {
               "Homepage": "https://github.com/q1394168335/pyyml"
            },
            "release_url": "https://pypi.org/project/pyyml/0.0.2/",
            "requires_dist": [
               "pyyaml (>=3.13)"
            ],
            "requires_python": "",
            "summary": "Use python in yaml",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Michael Foord",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "rs",
            "package_url": "https://pypi.org/project/rs/",
            "platform": "",
            "project_url": "https://pypi.org/project/rs/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/rs/0.0/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "",
            "version": "0.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Ramses",
            "author_email": "hello@ramses.tech",
            "bugtrack_url": null,
            "classifiers": [
               "Framework :: Pyramid",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.4",
               "Programming Language :: Python :: 3.5",
               "Topic :: Internet :: WWW/HTTP",
               "Topic :: Internet :: WWW/HTTP :: WSGI :: Application"
            ],
            "description": "# `Ra`\n[![Build Status](https://travis-ci.org/ramses-tech/ra.svg?branch=master)](https://travis-ci.org/ramses-tech/ra)\n[![Documentation](https://readthedocs.org/projects/ra/badge/?version=stable)](http://ra.readthedocs.org)\n\nRa is a test suite generator and helper library for testing APIs described\nin [RAML](http://raml.org/).\n\nOut of the box, Ra provides a basic, automated test suite to test the routes\ndeclared in the RAML document. It provides test helpers for augmenting these\nwith custom tests to test application-specific logic, side effects, etc.\n\nRa is primarily designed to provide testing support for\n[ramses](http://github.com/ramses-tech/ramses) and\n[nefertari](http://github.com/ramses-tech/nefertari) applications, but can\nbe used with any WSGI-conformant, RAML-described API.\n\nIt currently depends on pytest but may be adapted for other test frameworks\nin the future. It works best using WebTest but doesn't require it.\n\n## Name\n\nRa was the god of the sun, the most important god in ancient Egypt.\n\n\n## Try it (dev)\n\nRun the test suite:\n\n```bash\n    $ pip install -r requirements.txt\n    $ py.test\n```\n\nCheck out the example:\n\n```bash\n    $ cd examples/ramses-test\n    $ pip install -r requirements.txt\n    $ py.test\n```\n\nThe example RAML at `examples/ramses-test/api.raml` and the test file\n`examples/ramses-test/tests/test_api.py` should be helpful to reference.\n\nSee the docs in `docs/`, and the `api.raml` and `tests/test_api.py` in\n`tests/apps/ramses_test`",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/ramses-tech/ra",
            "keywords": "web raml",
            "license": "UNKNOWN",
            "maintainer": null,
            "maintainer_email": null,
            "name": "ra",
            "package_url": "https://pypi.org/project/ra/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/ra/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/ramses-tech/ra"
            },
            "release_url": "https://pypi.org/project/ra/0.2.0/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Test RAML API definition",
            "version": "0.2.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Shoumik Palkar",
            "author_email": "shoumik@cs.stanford.edu",
            "bugtrack_url": null,
            "classifiers": [
               "License :: OSI Approved :: BSD License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 3"
            ],
            "description": "## split annotations\n\nThis package contains the Python implementation of [split annotations](), a system for optimizing applications\nthat combine many data-intensive library functions. See some useful links below.\n\n* [Documentation for this package](https://www.weld.rs/split-annotations/docs/)\n* [GitHub repository](https://www.github.com/weld-project/split-annotations)\n* [SOSP 2019 Paper describing the system](https://shoumik.xyz/static/papers/mozart-sosp19final.pdf)\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://www.github.com/weld-project/split-annotations",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "sa",
            "package_url": "https://pypi.org/project/sa/",
            "platform": "",
            "project_url": "https://pypi.org/project/sa/",
            "project_urls": {
               "Homepage": "https://www.github.com/weld-project/split-annotations"
            },
            "release_url": "https://pypi.org/project/sa/0.0.4/",
            "requires_dist": [
               "numpy",
               "pandas",
               "scipy",
               "sharedmem"
            ],
            "requires_python": ">=3.6",
            "summary": "Python split annotations package",
            "version": "0.0.4",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Mitch Garnaat",
            "author_email": "mitch@garnaat.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.6",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.3",
               "Programming Language :: Python :: 3.4",
               "Topic :: Internet"
            ],
            "description": "####\nboto\n####\nboto 2.49.0\n\nReleased: 11-July-2018\n\n.. image:: https://travis-ci.org/boto/boto.svg?branch=develop\n        :target: https://travis-ci.org/boto/boto\n\n.. image:: https://pypip.in/d/boto/badge.svg\n        :target: https://pypi.python.org/pypi/boto/\n\n******\nBoto 3\n******\n\n`Boto3 <https://github.com/boto/boto3>`__, the next version of Boto, is now\nstable and recommended for general use.  It can be used side-by-side with Boto\nin the same project, so it is easy to start using Boto3 in your existing\nprojects as well as new projects. Going forward, API updates and all new\nfeature work will be focused on Boto3.\n\nTo assist users who still depend on Boto and cannot immediately switch over, we\nwill be triaging and addressing critical issues and PRs in Boto in the short\nterm. As more users make the switch to Boto3, we expect to reduce our\nmaintenance involvement over time. If we decide on a cutoff date or any\nsignificant changes to our maintenance plan, we will make pre-announcements\nwell ahead of schedule to allow ample time for our users to adapt/migrate.\n\n\n************\nIntroduction\n************\n\nBoto is a Python package that provides interfaces to Amazon Web Services.\nCurrently, all features work with Python 2.6 and 2.7. Work is under way to\nsupport Python 3.3+ in the same codebase. Modules are being ported one at\na time with the help of the open source community, so please check below\nfor compatibility with Python 3.3+.\n\nTo port a module to Python 3.3+, please view our `Contributing Guidelines`_\nand the `Porting Guide`_. If you would like, you can open an issue to let\nothers know about your work in progress. Tests **must** pass on Python\n2.6, 2.7, 3.3, and 3.4 for pull requests to be accepted.\n\n\n********\nServices\n********\n\nAt the moment, boto supports:\n\n* Compute\n\n  * Amazon Elastic Compute Cloud (EC2) (Python 3)\n  * Amazon Elastic Map Reduce (EMR) (Python 3)\n  * AutoScaling (Python 3)\n  * Amazon Kinesis (Python 3)\n  * AWS Lambda (Python 3)\n  * Amazon EC2 Container Service (Python 3)\n\n* Content Delivery\n\n  * Amazon CloudFront (Python 3)\n\n* Database\n\n  * Amazon Relational Data Service (RDS)\n  * Amazon DynamoDB (Python 3)\n  * Amazon SimpleDB (Python 3)\n  * Amazon ElastiCache (Python 3)\n  * Amazon Redshift (Python 3)\n\n* Deployment and Management\n\n  * AWS Elastic Beanstalk (Python 3)\n  * AWS CloudFormation (Python 3)\n  * AWS Data Pipeline (Python 3)\n  * AWS Opsworks (Python 3)\n  * AWS CloudTrail (Python 3)\n  * AWS CodeDeploy (Python 3)\n\n* Administration & Security\n\n  * AWS Identity and Access Management (IAM) (Python 3)\n  * AWS Key Management Service (KMS) (Python 3)\n  * AWS Config (Python 3)\n  * AWS CloudHSM (Python 3)\n\n* Application Services\n\n  * Amazon CloudSearch (Python 3)\n  * Amazon CloudSearch Domain (Python 3)\n  * Amazon Elastic Transcoder (Python 3)\n  * Amazon Simple Workflow Service (SWF) (Python 3)\n  * Amazon Simple Queue Service (SQS) (Python 3)\n  * Amazon Simple Notification Server (SNS) (Python 3)\n  * Amazon Simple Email Service (SES) (Python 3)\n  * Amazon Cognito Identity (Python 3)\n  * Amazon Cognito Sync (Python 3)\n  * Amazon Machine Learning (Python 3)\n\n* Monitoring\n\n  * Amazon CloudWatch (EC2 Only) (Python 3)\n  * Amazon CloudWatch Logs (Python 3)\n\n* Networking\n\n  * Amazon Route53 (Python 3)\n  * Amazon Route 53 Domains (Python 3)\n  * Amazon Virtual Private Cloud (VPC) (Python 3)\n  * Elastic Load Balancing (ELB) (Python 3)\n  * AWS Direct Connect (Python 3)\n\n* Payments and Billing\n\n  * Amazon Flexible Payment Service (FPS)\n\n* Storage\n\n  * Amazon Simple Storage Service (S3) (Python 3)\n  * Amazon Glacier (Python 3)\n  * Amazon Elastic Block Store (EBS)\n  * Google Cloud Storage\n\n* Workforce\n\n  * Amazon Mechanical Turk\n\n* Other\n\n  * Marketplace Web Services (Python 3)\n  * AWS Support (Python 3)\n\nThe goal of boto is to support the full breadth and depth of Amazon\nWeb Services.  In addition, boto provides support for other public\nservices such as Google Storage in addition to private cloud systems\nlike Eucalyptus, OpenStack and Open Nebula.\n\nBoto is developed mainly using Python 2.6.6 and Python 2.7.3 on Mac OSX\nand Ubuntu Maverick.  It is known to work on other Linux distributions\nand on Windows.  Most of Boto requires no additional libraries or packages\nother than those that are distributed with Python.  Efforts are made\nto keep boto compatible with Python 2.5.x but no guarantees are made.\n\n************\nInstallation\n************\n\nInstall via `pip`_:\n\n::\n\n    $ pip install boto\n\nInstall from source:\n\n::\n\n    $ git clone git://github.com/boto/boto.git\n    $ cd boto\n    $ python setup.py install\n\n**********\nChangeLogs\n**********\n\nTo see what has changed over time in boto, you can check out the\nrelease notes at `http://docs.pythonboto.org/en/latest/#release-notes`\n\n***************************\nFinding Out More About Boto\n***************************\n\nThe main source code repository for boto can be found on `github.com`_.\nThe boto project uses the `gitflow`_ model for branching.\n\n`Online documentation`_ is also available. The online documentation includes\nfull API documentation as well as Getting Started Guides for many of the boto\nmodules.\n\nBoto releases can be found on the `Python Cheese Shop`_.\n\nJoin our IRC channel `#boto` on FreeNode.\nWebchat IRC channel: http://webchat.freenode.net/?channels=boto\n\nJoin the `boto-users Google Group`_.\n\n*************************\nGetting Started with Boto\n*************************\n\nYour credentials can be passed into the methods that create\nconnections.  Alternatively, boto will check for the existence of the\nfollowing environment variables to ascertain your credentials:\n\n**AWS_ACCESS_KEY_ID** - Your AWS Access Key ID\n\n**AWS_SECRET_ACCESS_KEY** - Your AWS Secret Access Key\n\nCredentials and other boto-related settings can also be stored in a\nboto config file.  See `this`_ for details.\n\n.. _Contributing Guidelines: https://github.com/boto/boto/blob/develop/CONTRIBUTING\n.. _Porting Guide: http://boto.readthedocs.org/en/latest/porting_guide.html\n.. _pip: http://www.pip-installer.org/\n.. _release notes: https://github.com/boto/boto/wiki\n.. _github.com: http://github.com/boto/boto\n.. _Online documentation: http://docs.pythonboto.org\n.. _Python Cheese Shop: http://pypi.python.org/pypi/boto\n.. _this: http://docs.pythonboto.org/en/latest/boto_config_tut.html\n.. _gitflow: http://nvie.com/posts/a-successful-git-branching-model/\n.. _neo: https://github.com/boto/boto/tree/neo\n.. _boto-users Google Group: https://groups.google.com/forum/?fromgroups#!forum/boto-users\n\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/boto/boto/",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "boto",
            "package_url": "https://pypi.org/project/boto/",
            "platform": "Posix; MacOS X; Windows",
            "project_url": "https://pypi.org/project/boto/",
            "project_urls": {
               "Homepage": "https://github.com/boto/boto/"
            },
            "release_url": "https://pypi.org/project/boto/2.49.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Amazon Web Services Library",
            "version": "2.49.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Hadi Asghari",
            "author_email": "hd.asghari@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 3",
               "Topic :: Software Development :: Libraries :: Python Modules",
               "Topic :: System :: Networking"
            ],
            "description": "pyasn\n=====\n\n.. image:: https://pypip.in/v/pyasn/badge.png\n   :target: https://pypi.python.org/pypi/pyasn\n\n.. image:: https://pypip.in/d/pyasn/badge.png\n   :target: https://pypi.python.org/pypi/pyasn\n\n\n**pyasn** is a Python extension module that enables very fast IP address to Autonomous System Number lookups.\nCurrent state and Historical lookups can be done, based on the MRT/RIB BGP archive used as input.\n\n*pyasn* is different from other ASN lookup tools in that it provides **offline** and **historical** lookups.\nIt provides utility scripts for users to build their own lookup databases based on any MRT/RIB archive.\nThis makes *pyasn* much faster than online dig/whois/json lookups.\n\nThe module is written in C and Python, and cross-compiles on Linux and Windows. Underneath, it uses a radix tree\ndata structure for storage of IP addresses. In the current version, it borrows code from *py-radix* to support\nboth IPV4 and IPV6 network prefixes. The current release is a beta. Compared to the previous version, it provides\nsupport for Python 2 and 3; adds new functionality, performance improvements, and unit-tests.\n\n*pyasn* is developed and maintained by researchers at the Economics of Cybersecurity research group at Delft\nUniversity of Technology (http://econsec.tbm.tudlft.nl). The package is used on an almost daily basis and bugs\nare fixed pretty quickly.  The package is largely developed and maintained by Hadi Asghari and Arman Noroozian.\nPlease report any bugs via GitHub (https://github.com/hadiasghari/pyasn) or email the developers.\n\n\nInstallation\n============\nInstallation is a breeze via pip: ::\n\n    pip install pyasn --pre\n\nOr with the standard Python: ::\n\n    python setup.py build\n    python setup.py install --record log\n\nYou will need to have pip, setuptools and build essentials installed if you build the package manually. On\nUbuntu/Debian you can get them using the following command: ::\n\n    sudo apt-get install python-pip python-dev build-essential\n\nBuilding the C module on Windows, using either pip or from source, requires Microsoft Visual C++ to be installed.\npyasn has been tested using Visual C++ Express 2010, available freely from Microsoft's website, on both the\nofficial Python 3.4 release and Miniconda3. Other versions of Python, Visual Studio, and Cygwin could also work\nwith minor modifications.\n\nWe plan to release *pyasn* packages to major Linux repositories once it is out of beta.\n\n\nUsage\n=====\nA simple example that demonstrates most of the features: ::\n\n    import pyasn\n\n    # Initialize module and load IP to ASN database\n    # the sample database can be downloaded or built - see below\n    asndb = pyasn.pyasn('ipasn_20140513.dat')\n\n    asndb.lookup('8.8.8.8')\n    # should return: (15169, '8.8.8.0/24'), the origin AS, and the BGP prefix it matches\n\n    asndb.get_as_prefixes(1128)\n    # returns ['130.161.0.0/16', '131.180.0.0/16', '145.94.0.0/16'], TU-Delft prefixes\n\n\nIPASN Data Files\n================\nIPASN data files are a long list of prefixes used to lookup AS number for IPs. An excerpt from such a file looks\nlike this: ::\n\n    ; IP-ASN32-DAT file\n    ; Original file : <Path to a rib file>\n    ; Converted on  : Tue May 13 22:03:05 2014\n    ; CIDRs         : 512490\n    ;\n    1.0.0.0/24  15169\n    1.0.128.0/17        9737\n    1.0.128.0/18        9737\n    1.0.128.0/19        9737\n    1.0.129.0/24        23969\n    ...\n\nIPASN data files can be created by downloading MRT/RIB BGP archives from Routeviews (or similar sources),\nand parsing them using provided scripts that tail the BGP AS-Path. This can be done simply as follows: ::\n\n    pyasn_util_download.py --latest\n    pyasn_util_convert.py --single <Downloaded RIB File> <ipasn_db_file_name>\n\n\n**NOTE:** These scripts are by default installed to ``/usr/local/bin`` and can be executed directly. If you installed\nthe package to a user directory, these scripts will not be on the path and you will have to invoke them by navigating\nto the folder in which they have been copied (e.g. ``~/.local/bin``).\n\nWe also provide download links to a large number of previously generated IPASN data files. These are based on\nweekly  snapshots of the Routeviews data from 2005-2015, accessible here:\nhttp://data.3tu.nl/repository/uuid:d4d23b8e-2077-4592-8b47-cb476ad16e12\n\n**New in v1.6:** To save disk space, you can gzip IPASN data files. The load time will be slighlty longer.\n\n\nPerformance Tip\n===============\nInitial loading of a IPASN data file is the most heavy operation of the package. For fast lookups using multiple\nIPASN data files, for instance for historical lookups on multiple dates, we recommend caching of loaded data files\nfor better performance.\n\n\nUninstalling pyasn\n==================\nYou can remove *pyasn* as follows: ::\n\n    pip uninstall pyasn\n\nIf you built and installed the package your self use the recorded log to remove the installed files.\n\n**Removing PyASN version 1.2**: *pyasn* v1.5/1.6 and v1.2 can be installed side by side (due to lower-cased package\nname). To avoid mistakes, you can uninstall the old **PyASN** by deleting the following files from your Python\ninstallation: ::\n\n    PYTHONDIR/dist-packages/PyASN.so\n    PYTHONDIR/dist-packages/PyASN-1.2.egg-info\n\n\nPackage Structure\n=================\nThe main portions of the directory tree are as follows: ::\n\n    .\n    ├── pyasn/__init__.py       # Python code of the main pyasn module\n    ├── pyasn/pyasn_radix.c     # C extension code (Python RADIX module with bulk load)\n    ├── pyasn/_radix/*          # C extension code (Based on original RADIX code from MRTd)\n    ├── pyasn/mrtx.py           # python module used to convert MRT files to pyasn DB files\n    ├── pyasn-utils/*.py        # Scripts to download & convert BGP MRT dumps to IPASN databases\n    ├── data/                   # Test Resources and some sample DBs to use\n    ├── tests/                  # Tests\n    └── setup.py                # Standard setup.py for installation/testing/etc.\n\n\n\nTesting pyasn Sources\n=====================\nA limited number of unit tests are provided in the ``tests/`` directory when downlading the sources. They can be\nrun with the following command: ::\n\n    python setup.py test\n\nThis beta release has been tested under python version 2.6, 2.7, 3.3, 3.4 and 3.5. We appreciate contributions towards\ntesting *pyasn*!\n\n**New in v1.6:** pyasn_util_convert.py offers a '--dump-screen' option which shows the MRT/RIB archive contents and\nthe chosen origin-AS.\n\n\nLicense & Acknowledgments\n=========================\n*pyasn* is licensed under the MIT license.\n\nIt extends code from py-radix (Michael J. Schultz and Damien Miller),  and improves upon it in several ways, for\ninstance in lowering memory usage and adding bulk prefix/origin load. The underlying radix tree implementation is\ntaken (and modified) from MRTd. These are all subject to their respective licenses.  Please see the LICENSE file\nfor details.\n\nThanks to Dr. Chris Lee (of Shadowserver) for proposing the use of radix trees.\n\nA handful of GitHub developers have contributed features and bug fixes to the latest releases.\nMany thanks to all of them.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": null,
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/hadiasghari/pyasn",
            "keywords": "ip asn autonomous system bgp whois prefix radix python routing networking",
            "license": "MIT",
            "maintainer": null,
            "maintainer_email": null,
            "name": "pyasn",
            "package_url": "https://pypi.org/project/pyasn/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/pyasn/",
            "project_urls": {
               "Homepage": "https://github.com/hadiasghari/pyasn"
            },
            "release_url": "https://pypi.org/project/pyasn/1.6.0b1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Offline IP address to Autonomous System Number lookup module.",
            "version": "1.6.0b1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Perdix Software",
            "author_email": "ssmith@perdixsw.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 2 - Pre-Alpha",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.4",
               "Programming Language :: Python :: 3.5",
               "Programming Language :: Python :: 3.6",
               "Topic :: Office/Business :: Financial",
               "Topic :: Scientific/Engineering :: Mathematics"
            ],
            "description": "UNKNOWN",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "https://www.github.com/perdixsw/umpy/tarball/0.1.0",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://www.github.com/perdixsw/umpy",
            "keywords": "units,measure,measurement,conversion,converter",
            "license": "MIT",
            "maintainer": null,
            "maintainer_email": null,
            "name": "umpy",
            "package_url": "https://pypi.org/project/umpy/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/umpy/",
            "project_urls": {
               "Download": "https://www.github.com/perdixsw/umpy/tarball/0.1.0",
               "Homepage": "https://www.github.com/perdixsw/umpy"
            },
            "release_url": "https://pypi.org/project/umpy/0.1.0/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Simple unit of measure conversion for python, optimized for manufacturing contexts.",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Jay Marcyes",
            "author_email": "jay@marcyes.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Environment :: Console",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Topic :: Software Development :: Testing"
            ],
            "description": "Pyt\n===\n\nPyt is a lightweight wrapper around `Python’s unittest\nmodule <https://docs.python.org/3/library/unittest.html>`__ that adds\nsome nice features and enhancements over the stock ``unittest`` module.\n\nQuickstart\n~~~~~~~~~~\n\nPyt overrides unittest’s built-in pathfinding to be smarter and less\nverbose, so you can match tests using prefix matching which makes\nrunning a test like:\n\n::\n\n   $ python -m unittest tests.foo_test.BarTestCase.test_che\n\nas simple as:\n\n::\n\n   $ pyt foo.Bar.che\n\nBut it’s even less verbose if you want it to be, pyt can reach into the\nmodules and classes to do its matching, so you don’t even need to\nspecify the module and class if you don’t want to:\n\n::\n\n   $ pyt che\n\nMore examples\n^^^^^^^^^^^^^\n\nTo run all the ``Happy`` tests:\n\n::\n\n   $ pyt Happy\n\nTo run all the ``newmodule`` tests:\n\n::\n\n   $ pyt newmodule\n\nTo run more than one test:\n\n::\n\n   $ pyt test1 test2 ...\n\nTo run every test ``pyt`` can find:\n\n::\n\n   $ pyt\n\nAnd the way I like to run all tests in the current directory:\n\n::\n\n   $ pyt -vb\n\nWhich can also be written:\n\n::\n\n   $ pyt --verbose --buffer\n\nFlags\n~~~~~\n\nTo see everything pyt can do\n\n::\n\n   $ pyt --help\n\n–warnings\n^^^^^^^^^\n\nThis will convert warnings into errors.\n\n::\n\n   $ pyt --warnings\n\n–rerun\n^^^^^^\n\nIf your last testrun had failing tests this will rerun only the tests\nthat failed.\n\n::\n\n   $pyt --rerun\n\nThings to be aware of\n~~~~~~~~~~~~~~~~~~~~~\n\npyt uses Python’s PEP 8 style conventions\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n``pyt`` uses `Python’s code styling\nconventions <http://www.python.org/dev/peps/pep-0008/>`__ to decide what\nis the module and class, so, given input like this:\n\n::\n\n   $ pyt foo.bar.Baz.che\n\n``pyt`` will consider ``foo.bar`` to be the module, ``Baz`` to be a\nclass (because it starts with a capital letter), and ``che`` to be a\nmethod (since it comes after the class).\n\nLikewise, ``pyt`` uses unittest conventions, so a test module should end\nwith ``_test`` (eg, ``foo.bar_test``) or start with test (eg,\n``test_foo.py``) and a TestCase class should extend\n``unittest.TestCase``, and test methods should start with ``test_`` (eg,\n``test_che``).\n\nVague input can cause pyt to run more tests than you expect\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSo if you have something like this:\n\n::\n\n   project/\n     __init__.py\n     user.py\n     foo/\n       __init__.py\n       user.py\n     tests/\n       __init__.py\n       user_test.py\n       foo/\n         __init__.py\n         user_test.py\n\nAnd you want to run tests for ``foo.user`` and you run:\n\n::\n\n   $ pyt user\n\nit will run both ``tests/user_test`` and ``tests.foo.user_test``, the\nsolution is to just be more verbose when you have to be:\n\n::\n\n   $ pyt foo.user\n\nEnvironment Variables\n^^^^^^^^^^^^^^^^^^^^^\n\nIf you are running the tests within pyt, you might notice there is an\nenvironment variable ``PYT_TEST_COUNT`` that contains the count of how\nmany tests pyt found to run.\n\nInstallation\n------------\n\nUse ``pip``:\n\n::\n\n   $ pip install pyt\n\nYou can also get it directly from the repo:\n\n::\n\n   $ pip install --upgrade git+https://github.com/Jaymon/pyt#egg=pyt\n\nIf you install pyt using Python 3 it can also be invoked using the\n``pyt3`` command:\n\n::\n\n   $ pyt3 --help\n\nLikewise, Python 2 installs a ``pyt2`` command:\n\n::\n\n   $ pyt2 --help\n\nTesting\n-------\n\nTesting in 2.7 on most systems:\n\n::\n\n   $ python -m unittest pyt_test\n\nTesting in 3.5 on MacOS:\n\n::\n\n   $ python3.5 -m unittest pyt_test\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "http://github.com/Jaymon/pyt",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyt",
            "package_url": "https://pypi.org/project/pyt/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyt/",
            "project_urls": {
               "Homepage": "http://github.com/Jaymon/pyt"
            },
            "release_url": "https://pypi.org/project/pyt/1.0.5/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "easily run python unit tests",
            "version": "1.0.5",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Bradley Odell",
            "author_email": "btodell@hotmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Environment :: Console",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
               "Natural Language :: English",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 2.6",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Topic :: Software Development :: Build Tools"
            ],
            "description": "pyz\n===\n\n*Packages all source code and dependencies into a single Python zip application.*\n\nSummary\n-------\n\nDeploying a Python application any larger than a single file is\ncumbersome - this library aims to solve that problem.\n\nPython has been able to run code from within a zip file since version\n2.6. Python 3.5 introduced the `zipapp <https://docs.python.org/3/library/zipapp.html>`__ module\nwhich aims to simplify the process of creating a zip application.\nHowever, **zipapp** isn't a complete solution to the problem - it\ndoesn't handle dependencies and it doesn't include certain extra\nfeatures that this library provides.\n\nThis library allows you to bundle all of your Python code **AND** your\ndependencies into a single Python zip application file.\n\nNote: The dependency bundling feature is not implemented yet, but it is\nin the works!\n\nFeatures\n--------\n\n1. Bundle all Python source code with fine-grained control over included files.\n2. Ability to \"unixify\" the output application by prepending a customizable\n   `shebang <https://en.wikipedia.org/wiki/Shebang_(Unix)>`__.\n3. Python interpreter version check - display a friendly notice instead\n   of a Python exception if the user runs your application using an\n   unsupported Python version.\n\nPlanned\n-------\n\n1. Automatically identify dependencies and package them accordingly.\n",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "https://github.com/BTOdell/pyz/archive/0.4.3.tar.gz",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/BTOdell/pyz",
            "keywords": "pyz zip app zipapp bundle dependencies library",
            "license": "GPLv3",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyz",
            "package_url": "https://pypi.org/project/pyz/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyz/",
            "project_urls": {
               "Download": "https://github.com/BTOdell/pyz/archive/0.4.3.tar.gz",
               "Homepage": "https://github.com/BTOdell/pyz"
            },
            "release_url": "https://pypi.org/project/pyz/0.4.3/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Packages all source code and dependencies into a single Python zip application.",
            "version": "0.4.3",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Val Neekman",
            "author_email": "info@neekware.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 3 - Alpha",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Operating System :: POSIX",
               "Programming Language :: Python",
               "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description": "AWSLI\n====================\n\n**Amazon Web Services Line Interpreter**\n\n**Author:** Val Neekman [ info@neekware.com, @vneekman ]\n\nOverview\n========\n\nA Line Interpreter for Amazon Web Services.\n\nHow to install\n==================\n\n    1. easy_install awsli\n    2. pip install awsli\n    3. git clone http://github.com/un33k/awsli\n        a. cd awsli\n        b. run python setup.py\n    4. wget https://github.com/un33k/awsli/zipball/master\n        a. unzip the downloaded file\n        b. cd into awsli-* directory\n        c. run python setup.py\n\nHow to use\n=================\n\n``Usage``\n\n``Note:``\n\nRunning the tests\n=================\n\nTo run the tests against the current environment:\n\n    python test.py\n\nChangelog\n=========\n\n0.1\n-----\n\n* Initial release\n\n\nLicense\n=======\n\nCopyright (c) 2012, Val Neekman\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without \nmodification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this \nlist of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this \nlist of conditions and the following disclaimer in the documentation and/or \nother materials provided with the distribution.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND \nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED \nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE \nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE \nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL \nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR \nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, \nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE \nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/un33k/awsli",
            "keywords": null,
            "license": "BSD",
            "maintainer": null,
            "maintainer_email": null,
            "name": "awsli",
            "package_url": "https://pypi.org/project/awsli/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/awsli/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/un33k/awsli"
            },
            "release_url": "https://pypi.org/project/awsli/0.0.1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "A Line Interpreter for Amazon Web Services",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Armin Ronacher",
            "author_email": "armin.ronacher@active-4.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Environment :: Web Environment",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
               "Topic :: Software Development :: Libraries :: Python Modules",
               "Topic :: Text Processing :: Markup :: HTML"
            ],
            "description": "jinja\n~~~~~\n\nJinja is a `sandboxed`_ template engine written in pure Python. It\nprovides a `Django`_ like non-XML syntax and compiles templates into\nexecutable python code. It's basically a combination of Django templates\nand python code.\n\nNutshell\n--------\n\nHere a small example of a Jinja template::\n\n    {% extends 'base.html' %}\n    {% block title %}Memberlist{% endblock %}\n    {% block content %}\n      <ul>\n      {% for user in users %}\n        <li><a href=\"{{ user.url|e }}\">{{ user.username|e }}</a></li>\n      {% endfor %}\n      </ul>\n    {% endblock %}\n\nPhilosophy\n----------\n\nApplication logic is for the controller but don't try to make the life\nfor the template designer too hard by giving him too few functionality.\n\nFor more informations visit the new `jinja webpage`_ and `documentation`_.\n\nNote\n----\n\nThis is the Jinja 1.0 release which is completely incompatible with the\nold \"pre 1.0\" branch. The old branch will still receive security updates\nand bugfixes but the 1.0 branch will be the only version that receives\nsupport.\n\nIf you have an application that uses Jinja 0.9 and won't be updated in\nthe near future the best idea is to ship a Jinja 0.9 checkout together\nwith the application.\n\nThe `Jinja tip`_ is installable via `easy_install` with ``easy_install\nJinja==dev``.\n\n.. _sandboxed: http://en.wikipedia.org/wiki/Sandbox_(computer_security)\n.. _Django: http://www.djangoproject.com/\n.. _jinja webpage: http://jinja.pocoo.org/\n.. _documentation: http://jinja.pocoo.org/documentation/index.html\n.. _Jinja tip: http://dev.pocoo.org/hg/jinja-main/archive/tip.tar.gz#egg=Jinja-dev\n\n\n:copyright: 2007 by Armin Ronacher.\n:license: BSD, see LICENSE for more details.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "http://jinja.pocoo.org/",
            "keywords": "python.templating.engines",
            "license": "BSD",
            "maintainer": null,
            "maintainer_email": null,
            "name": "Jinja",
            "package_url": "https://pypi.org/project/Jinja/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/Jinja/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "http://jinja.pocoo.org/"
            },
            "release_url": "https://pypi.org/project/Jinja/1.2/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "A small but fast and easy to use stand-alone template engine written in pure python.",
            "version": "1.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Hsiaoming Yang",
            "author_email": "me@lepture.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Environment :: Console",
               "Environment :: Web Environment",
               "Framework :: Django",
               "Framework :: Flask",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.5",
               "Programming Language :: Python :: 3.6",
               "Programming Language :: Python :: 3.7",
               "Programming Language :: Python :: 3.8",
               "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
               "Topic :: Internet :: WWW/HTTP :: WSGI :: Application",
               "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description": "Authlib\n=======\n\nThe ultimate Python library in building OAuth and OpenID Connect servers.\nJWS, JWK, JWA, JWT are included.\n\nUseful Links\n------------\n\n1. Homepage: https://authlib.org/\n2. Documentation: https://docs.authlib.org/\n3. Purchase Commercial License: https://authlib.org/plans\n4. Blog: https://blog.authlib.org/\n5. More Repositories: https://github.com/authlib\n6. Twitter: https://twitter.com/authlib\n7. Donate: https://www.patreon.com/lepture\n\nSpecifications\n--------------\n\n- RFC5849: The OAuth 1.0 Protocol\n- RFC6749: The OAuth 2.0 Authorization Framework\n- RFC6750: The OAuth 2.0 Authorization Framework: Bearer Token Usage\n- RFC7009: OAuth 2.0 Token Revocation\n- RFC7515: JSON Web Signature\n- RFC7516: JSON Web Encryption\n- RFC7517: JSON Web Key\n- RFC7518: JSON Web Algorithms\n- RFC7519: JSON Web Token\n- RFC7521: Assertion Framework for OAuth 2.0 Client Authentication and Authorization Grants\n- RFC7523: JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants\n- RFC7591: OAuth 2.0 Dynamic Client Registration Protocol\n- RFC7662: OAuth 2.0 Token Introspection\n- RFC8414: OAuth 2.0 Authorization Server Metadata\n- RFC8628: OAuth 2.0 Device Authorization Grant\n- OpenID Connect 1.0\n- OpenID Connect Discovery 1.0\n\nImplementations\n---------------\n\n- Requests OAuth 1 Session\n- Requests OAuth 2 Session\n- Requests Assertion Session\n- Flask OAuth 1/2 Client\n- Django OAuth 1/2 Client\n- Flask OAuth 1.0 Server\n- Flask OAuth 2.0 Server\n- Flask OpenID Connect 1.0\n- Django OAuth 1.0 Server\n- Django OAuth 2.0 Server\n- Django OpenID Connect 1.0\n\nLicense\n-------\n\nAuthlib is licensed under BSD. Please see LICENSE for licensing details.\n\nIf this license does not fit your company, consider to purchase a commercial\nlicense. Find more information on `Authlib Plans`_.\n\n.. _`Authlib Plans`: https://authlib.org/plans\n\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://authlib.org/",
            "keywords": "",
            "license": "BSD-3-Clause",
            "maintainer": "",
            "maintainer_email": "",
            "name": "Authlib",
            "package_url": "https://pypi.org/project/Authlib/",
            "platform": "any",
            "project_url": "https://pypi.org/project/Authlib/",
            "project_urls": {
               "Blog": "https://blog.authlib.org/",
               "Bug Tracker": "https://github.com/lepture/authlib/issues",
               "Commercial License": "https://authlib.org/plans",
               "Documentation": "https://docs.authlib.org/",
               "Donate": "https://lepture.com/donate",
               "Homepage": "https://authlib.org/",
               "Source Code": "https://github.com/lepture/authlib"
            },
            "release_url": "https://pypi.org/project/Authlib/0.14.3/",
            "requires_dist": [
               "cryptography",
               "requests ; extra == 'client'"
            ],
            "requires_python": "",
            "summary": "The ultimate Python library in building OAuth and OpenID Connect servers.",
            "version": "0.14.3",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Julien Bigot",
            "author_email": "julien.bigot@cea.fr",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Environment :: Console",
               "License :: OSI Approved :: MIT License"
            ],
            "description": "# zpp\n\nThis is zpp, the Z Pre-Processor.\n\nZpp transforms bash in a pre-processor for F90 source files.\nIt offers a set of functions specifically tailored to build clean Fortran90\ninterfaces by generating code for all types, kinds, and array ranks supported by\na given compiler.\n\n## Syntax\n\nZpp files are typically named `*.F90.zpp`.\n\nIn these files, the lines that start with `!$SH` are interpreted as bash lines. \nOther lines are copied as-is, except that variable substitution is operated as\nin a double-quoted string, including bash commands `${VAR}` or `$(command)`.\nIf inside a bash control block (`if`, `for`, etc.), the output generation obeys\nthe control statement.\n\nFor example, this code:\n```\n!$SH for GREETED in world universe multiverse ; do\nprint *, \"Hello ${GREETED}\"\n!$SH done\n```\n\nWould produce the following result:\n```\nprint *, \"Hello world\"\nprint *, \"Hello universe\"\nprint *, \"Hello multiverse\"\n```\n\n### Support functions\n\nPredefined bash functions, variable and code can be provided in `.zpp.sh` files\nthat can be included with `#!SH source <filename>.zpp.sh`.\n\n**Beware**: a file NEEDs to have the `.zpp.sh` extension to be included from\nzpp.\n\nZpp provides a standard library of functions tailored to build clean Fortran90\ninterfaces by generating code for all types, kinds, and array ranks supported by\na given compiler.\n\n#### zpp_str_repeat\n\nFound in `base.zpp.sh`\n\nOutputs a string multiple times.\n\nParameters:\n1. the string to Repeat\n2. the lower bound of the iterations (inclusive)\n3. the upper bound of the iterations (inclusive)\n4. the string separator\n5. the string starter\n6. the string ender\n\nRepeats string `$1` (`$3`-`$2`+1) times, separated by string `$4` inside `$5`\n`$6`.\n* If the number of repetitions is negative, the result is empty.\n* If `$1` contains the '@N' substring, it will be replaced by the iteration\n  number (from `$2` to `$3`).\n\nexample:\n```\n#!SH source base.zpp.sh\nzpp_str_repeat v@N 5 7 '...' '<<' '>>'\nzpp_str_repeat w@N 1 1 '...' '<<' '>>'\nzpp_str_repeat x@N 1 0 '...' '<<' '>>'\n```\noutput:\n```\n<<v5...v6...v7>>\n<<w1>>\n```\n\n#### zpp_str_repeat_reverse\n\nFound in `base.zpp.sh`\n\nOutputs a string multiple times in reverse order.\n\nParameters:\n1. the string to Repeat\n2. the upper bound of the iterations (inclusive)\n3. the lower bound of the iterations (inclusive)\n4. the string separator\n5. the string starter\n6. the string ender\n\nRepeats string `$1` (`$2`-`$3`+1) times, separated by string `$4` inside `$5`\n`$6`.\n* If the number of repetitions is negative, the result is empty.\n* If `$1` contains the '@N' substring, it will be replaced by the iteration\n  number (from `$2` to `$3`, i.e. upper to lower).\n\nexample:\n```\n#!SH source base.zpp.sh\nzpp_str_repeat_reverse v@N 5 7 '...' '<<' '>>'\nzpp_str_repeat_reverse w@N 1 1 '...' '<<' '>>'\nzpp_str_repeat_reverse x@N 1 0 '...' '<<' '>>'\n```\noutput:\n```\n<<v7...v6...v5>>\n<<w1>>\n```\n\n#### ZPP_FORT_TYPES\n\nFound in `fortran.zpp.sh`\n\nThe list of types supported by the fortran compiler as zpp:typeIDs.\n\nThe compiler ID should be provided in `ZPP_CONFIG` as `config.<ID>`.\nThe supported predefined IDs are: `Gnu`, `Intel`, `PGI` and `XL`.\nYou can also provide definitions for an additional compiler by defining\n`ZPP_FORT_TYPES` in a file named `config.<ID>.zpp.sh`.\n\nIf you use cmake, it will automatically generate such a file for your compiler\nand define  `ZPP_CONFIG` so you don't have to handle it.\n\n### zpp_fort_array_desc\n\nFound in `fortran.zpp.sh`\n\nOutputs an assumed shaped array descriptor of the provided size.\n\nParameters:\n1. the size of the assumed shaped array\n\nexample:\n```\n#!SH source fortran.zpp.sh\ninteger:: scalar$(zpp_fort_array_desc 0)\ninteger:: array1d$(zpp_fort_array_desc 1)\ninteger:: array2d$(zpp_fort_array_desc 2)\n```\noutput:\n```\ninteger:: scalar\ninteger:: array1d(:)\ninteger:: array2d(:,:)\n```\n\n### zpp_fort_ptype\n\nFound in `fortran.zpp.sh`\n\nOutputs the type associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\nexample:\n```\n#!SH source fortran.zpp.sh\n!$SH for T in ${ZPP_FORT_TYPES} ; do\n$(zpp_fort_ptype $1)\n!$SH done\n```\nexample output:\n```\nCHARACTER\nCOMPLEX\nCOMPLEX\nINTEGER\nINTEGER\nINTEGER\nINTEGER\nLOGICAL\nREAL\nREAL\n```\n\n### zpp_fort_kind\n\nFound in `fortran.zpp.sh`\n\nOutputs the kind associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\nexample:\n```\n#!SH source fortran.zpp.sh\n!$SH for T in ${ZPP_FORT_TYPES} ; do\n$(zpp_fort_kind $1)\n!$SH done\n```\nexample output:\n```\n1\n4\n8\n1\n2\n4\n8\n1\n4\n8\n```\n\n### zpp_fort_type\n\nFound in `fortran.zpp.sh`\n\nOutputs the full type (with kind included) associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n2. additional attributes for the type\n\nexample:\n```\n#!SH source fortran.zpp.sh\n!$SH for T in ${MY_CHAR_TYPES} ; do\n$(zpp_fort_type $1)\n$(zpp_fort_type $1 \"len=5\")\n!$SH done\n```\nexample output:\n```\nCHARACTER(KIND=1)\nCHARACTER(KIND=1,len=5)\n```\n\n### zpp_fort_sizeof\n\nFound in `fortran.zpp.sh`\n\nOutputs the size in bits associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\n### zpp_fort_io_format\n\nFound in `fortran.zpp.sh`\n\nOutputs an IO descriptor suitable for a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\n### ZPP_HDF5F_TYPES\n\nFound in `hdf5_fortran.zpp.sh`\n\nA list of zpp:typeIDs supported by HDF5.\n\n### hdf5_constant\n\nFound in `hdf5_fortran.zpp.sh`\n\nOutputs the HDF5 type constant associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\nexample:\n```\n#!SH source hdf5_fortran.zpp.sh\n!$SH for T in ${ZPP_HDF5F_TYPES} ; do\n$(hdf5_constant $1)\n!$SH done\n```\nexample output:\n```\nH5T_NATIVE_INTEGER\nH5T_NATIVE_REAL\nH5T_NATIVE_REAL\nH5T_NATIVE_CHARACTER\n```\n\n\n## Command-line interface\n\nZpp basic usage is as follow:\n```\nUsage: zpp [Options...] <source> [<destination>]\n  use `zpp -h' for more info\n\nPreprocesses BASH in-line commands in a source file\n\nOptions:\n  --version        show program's version number and exit\n  -h, --help       show this help message and exit\n  -I DIR           Add DIR to search list for source directives\n  -o FILE          Place the preprocessed code in file FILE.\n  -D OPTION=VALUE  Set the value of OPTION to VALUE\n```\n\n## CMake interface\n\nSupport is provided for using zpp from CMake based projects, but you can use\nit from plain Makefiles too.\n\nThere are two ways you can use zpp from your CMake project:\n* with `add_subdirectory`: include zpp in your project and use it directly from\n  there,\n* with `find_package`: install zpp and use it as an external dependency of your\n  project.\n\n#### CMake subdirectory usage\n\nUsing zpp with `add_subdirectory` is very simple.\nJust copy the `zpp` directory in your source and point to it with\n`add_subdirectory(zpp)`.\nThe `zpp_preprocess` then becomes available to process zpp files.\n\nThis is demonstrated in `example/cmake_subdirectory`.\n\n#### CMake find usage\n\nUsing zpp with `find_package` is no more complex.\nIf zpp is installed, just add a `find_package(zpp REQUIRED)`.\nThe `zpp_preprocess` then becomes available to process zpp files.\n\nThis is demonstrated in `example/cmake_find`.\n\n## GMake usage\n\nUsing zpp from a GNU Makefile is slightly less powerful than from CMake.\nThe types and kinds supported by the Fortran compiler will not be automatically\ndetected.\nPredefined lists of supported types for well known compilers are provided\ninstead.\n\nTo use zpp from a Makefile, include the `share/zpp/zpp.mk` file (either from an\ninstalled location or from a subdirectory in your project).\nYou can then set the `zpp_COMPILER_ID` variable to the compiler you use and\n`.F90` files will be automatically generated from their `.F90.zpp` equivalent.\nThe `zppFLAGS` variable is automatically passed to zpp similarly to `CFLAGS` or\n`CXXFLAGS` for `cc` and `cxx`.\n\nThis is demonstrated in `example/cmake_makefile`.\n\n## Installation\n\nZpp can be installed using the usual python way with `setup.py`.\n```\n./setup.py --help\n```\n\nThe cmake approach is deprecated.\n\n## FAQ\n\nQ. Isn't zpp redundant with assumed type parameters?\n\nA.\nThe assumed type parameters functionality allows to implement part of what can\nbe done with zpp (support for all kinds of a type). However as of 2013 it was\nnot correctly supported on most compilers installed on the supercomputers.\n\nIn addition, many things can be done with zpp but not with assumed type\nparameters, such as support for variable array rank or small variations of the\ncode depending on the kind.\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "bash Fortran pre-processor",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "zpp",
            "package_url": "https://pypi.org/project/zpp/",
            "platform": "",
            "project_url": "https://pypi.org/project/zpp/",
            "project_urls": {
               "Source Code": "https://github.com/pdidev/zpp/"
            },
            "release_url": "https://pypi.org/project/zpp/1.0.4/",
            "requires_dist": [
               "setuptools"
            ],
            "requires_python": "",
            "summary": "a Bash Pre-Processor for Fortran. ZPP is useful in order to build clean Fortran90 interfaces. It allows to generate Fortran code for all types, kinds, and array ranks supported by the compiler.",
            "version": "1.0.4",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Dheepak Krishnamurthy",
            "author_email": "kdheepak89@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# zip [![](https://travis-ci.org/kdheepak/zip.svg?branch=master)](https://travis-ci.org/kdheepak/zip/branches)\n\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/kdheepak/zip",
            "keywords": "",
            "license": "Revised BSD License",
            "maintainer": "",
            "maintainer_email": "",
            "name": "zip",
            "package_url": "https://pypi.org/project/zip/",
            "platform": "",
            "project_url": "https://pypi.org/project/zip/",
            "project_urls": {
               "Homepage": "https://github.com/kdheepak/zip"
            },
            "release_url": "https://pypi.org/project/zip/0.0.2/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Intel Corporation",
            "author_email": "scripting@intel.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "Intended Audience :: Education",
               "Intended Audience :: Other Audience",
               "Intended Audience :: Science/Research",
               "Intended Audience :: System Administrators",
               "License :: Other/Proprietary License",
               "Operating System :: MacOS",
               "Operating System :: Microsoft :: Windows",
               "Operating System :: POSIX",
               "Operating System :: Unix",
               "Topic :: Software Development :: Libraries"
            ],
            "description": "Intel(R) Performance Primitives provides developers with high-quality, production-ready, low-level building blocks for image processing, signal processing, and data processing (data compression and decompression, and cryptography) applications.\n\nOne of many Intel(R) accelerated Python packages and performance library runtimes available on [PyPI](https://software.intel.com/en-us/articles/installing-the-intel-distribution-for-python-and-intel-performance-libraries-with-pip-and), and as part of [Intel(R) Distribution for Python](https://software.intel.com/en-us/distribution-for-python).\n\nFor latest release updates and security notifications, please [subscribe](https://software.intel.com/en-us/forums/intel-distribution-for-python) to the Intel(R) Distribution for Python Community forum.\n\nFree to use and redistribute pursuant to the [Intel Simplified Software License](https://software.intel.com/en-us/license/intel-simplified-software-license).\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://software.intel.com/en-us/articles/empowering-science-with-high-performance-python",
            "keywords": "",
            "license": "Proprietary - Intel",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ipp",
            "package_url": "https://pypi.org/project/ipp/",
            "platform": "",
            "project_url": "https://pypi.org/project/ipp/",
            "project_urls": {
               "Homepage": "https://software.intel.com/en-us/articles/empowering-science-with-high-performance-python"
            },
            "release_url": "https://pypi.org/project/ipp/2019.4.243/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Intel(R) Performance Primitives",
            "version": "2019.4.243",
            "yanked": false,
            "yanked_reason": null
         }
      ],
      "pyasn1": [
         {
            "author": "Gabriel Alves",
            "author_email": "gabriel.alves@pickcells.bio",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# sx\n#### Framework to manage gRPC-based microservices application",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "https://github.com/itsmealves/sx/releases/download/0.6.0/sx-0.6.0.tar.gz",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/itsmealves/sx",
            "keywords": "sx microservices rpc grpc Framework",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "sx",
            "package_url": "https://pypi.org/project/sx/",
            "platform": "",
            "project_url": "https://pypi.org/project/sx/",
            "project_urls": {
               "Download": "https://github.com/itsmealves/sx/releases/download/0.6.0/sx-0.6.0.tar.gz",
               "Homepage": "https://github.com/itsmealves/sx"
            },
            "release_url": "https://pypi.org/project/sx/0.6.0/",
            "requires_dist": null,
            "requires_python": ">=3.5",
            "summary": "Framework to manage gRPC-based microservices application",
            "version": "0.6.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "chrysn",
            "author_email": "chrysn@fsfe.org",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 3 - Alpha",
               "Intended Audience :: Education",
               "Intended Audience :: Science/Research",
               "License :: OSI Approved :: GNU General Public License (GPL)"
            ],
            "description": "UNKNOWN",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "UNKNOWN",
            "keywords": null,
            "license": "GPL",
            "maintainer": null,
            "maintainer_email": null,
            "name": "si",
            "package_url": "https://pypi.org/project/si/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/si/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "UNKNOWN"
            },
            "release_url": "https://pypi.org/project/si/0.1.1-1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Module to represent SI units",
            "version": "0.1.1-1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "leesoar",
            "author_email": "secure@tom.com",
            "bugtrack_url": null,
            "classifiers": [
               "License :: OSI Approved :: MIT License",
               "Programming Language :: Python :: 3.5",
               "Programming Language :: Python :: 3.6",
               "Programming Language :: Python :: 3.7",
               "Programming Language :: Python :: Implementation :: CPython",
               "Programming Language :: Python :: Implementation :: PyPy"
            ],
            "description": "\nDevelop soon\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://leesoar.com",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ida",
            "package_url": "https://pypi.org/project/ida/",
            "platform": "",
            "project_url": "https://pypi.org/project/ida/",
            "project_urls": {
               "Homepage": "https://leesoar.com"
            },
            "release_url": "https://pypi.org/project/ida/0.0.1/",
            "requires_dist": null,
            "requires_python": ">=3.3.0",
            "summary": "Develop soon",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Xavier Bruhiere",
            "author_email": "xavier.bruhiere@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 2 - Pre-Alpha",
               "Intended Audience :: Science/Research",
               "License :: OSI Approved :: Apache Software License",
               "Natural Language :: English",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2.7",
               "Topic :: Software Development",
               "Topic :: System :: Shells"
            ],
            "description": "python library DNA\n==================\n\n[![Coverage Status](https://coveralls.io/repos/hivetech/dna/badge.png)](https://coveralls.io/r/hivetech/dna)\n\n> Generic python utilities\n\nInstallation\n------------\n\n```console\npip install dna\n```\n\nExample\n-----\n\n```python\nimport dna.utils as utils\nimport dna.logger as logger\n\nlog_setup = logger.setup(level='info', filename='app.log')\nlog = logger.logger(__name__)\nwith log_setup.applicationbound():\n\n    log.info('hello', where='world')\n\n    useless_id = utils.generate_unique_id()\n    useless_name = utils.generate_random_name()\n\n    if utils.docker_check() and utils.is_running('ipyhon'):\n\n        print utils.Version('0.4.1')\n\n        module = utils.dynamic_import('dna.settings', 'LOG')\n        print utils.emphasis(module, align=False)\n\n        print utils.self_ip()\n```",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/hivetech/dna",
            "keywords": null,
            "license": "Apache 2.0",
            "maintainer": null,
            "maintainer_email": null,
            "name": "dna",
            "package_url": "https://pypi.org/project/dna/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/dna/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/hivetech/dna"
            },
            "release_url": "https://pypi.org/project/dna/0.0.7/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Generic python utilities",
            "version": "0.0.7",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Christopher Brown",
            "author_email": "io@henrian.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 2 - Pre-Alpha",
               "License :: OSI Approved :: MIT License",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.6",
               "Programming Language :: Python :: 2.7",
               "Topic :: Software Development :: Libraries :: Python Modules",
               "Topic :: System :: Archiving :: Packaging",
               "Topic :: System :: Filesystems"
            ],
            "description": "Python (package) installation\n-----------------------------\n\nGetting started from `PyPI <https://pypi.python.org/pypi/pi/>`__:\n\n::\n\n    easy_install pi\n\n`Whence easy\\_install? <#setuptools>`__\n\nCommands\n--------\n\n-  Uninstall package named \"pip\":\n\n   ::\n\n       pi uninstall pip\n\n-  Install package named \"filesequence\":\n\n   ::\n\n       pi install filesequence\n\n-  List paths that Python searches for imported modules:\n\n   ::\n\n       pi paths\n\n-  List installed packages:\n\n   ::\n\n       pi list\n\nTesting\n-------\n\nContinuous integration:\n\n|Travis CI Build Status|\n\nOr run tests locally:\n\n::\n\n    nosetests --with-doctest\n\nRelated\n~~~~~~~\n\n-  http://guide.python-distribute.org/creation.html\n-  `distribute/pkg\\_resources\n   docs <http://pythonhosted.org/distribute/pkg_resources.html>`__\n-  standard library\n   ```site`` <http://docs.python.org/2/library/site.html>`__\n-  standard library `environment\n   variables <http://docs.python.org/2/using/cmdline.html#environment-variables>`__\n\nSetuptools\n~~~~~~~~~~\n\n``pi`` does not yet completely replace\n`setuptools <https://pypi.python.org/pypi/setuptools>`__. You may need\nto install it first:\n\n+----------+-----------------------------------------+\n| Distro   | Package manager command                 |\n+==========+=========================================+\n| Ubuntu   | ``apt-get install python-setuptools``   |\n+----------+-----------------------------------------+\n| Mac      | built-in                                |\n+----------+-----------------------------------------+\n| Arch     | ``pacman -S python-setuptools``         |\n+----------+-----------------------------------------+\n| CentOS   | ``yum install python-setuptools``       |\n+----------+-----------------------------------------+\n\nLicense\n-------\n\nCopyright (c) 2013 Christopher Brown. `MIT\nLicensed <https://raw.github.com/chbrown/pi/master/LICENSE>`__.\n\n.. |Travis CI Build Status| image:: https://travis-ci.org/chbrown/pi.png?branch=master\n   :target: https://travis-ci.org/chbrown/pi",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/chbrown/pi",
            "keywords": null,
            "license": "Copyright (c) 2013 Christopher Brown\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.",
            "maintainer": null,
            "maintainer_email": null,
            "name": "pi",
            "package_url": "https://pypi.org/project/pi/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/pi/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/chbrown/pi"
            },
            "release_url": "https://pypi.org/project/pi/0.1.2/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Simpler python package installation",
            "version": "0.1.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ip",
            "package_url": "https://pypi.org/project/ip/",
            "platform": "",
            "project_url": "https://pypi.org/project/ip/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/ip/0.0.1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Vitalii Vanovschi",
            "author_email": "support@parallelpython.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Natural Language :: English",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Topic :: Software Development",
               "Topic :: System :: Distributed Computing"
            ],
            "description": "Parallel Python module (PP) provides an easy and efficient way to create parallel-enabled applications for SMP computers and clusters. PP module features cross-platform portability and dynamic load balancing. Thus application written with PP will parallelize efficiently even on heterogeneous and multi-platform clusters (including clusters running other application with variable CPU loads). Visit http://www.parallelpython.com for further information.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "http://www.parallelpython.com/downloads/pp/pp-1.6.5.zip",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "http://www.parallelpython.com",
            "keywords": null,
            "license": "BSD-like",
            "maintainer": null,
            "maintainer_email": null,
            "name": "pp",
            "package_url": "https://pypi.org/project/pp/",
            "platform": "Windows,Linux,Unix",
            "project_url": "https://pypi.org/project/pp/",
            "project_urls": {
               "Download": "http://www.parallelpython.com/downloads/pp/pp-1.6.5.zip",
               "Homepage": "http://www.parallelpython.com"
            },
            "release_url": "https://pypi.org/project/pp/1.6.5/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Parallel and distributed programming for Python",
            "version": "1.6.5",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Marcus Donnelly",
            "author_email": "marcus.k.donnelly@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "Intended Audience :: Science/Research",
               "License :: OSI Approved :: BSD License",
               "Programming Language :: Python :: 3",
               "Topic :: Scientific/Engineering"
            ],
            "description": "",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "Oceanography,Utilities",
            "license": "BSD",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ocutils",
            "package_url": "https://pypi.org/project/ocutils/",
            "platform": "",
            "project_url": "https://pypi.org/project/ocutils/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/ocutils/1.1.1/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Utility functions for oceanography related work",
            "version": "1.1.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Kiana Alessandra V. Villaera",
            "author_email": "kiana.villaera@senti.com.ph",
            "bugtrack_url": null,
            "classifiers": [
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 3"
            ],
            "description": "Contains everything you might need to perform essential data center functions\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/K-Winkles/dcutils",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dcutils",
            "package_url": "https://pypi.org/project/dcutils/",
            "platform": "",
            "project_url": "https://pypi.org/project/dcutils/",
            "project_urls": {
               "Homepage": "https://github.com/K-Winkles/dcutils"
            },
            "release_url": "https://pypi.org/project/dcutils/0.6/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "A simple package for data center utilities",
            "version": "0.6",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Mike Kazantsev",
            "author_email": "mk.fraggod@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Intended Audience :: Developers",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3.5",
               "Topic :: Software Development",
               "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description": "pretty-yaml (or pyaml)\n======================\n\nPyYAML-based python module to produce pretty and readable YAML-serialized data.\n\nThis module is for serialization only, see `ruamel.yaml`_ module for literate\nYAML parsing (keeping track of comments, spacing, line/column numbers of values, etc).\n\n[note: to dump stuff parsed by ruamel.yaml with this module, use only ``YAML(typ='safe')`` there]\n\n.. contents::\n  :backlinks: none\n\n\nWarning\n-------\n\nPrime goal of this module is to produce human-readable output that can be easily\nmanipulated and re-used, but maybe with some occasional caveats.\n\nOne good example of such \"caveat\" is that e.g. ``{'foo': '123'}`` will serialize\nto ``foo: 123``, which for PyYAML would be a bug, as 123 will then be read back\nas an integer from that, but here it's a feature.\n\nSo please do not rely on the thing to produce output that can always be\ndeserialized exactly to what was exported, at least - use PyYAML (e.g. with\noptions from the next section) for that.\n\n\nWhat this module does and why\n-----------------------------\n\nYAML is generally nice and easy format to read *if* it was written by humans.\n\nPyYAML can a do fairly decent job of making stuff readable, and the best\ncombination of parameters for such output that I've seen so far is probably this one::\n\n  >>> m = [123, 45.67, {1: None, 2: False}, u'some text']\n  >>> data = dict(a=u'asldnsa\\nasldpáknsa\\n', b=u'whatever text', ma=m, mb=m)\n  >>> yaml.safe_dump(data, sys.stdout, allow_unicode=True, default_flow_style=False)\n  a: 'asldnsa\n\n    asldpáknsa\n\n    '\n  b: whatever text\n  ma: &id001\n  - 123\n  - 45.67\n  - 1: null\n    2: false\n  - some text\n  mb: *id001\n\npyaml tries to improve on that a bit, with the following tweaks:\n\n* Most human-friendly representation options in PyYAML (that I know of) get\n  picked as defaults.\n\n* Does not dump \"null\" values, if possible, replacing these with just empty\n  strings, which have the same meaning but reduce visual clutter and are easier\n  to edit.\n\n* Dicts, sets, OrderedDicts, defaultdicts, namedtuples, etc are representable\n  and get sorted on output (OrderedDicts and namedtuples keep their ordering),\n  so that output would be as diff-friendly as possible, and not arbitrarily\n  depend on python internals.\n\n  It appears that at least recent PyYAML versions also do such sorting for\n  python dicts.\n\n* List items get indented, as they should be.\n\n* bytestrings that can't be auto-converted to unicode raise error, as yaml has\n  no \"binary bytes\" (i.e. unix strings) type.\n\n* Attempt is made to pick more readable string representation styles, depending\n  on the value, e.g.::\n\n    >>> yaml.safe_dump(cert, sys.stdout)\n    cert: '-----BEGIN CERTIFICATE-----\n\n      MIIH3jCCBcagAwIBAgIJAJi7AjQ4Z87OMA0GCSqGSIb3DQEBCwUAMIHBMRcwFQYD\n\n      VQQKFA52YWxlcm9uLm5vX2lzcDEeMBwGA1UECxMVQ2VydGlmaWNhdGUgQXV0aG9y\n    ...\n\n    >>> pyaml.p(cert):\n    cert: |\n      -----BEGIN CERTIFICATE-----\n      MIIH3jCCBcagAwIBAgIJAJi7AjQ4Z87OMA0GCSqGSIb3DQEBCwUAMIHBMRcwFQYD\n      VQQKFA52YWxlcm9uLm5vX2lzcDEeMBwGA1UECxMVQ2VydGlmaWNhdGUgQXV0aG9y\n    ...\n\n* \"force_embed\" option to avoid having &id stuff scattered all over the output\n  (which might be beneficial in some cases, hence the option).\n\n* \"&id\" anchors, if used, get labels from the keys they get attached to,\n  not just use meaningless enumerators.\n\n* \"string_val_style\" option to only apply to strings that are values, not keys,\n  i.e::\n\n    >>> pyaml.p(data, string_val_style='\"')\n    key: \"value\\nasldpáknsa\\n\"\n    >>> yaml.safe_dump(data, sys.stdout, allow_unicode=True, default_style='\"')\n    \"key\": \"value\\nasldpáknsa\\n\"\n\n* \"sort_dicts=False\" option to leave dict item ordering to python, and not\n  force-sort them in yaml output, which can be important for python 3.6+ where\n  they retain ordering info.\n\n* Has an option to add vertical spacing (empty lines) between keys on different\n  depths, to make output much more seekable.\n\nResult for the (rather meaningless) example above (without any additional\ntweaks)::\n\n  >>> pyaml.p(data)\n  a: |\n    asldnsa\n    asldpáknsa\n  b: 'whatever text'\n  ma: &ma\n    - 123\n    - 45.67\n    - 1:\n      2: false\n    - 'some text'\n  mb: *ma\n\n----------\n\nExtended example::\n\n  >>> pyaml.dump(conf, sys.stdout, vspacing=[2, 1]):\n  destination:\n\n    encoding:\n      xz:\n        enabled: true\n        min_size: 5120\n        options:\n        path_filter:\n          - \\.(gz|bz2|t[gb]z2?|xz|lzma|7z|zip|rar)$\n          - \\.(rpm|deb|iso)$\n          - \\.(jpe?g|gif|png|mov|avi|ogg|mkv|webm|mp[34g]|flv|flac|ape|pdf|djvu)$\n          - \\.(sqlite3?|fossil|fsl)$\n          - \\.git/objects/[0-9a-f]+/[0-9a-f]+$\n\n    result:\n      append_to_file:\n      append_to_lafs_dir:\n      print_to_stdout: true\n\n    url: http://localhost:3456/uri\n\n\n  filter:\n    - /(CVS|RCS|SCCS|_darcs|\\{arch\\})/$\n    - /\\.(git|hg|bzr|svn|cvs)(/|ignore|attributes|tags)?$\n    - /=(RELEASE-ID|meta-update|update)$\n\n\n  http:\n\n    ca_certs_files: /etc/ssl/certs/ca-certificates.crt\n\n    debug_requests: false\n\n    request_pool_options:\n      cachedConnectionTimeout: 600\n      maxPersistentPerHost: 10\n      retryAutomatically: true\n\n\n  logging:\n\n    formatters:\n      basic:\n        datefmt: '%Y-%m-%d %H:%M:%S'\n        format: '%(asctime)s :: %(name)s :: %(levelname)s: %(message)s'\n\n    handlers:\n      console:\n        class: logging.StreamHandler\n        formatter: basic\n        level: custom\n        stream: ext://sys.stderr\n\n    loggers:\n      twisted:\n        handlers:\n          - console\n        level: 0\n\n    root:\n      handlers:\n        - console\n      level: custom\n\nNote that unless there are many moderately wide and deep trees of data, which\nare expected to be read and edited by people, it might be preferrable to\ndirectly use PyYAML regardless, as it won't introduce another (rather pointless\nin that case) dependency and a point of failure.\n\n\nSome Tricks\n-----------\n\n* Pretty-print any yaml or json (yaml subset) file from the shell::\n\n    % python -m pyaml /path/to/some/file.yaml\n    % curl -s https://www.githubstatus.com/api/v2/summary.json | python -m pyaml\n\n* Process and replace json/yaml file in-place::\n\n    % python -m pyaml -r file-with-json.data\n\n* Easier \"debug printf\" for more complex data (all funcs below are aliases to\n  same thing)::\n\n    pyaml.p(stuff)\n    pyaml.pprint(my_data)\n    pyaml.pprint('----- HOW DOES THAT BREAKS!?!?', input_data, some_var, more_stuff)\n    pyaml.print(data, file=sys.stderr) # needs \"from __future__ import print_function\"\n\n* Force all string values to a certain style (see info on these in\n  `PyYAML docs`_)::\n\n    pyaml.dump(many_weird_strings, string_val_style='|')\n    pyaml.dump(multiline_words, string_val_style='>')\n    pyaml.dump(no_want_quotes, string_val_style='plain')\n\n  Using ``pyaml.add_representer()`` (note \\*p\\*yaml) as suggested in\n  `this SO thread`_ (or `github-issue-7`_) should also work.\n\n* Control indent and width of the results::\n\n    pyaml.dump(wide_and_deep, indent=4, width=120)\n\n  These are actually keywords for PyYAML Emitter (passed to it from Dumper),\n  see more info on these in `PyYAML docs`_.\n\n* Dump multiple yaml documents into a file: ``pyaml.dump_all([data1, data2, data3], dst_file)``\n\n  explicit_start=True is implied, unless explicit_start=False is passed.\n\n.. _PyYAML docs: http://pyyaml.org/wiki/PyYAMLDocumentation#Scalars\n.. _this SO thread: http://stackoverflow.com/a/7445560\n.. _github-issue-7: https://github.com/mk-fg/pretty-yaml/issues/7\n\n\nInstallation\n------------\n\nIt's a regular package for Python (3.x or 2.x).\n\nModule uses PyYAML_ for processing of the actual YAML files and should pull it\nin as a dependency.\n\nDependency on unidecode_ module is optional and should only be necessary if\nsame-id objects or recursion is used within serialized data.\n\nBe sure to use python3/python2, pip3/pip2, easy_install-... binaries below,\nbased on which python version you want to install the module for, if you have\nseveral on the system (as is norm these days for py2-py3 transition).\n\nUsing pip_ is the best way::\n\n  % pip install pyaml\n\n(add --user option to install into $HOME for current user only)\n\nOr, if you don't have \"pip\" command::\n\n  % python -m ensurepip\n  % python -m pip install --upgrade pip\n  % python -m pip install pyaml\n\n(same suggestion wrt \"install --user\" as above)\n\nOn a very old systems, one of these might work::\n\n  % curl https://bootstrap.pypa.io/get-pip.py | python\n  % pip install pyaml\n\n  % easy_install pyaml\n\n  % git clone --depth=1 https://github.com/mk-fg/pretty-yaml\n  % cd pretty-yaml\n  % python setup.py install\n\n(all of install-commands here also have --user option,\nsee also `pip docs \"installing\" section`_)\n\nCurrent-git version can be installed like this::\n\n  % pip install 'git+https://github.com/mk-fg/pretty-yaml#egg=pyaml'\n\nNote that to install stuff to system-wide PATH and site-packages (without\n--user), elevated privileges (i.e. root and su/sudo) are often required.\n\nUse \"...install --user\", `~/.pydistutils.cfg`_ or virtualenv_ to do unprivileged\ninstalls into custom paths.\n\nMore info on python packaging can be found at `packaging.python.org`_.\n\n.. _ruamel.yaml: https://bitbucket.org/ruamel/yaml/\n.. _PyYAML: http://pyyaml.org/\n.. _unidecode: http://pypi.python.org/pypi/Unidecode\n.. _pip: http://pip-installer.org/\n.. _pip docs \"installing\" section: http://www.pip-installer.org/en/latest/installing.html\n.. _~/.pydistutils.cfg: http://docs.python.org/install/index.html#distutils-configuration-files\n.. _virtualenv: http://pypi.python.org/pypi/virtualenv\n.. _packaging.python.org: https://packaging.python.org/installing/\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/mk-fg/pretty-yaml",
            "keywords": "yaml serialization pretty print format human readable readability",
            "license": "WTFPL",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyaml",
            "package_url": "https://pypi.org/project/pyaml/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyaml/",
            "project_urls": {
               "Homepage": "https://github.com/mk-fg/pretty-yaml"
            },
            "release_url": "https://pypi.org/project/pyaml/20.4.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "PyYAML-based module to produce pretty and readable YAML-serialized data",
            "version": "20.4.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "haogege",
            "author_email": "1394168335@qq.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# pyyml\nUse python in yaml\n## 基本使用\n在python中使用：\n```python\nfrom pyyml import load\n\nwith open('conf.yml') as f:\n    raw_conf = f.read()\nconfig = load(raw_conf)\nprint(config)\n```\n在yaml中 `${...}` 中的内容将会被python执行：\n\nyaml内容\n```yaml\nsum: ${1 + 1}\n```\n实际解析内容\n```python\n{'sum': 2}\n```\n通过在文件开头第一行注释来导入所需的包：\n\n```yaml\n# libs:['os', 'os.path:path', 'this']\n```\n通过 [包名]:[别名] 取别名导入包\n\n`'os.path:path' 等同于 python 中的 from os import path`\n\n例如yaml文件内容\n```yaml\n# libs:['os', 'os.path:path', 'this']\nos_name: ${os.name}\nbase_dir: ${path.abspath(path.dirname(__file__))}\n```\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/q1394168335/pyyml",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyyml",
            "package_url": "https://pypi.org/project/pyyml/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyyml/",
            "project_urls": {
               "Homepage": "https://github.com/q1394168335/pyyml"
            },
            "release_url": "https://pypi.org/project/pyyml/0.0.2/",
            "requires_dist": [
               "pyyaml (>=3.13)"
            ],
            "requires_python": "",
            "summary": "Use python in yaml",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Michael Foord",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "rs",
            "package_url": "https://pypi.org/project/rs/",
            "platform": "",
            "project_url": "https://pypi.org/project/rs/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/rs/0.0/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "",
            "version": "0.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Ramses",
            "author_email": "hello@ramses.tech",
            "bugtrack_url": null,
            "classifiers": [
               "Framework :: Pyramid",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.4",
               "Programming Language :: Python :: 3.5",
               "Topic :: Internet :: WWW/HTTP",
               "Topic :: Internet :: WWW/HTTP :: WSGI :: Application"
            ],
            "description": "# `Ra`\n[![Build Status](https://travis-ci.org/ramses-tech/ra.svg?branch=master)](https://travis-ci.org/ramses-tech/ra)\n[![Documentation](https://readthedocs.org/projects/ra/badge/?version=stable)](http://ra.readthedocs.org)\n\nRa is a test suite generator and helper library for testing APIs described\nin [RAML](http://raml.org/).\n\nOut of the box, Ra provides a basic, automated test suite to test the routes\ndeclared in the RAML document. It provides test helpers for augmenting these\nwith custom tests to test application-specific logic, side effects, etc.\n\nRa is primarily designed to provide testing support for\n[ramses](http://github.com/ramses-tech/ramses) and\n[nefertari](http://github.com/ramses-tech/nefertari) applications, but can\nbe used with any WSGI-conformant, RAML-described API.\n\nIt currently depends on pytest but may be adapted for other test frameworks\nin the future. It works best using WebTest but doesn't require it.\n\n## Name\n\nRa was the god of the sun, the most important god in ancient Egypt.\n\n\n## Try it (dev)\n\nRun the test suite:\n\n```bash\n    $ pip install -r requirements.txt\n    $ py.test\n```\n\nCheck out the example:\n\n```bash\n    $ cd examples/ramses-test\n    $ pip install -r requirements.txt\n    $ py.test\n```\n\nThe example RAML at `examples/ramses-test/api.raml` and the test file\n`examples/ramses-test/tests/test_api.py` should be helpful to reference.\n\nSee the docs in `docs/`, and the `api.raml` and `tests/test_api.py` in\n`tests/apps/ramses_test`",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/ramses-tech/ra",
            "keywords": "web raml",
            "license": "UNKNOWN",
            "maintainer": null,
            "maintainer_email": null,
            "name": "ra",
            "package_url": "https://pypi.org/project/ra/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/ra/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/ramses-tech/ra"
            },
            "release_url": "https://pypi.org/project/ra/0.2.0/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Test RAML API definition",
            "version": "0.2.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Shoumik Palkar",
            "author_email": "shoumik@cs.stanford.edu",
            "bugtrack_url": null,
            "classifiers": [
               "License :: OSI Approved :: BSD License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 3"
            ],
            "description": "## split annotations\n\nThis package contains the Python implementation of [split annotations](), a system for optimizing applications\nthat combine many data-intensive library functions. See some useful links below.\n\n* [Documentation for this package](https://www.weld.rs/split-annotations/docs/)\n* [GitHub repository](https://www.github.com/weld-project/split-annotations)\n* [SOSP 2019 Paper describing the system](https://shoumik.xyz/static/papers/mozart-sosp19final.pdf)\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://www.github.com/weld-project/split-annotations",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "sa",
            "package_url": "https://pypi.org/project/sa/",
            "platform": "",
            "project_url": "https://pypi.org/project/sa/",
            "project_urls": {
               "Homepage": "https://www.github.com/weld-project/split-annotations"
            },
            "release_url": "https://pypi.org/project/sa/0.0.4/",
            "requires_dist": [
               "numpy",
               "pandas",
               "scipy",
               "sharedmem"
            ],
            "requires_python": ">=3.6",
            "summary": "Python split annotations package",
            "version": "0.0.4",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Mitch Garnaat",
            "author_email": "mitch@garnaat.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.6",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.3",
               "Programming Language :: Python :: 3.4",
               "Topic :: Internet"
            ],
            "description": "####\nboto\n####\nboto 2.49.0\n\nReleased: 11-July-2018\n\n.. image:: https://travis-ci.org/boto/boto.svg?branch=develop\n        :target: https://travis-ci.org/boto/boto\n\n.. image:: https://pypip.in/d/boto/badge.svg\n        :target: https://pypi.python.org/pypi/boto/\n\n******\nBoto 3\n******\n\n`Boto3 <https://github.com/boto/boto3>`__, the next version of Boto, is now\nstable and recommended for general use.  It can be used side-by-side with Boto\nin the same project, so it is easy to start using Boto3 in your existing\nprojects as well as new projects. Going forward, API updates and all new\nfeature work will be focused on Boto3.\n\nTo assist users who still depend on Boto and cannot immediately switch over, we\nwill be triaging and addressing critical issues and PRs in Boto in the short\nterm. As more users make the switch to Boto3, we expect to reduce our\nmaintenance involvement over time. If we decide on a cutoff date or any\nsignificant changes to our maintenance plan, we will make pre-announcements\nwell ahead of schedule to allow ample time for our users to adapt/migrate.\n\n\n************\nIntroduction\n************\n\nBoto is a Python package that provides interfaces to Amazon Web Services.\nCurrently, all features work with Python 2.6 and 2.7. Work is under way to\nsupport Python 3.3+ in the same codebase. Modules are being ported one at\na time with the help of the open source community, so please check below\nfor compatibility with Python 3.3+.\n\nTo port a module to Python 3.3+, please view our `Contributing Guidelines`_\nand the `Porting Guide`_. If you would like, you can open an issue to let\nothers know about your work in progress. Tests **must** pass on Python\n2.6, 2.7, 3.3, and 3.4 for pull requests to be accepted.\n\n\n********\nServices\n********\n\nAt the moment, boto supports:\n\n* Compute\n\n  * Amazon Elastic Compute Cloud (EC2) (Python 3)\n  * Amazon Elastic Map Reduce (EMR) (Python 3)\n  * AutoScaling (Python 3)\n  * Amazon Kinesis (Python 3)\n  * AWS Lambda (Python 3)\n  * Amazon EC2 Container Service (Python 3)\n\n* Content Delivery\n\n  * Amazon CloudFront (Python 3)\n\n* Database\n\n  * Amazon Relational Data Service (RDS)\n  * Amazon DynamoDB (Python 3)\n  * Amazon SimpleDB (Python 3)\n  * Amazon ElastiCache (Python 3)\n  * Amazon Redshift (Python 3)\n\n* Deployment and Management\n\n  * AWS Elastic Beanstalk (Python 3)\n  * AWS CloudFormation (Python 3)\n  * AWS Data Pipeline (Python 3)\n  * AWS Opsworks (Python 3)\n  * AWS CloudTrail (Python 3)\n  * AWS CodeDeploy (Python 3)\n\n* Administration & Security\n\n  * AWS Identity and Access Management (IAM) (Python 3)\n  * AWS Key Management Service (KMS) (Python 3)\n  * AWS Config (Python 3)\n  * AWS CloudHSM (Python 3)\n\n* Application Services\n\n  * Amazon CloudSearch (Python 3)\n  * Amazon CloudSearch Domain (Python 3)\n  * Amazon Elastic Transcoder (Python 3)\n  * Amazon Simple Workflow Service (SWF) (Python 3)\n  * Amazon Simple Queue Service (SQS) (Python 3)\n  * Amazon Simple Notification Server (SNS) (Python 3)\n  * Amazon Simple Email Service (SES) (Python 3)\n  * Amazon Cognito Identity (Python 3)\n  * Amazon Cognito Sync (Python 3)\n  * Amazon Machine Learning (Python 3)\n\n* Monitoring\n\n  * Amazon CloudWatch (EC2 Only) (Python 3)\n  * Amazon CloudWatch Logs (Python 3)\n\n* Networking\n\n  * Amazon Route53 (Python 3)\n  * Amazon Route 53 Domains (Python 3)\n  * Amazon Virtual Private Cloud (VPC) (Python 3)\n  * Elastic Load Balancing (ELB) (Python 3)\n  * AWS Direct Connect (Python 3)\n\n* Payments and Billing\n\n  * Amazon Flexible Payment Service (FPS)\n\n* Storage\n\n  * Amazon Simple Storage Service (S3) (Python 3)\n  * Amazon Glacier (Python 3)\n  * Amazon Elastic Block Store (EBS)\n  * Google Cloud Storage\n\n* Workforce\n\n  * Amazon Mechanical Turk\n\n* Other\n\n  * Marketplace Web Services (Python 3)\n  * AWS Support (Python 3)\n\nThe goal of boto is to support the full breadth and depth of Amazon\nWeb Services.  In addition, boto provides support for other public\nservices such as Google Storage in addition to private cloud systems\nlike Eucalyptus, OpenStack and Open Nebula.\n\nBoto is developed mainly using Python 2.6.6 and Python 2.7.3 on Mac OSX\nand Ubuntu Maverick.  It is known to work on other Linux distributions\nand on Windows.  Most of Boto requires no additional libraries or packages\nother than those that are distributed with Python.  Efforts are made\nto keep boto compatible with Python 2.5.x but no guarantees are made.\n\n************\nInstallation\n************\n\nInstall via `pip`_:\n\n::\n\n    $ pip install boto\n\nInstall from source:\n\n::\n\n    $ git clone git://github.com/boto/boto.git\n    $ cd boto\n    $ python setup.py install\n\n**********\nChangeLogs\n**********\n\nTo see what has changed over time in boto, you can check out the\nrelease notes at `http://docs.pythonboto.org/en/latest/#release-notes`\n\n***************************\nFinding Out More About Boto\n***************************\n\nThe main source code repository for boto can be found on `github.com`_.\nThe boto project uses the `gitflow`_ model for branching.\n\n`Online documentation`_ is also available. The online documentation includes\nfull API documentation as well as Getting Started Guides for many of the boto\nmodules.\n\nBoto releases can be found on the `Python Cheese Shop`_.\n\nJoin our IRC channel `#boto` on FreeNode.\nWebchat IRC channel: http://webchat.freenode.net/?channels=boto\n\nJoin the `boto-users Google Group`_.\n\n*************************\nGetting Started with Boto\n*************************\n\nYour credentials can be passed into the methods that create\nconnections.  Alternatively, boto will check for the existence of the\nfollowing environment variables to ascertain your credentials:\n\n**AWS_ACCESS_KEY_ID** - Your AWS Access Key ID\n\n**AWS_SECRET_ACCESS_KEY** - Your AWS Secret Access Key\n\nCredentials and other boto-related settings can also be stored in a\nboto config file.  See `this`_ for details.\n\n.. _Contributing Guidelines: https://github.com/boto/boto/blob/develop/CONTRIBUTING\n.. _Porting Guide: http://boto.readthedocs.org/en/latest/porting_guide.html\n.. _pip: http://www.pip-installer.org/\n.. _release notes: https://github.com/boto/boto/wiki\n.. _github.com: http://github.com/boto/boto\n.. _Online documentation: http://docs.pythonboto.org\n.. _Python Cheese Shop: http://pypi.python.org/pypi/boto\n.. _this: http://docs.pythonboto.org/en/latest/boto_config_tut.html\n.. _gitflow: http://nvie.com/posts/a-successful-git-branching-model/\n.. _neo: https://github.com/boto/boto/tree/neo\n.. _boto-users Google Group: https://groups.google.com/forum/?fromgroups#!forum/boto-users\n\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/boto/boto/",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "boto",
            "package_url": "https://pypi.org/project/boto/",
            "platform": "Posix; MacOS X; Windows",
            "project_url": "https://pypi.org/project/boto/",
            "project_urls": {
               "Homepage": "https://github.com/boto/boto/"
            },
            "release_url": "https://pypi.org/project/boto/2.49.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Amazon Web Services Library",
            "version": "2.49.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Hadi Asghari",
            "author_email": "hd.asghari@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 3",
               "Topic :: Software Development :: Libraries :: Python Modules",
               "Topic :: System :: Networking"
            ],
            "description": "pyasn\n=====\n\n.. image:: https://pypip.in/v/pyasn/badge.png\n   :target: https://pypi.python.org/pypi/pyasn\n\n.. image:: https://pypip.in/d/pyasn/badge.png\n   :target: https://pypi.python.org/pypi/pyasn\n\n\n**pyasn** is a Python extension module that enables very fast IP address to Autonomous System Number lookups.\nCurrent state and Historical lookups can be done, based on the MRT/RIB BGP archive used as input.\n\n*pyasn* is different from other ASN lookup tools in that it provides **offline** and **historical** lookups.\nIt provides utility scripts for users to build their own lookup databases based on any MRT/RIB archive.\nThis makes *pyasn* much faster than online dig/whois/json lookups.\n\nThe module is written in C and Python, and cross-compiles on Linux and Windows. Underneath, it uses a radix tree\ndata structure for storage of IP addresses. In the current version, it borrows code from *py-radix* to support\nboth IPV4 and IPV6 network prefixes. The current release is a beta. Compared to the previous version, it provides\nsupport for Python 2 and 3; adds new functionality, performance improvements, and unit-tests.\n\n*pyasn* is developed and maintained by researchers at the Economics of Cybersecurity research group at Delft\nUniversity of Technology (http://econsec.tbm.tudlft.nl). The package is used on an almost daily basis and bugs\nare fixed pretty quickly.  The package is largely developed and maintained by Hadi Asghari and Arman Noroozian.\nPlease report any bugs via GitHub (https://github.com/hadiasghari/pyasn) or email the developers.\n\n\nInstallation\n============\nInstallation is a breeze via pip: ::\n\n    pip install pyasn --pre\n\nOr with the standard Python: ::\n\n    python setup.py build\n    python setup.py install --record log\n\nYou will need to have pip, setuptools and build essentials installed if you build the package manually. On\nUbuntu/Debian you can get them using the following command: ::\n\n    sudo apt-get install python-pip python-dev build-essential\n\nBuilding the C module on Windows, using either pip or from source, requires Microsoft Visual C++ to be installed.\npyasn has been tested using Visual C++ Express 2010, available freely from Microsoft's website, on both the\nofficial Python 3.4 release and Miniconda3. Other versions of Python, Visual Studio, and Cygwin could also work\nwith minor modifications.\n\nWe plan to release *pyasn* packages to major Linux repositories once it is out of beta.\n\n\nUsage\n=====\nA simple example that demonstrates most of the features: ::\n\n    import pyasn\n\n    # Initialize module and load IP to ASN database\n    # the sample database can be downloaded or built - see below\n    asndb = pyasn.pyasn('ipasn_20140513.dat')\n\n    asndb.lookup('8.8.8.8')\n    # should return: (15169, '8.8.8.0/24'), the origin AS, and the BGP prefix it matches\n\n    asndb.get_as_prefixes(1128)\n    # returns ['130.161.0.0/16', '131.180.0.0/16', '145.94.0.0/16'], TU-Delft prefixes\n\n\nIPASN Data Files\n================\nIPASN data files are a long list of prefixes used to lookup AS number for IPs. An excerpt from such a file looks\nlike this: ::\n\n    ; IP-ASN32-DAT file\n    ; Original file : <Path to a rib file>\n    ; Converted on  : Tue May 13 22:03:05 2014\n    ; CIDRs         : 512490\n    ;\n    1.0.0.0/24  15169\n    1.0.128.0/17        9737\n    1.0.128.0/18        9737\n    1.0.128.0/19        9737\n    1.0.129.0/24        23969\n    ...\n\nIPASN data files can be created by downloading MRT/RIB BGP archives from Routeviews (or similar sources),\nand parsing them using provided scripts that tail the BGP AS-Path. This can be done simply as follows: ::\n\n    pyasn_util_download.py --latest\n    pyasn_util_convert.py --single <Downloaded RIB File> <ipasn_db_file_name>\n\n\n**NOTE:** These scripts are by default installed to ``/usr/local/bin`` and can be executed directly. If you installed\nthe package to a user directory, these scripts will not be on the path and you will have to invoke them by navigating\nto the folder in which they have been copied (e.g. ``~/.local/bin``).\n\nWe also provide download links to a large number of previously generated IPASN data files. These are based on\nweekly  snapshots of the Routeviews data from 2005-2015, accessible here:\nhttp://data.3tu.nl/repository/uuid:d4d23b8e-2077-4592-8b47-cb476ad16e12\n\n**New in v1.6:** To save disk space, you can gzip IPASN data files. The load time will be slighlty longer.\n\n\nPerformance Tip\n===============\nInitial loading of a IPASN data file is the most heavy operation of the package. For fast lookups using multiple\nIPASN data files, for instance for historical lookups on multiple dates, we recommend caching of loaded data files\nfor better performance.\n\n\nUninstalling pyasn\n==================\nYou can remove *pyasn* as follows: ::\n\n    pip uninstall pyasn\n\nIf you built and installed the package your self use the recorded log to remove the installed files.\n\n**Removing PyASN version 1.2**: *pyasn* v1.5/1.6 and v1.2 can be installed side by side (due to lower-cased package\nname). To avoid mistakes, you can uninstall the old **PyASN** by deleting the following files from your Python\ninstallation: ::\n\n    PYTHONDIR/dist-packages/PyASN.so\n    PYTHONDIR/dist-packages/PyASN-1.2.egg-info\n\n\nPackage Structure\n=================\nThe main portions of the directory tree are as follows: ::\n\n    .\n    ├── pyasn/__init__.py       # Python code of the main pyasn module\n    ├── pyasn/pyasn_radix.c     # C extension code (Python RADIX module with bulk load)\n    ├── pyasn/_radix/*          # C extension code (Based on original RADIX code from MRTd)\n    ├── pyasn/mrtx.py           # python module used to convert MRT files to pyasn DB files\n    ├── pyasn-utils/*.py        # Scripts to download & convert BGP MRT dumps to IPASN databases\n    ├── data/                   # Test Resources and some sample DBs to use\n    ├── tests/                  # Tests\n    └── setup.py                # Standard setup.py for installation/testing/etc.\n\n\n\nTesting pyasn Sources\n=====================\nA limited number of unit tests are provided in the ``tests/`` directory when downlading the sources. They can be\nrun with the following command: ::\n\n    python setup.py test\n\nThis beta release has been tested under python version 2.6, 2.7, 3.3, 3.4 and 3.5. We appreciate contributions towards\ntesting *pyasn*!\n\n**New in v1.6:** pyasn_util_convert.py offers a '--dump-screen' option which shows the MRT/RIB archive contents and\nthe chosen origin-AS.\n\n\nLicense & Acknowledgments\n=========================\n*pyasn* is licensed under the MIT license.\n\nIt extends code from py-radix (Michael J. Schultz and Damien Miller),  and improves upon it in several ways, for\ninstance in lowering memory usage and adding bulk prefix/origin load. The underlying radix tree implementation is\ntaken (and modified) from MRTd. These are all subject to their respective licenses.  Please see the LICENSE file\nfor details.\n\nThanks to Dr. Chris Lee (of Shadowserver) for proposing the use of radix trees.\n\nA handful of GitHub developers have contributed features and bug fixes to the latest releases.\nMany thanks to all of them.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": null,
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/hadiasghari/pyasn",
            "keywords": "ip asn autonomous system bgp whois prefix radix python routing networking",
            "license": "MIT",
            "maintainer": null,
            "maintainer_email": null,
            "name": "pyasn",
            "package_url": "https://pypi.org/project/pyasn/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/pyasn/",
            "project_urls": {
               "Homepage": "https://github.com/hadiasghari/pyasn"
            },
            "release_url": "https://pypi.org/project/pyasn/1.6.0b1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Offline IP address to Autonomous System Number lookup module.",
            "version": "1.6.0b1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Perdix Software",
            "author_email": "ssmith@perdixsw.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 2 - Pre-Alpha",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.4",
               "Programming Language :: Python :: 3.5",
               "Programming Language :: Python :: 3.6",
               "Topic :: Office/Business :: Financial",
               "Topic :: Scientific/Engineering :: Mathematics"
            ],
            "description": "UNKNOWN",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "https://www.github.com/perdixsw/umpy/tarball/0.1.0",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://www.github.com/perdixsw/umpy",
            "keywords": "units,measure,measurement,conversion,converter",
            "license": "MIT",
            "maintainer": null,
            "maintainer_email": null,
            "name": "umpy",
            "package_url": "https://pypi.org/project/umpy/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/umpy/",
            "project_urls": {
               "Download": "https://www.github.com/perdixsw/umpy/tarball/0.1.0",
               "Homepage": "https://www.github.com/perdixsw/umpy"
            },
            "release_url": "https://pypi.org/project/umpy/0.1.0/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Simple unit of measure conversion for python, optimized for manufacturing contexts.",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Jay Marcyes",
            "author_email": "jay@marcyes.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Environment :: Console",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Topic :: Software Development :: Testing"
            ],
            "description": "Pyt\n===\n\nPyt is a lightweight wrapper around `Python’s unittest\nmodule <https://docs.python.org/3/library/unittest.html>`__ that adds\nsome nice features and enhancements over the stock ``unittest`` module.\n\nQuickstart\n~~~~~~~~~~\n\nPyt overrides unittest’s built-in pathfinding to be smarter and less\nverbose, so you can match tests using prefix matching which makes\nrunning a test like:\n\n::\n\n   $ python -m unittest tests.foo_test.BarTestCase.test_che\n\nas simple as:\n\n::\n\n   $ pyt foo.Bar.che\n\nBut it’s even less verbose if you want it to be, pyt can reach into the\nmodules and classes to do its matching, so you don’t even need to\nspecify the module and class if you don’t want to:\n\n::\n\n   $ pyt che\n\nMore examples\n^^^^^^^^^^^^^\n\nTo run all the ``Happy`` tests:\n\n::\n\n   $ pyt Happy\n\nTo run all the ``newmodule`` tests:\n\n::\n\n   $ pyt newmodule\n\nTo run more than one test:\n\n::\n\n   $ pyt test1 test2 ...\n\nTo run every test ``pyt`` can find:\n\n::\n\n   $ pyt\n\nAnd the way I like to run all tests in the current directory:\n\n::\n\n   $ pyt -vb\n\nWhich can also be written:\n\n::\n\n   $ pyt --verbose --buffer\n\nFlags\n~~~~~\n\nTo see everything pyt can do\n\n::\n\n   $ pyt --help\n\n–warnings\n^^^^^^^^^\n\nThis will convert warnings into errors.\n\n::\n\n   $ pyt --warnings\n\n–rerun\n^^^^^^\n\nIf your last testrun had failing tests this will rerun only the tests\nthat failed.\n\n::\n\n   $pyt --rerun\n\nThings to be aware of\n~~~~~~~~~~~~~~~~~~~~~\n\npyt uses Python’s PEP 8 style conventions\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n``pyt`` uses `Python’s code styling\nconventions <http://www.python.org/dev/peps/pep-0008/>`__ to decide what\nis the module and class, so, given input like this:\n\n::\n\n   $ pyt foo.bar.Baz.che\n\n``pyt`` will consider ``foo.bar`` to be the module, ``Baz`` to be a\nclass (because it starts with a capital letter), and ``che`` to be a\nmethod (since it comes after the class).\n\nLikewise, ``pyt`` uses unittest conventions, so a test module should end\nwith ``_test`` (eg, ``foo.bar_test``) or start with test (eg,\n``test_foo.py``) and a TestCase class should extend\n``unittest.TestCase``, and test methods should start with ``test_`` (eg,\n``test_che``).\n\nVague input can cause pyt to run more tests than you expect\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSo if you have something like this:\n\n::\n\n   project/\n     __init__.py\n     user.py\n     foo/\n       __init__.py\n       user.py\n     tests/\n       __init__.py\n       user_test.py\n       foo/\n         __init__.py\n         user_test.py\n\nAnd you want to run tests for ``foo.user`` and you run:\n\n::\n\n   $ pyt user\n\nit will run both ``tests/user_test`` and ``tests.foo.user_test``, the\nsolution is to just be more verbose when you have to be:\n\n::\n\n   $ pyt foo.user\n\nEnvironment Variables\n^^^^^^^^^^^^^^^^^^^^^\n\nIf you are running the tests within pyt, you might notice there is an\nenvironment variable ``PYT_TEST_COUNT`` that contains the count of how\nmany tests pyt found to run.\n\nInstallation\n------------\n\nUse ``pip``:\n\n::\n\n   $ pip install pyt\n\nYou can also get it directly from the repo:\n\n::\n\n   $ pip install --upgrade git+https://github.com/Jaymon/pyt#egg=pyt\n\nIf you install pyt using Python 3 it can also be invoked using the\n``pyt3`` command:\n\n::\n\n   $ pyt3 --help\n\nLikewise, Python 2 installs a ``pyt2`` command:\n\n::\n\n   $ pyt2 --help\n\nTesting\n-------\n\nTesting in 2.7 on most systems:\n\n::\n\n   $ python -m unittest pyt_test\n\nTesting in 3.5 on MacOS:\n\n::\n\n   $ python3.5 -m unittest pyt_test\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "http://github.com/Jaymon/pyt",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyt",
            "package_url": "https://pypi.org/project/pyt/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyt/",
            "project_urls": {
               "Homepage": "http://github.com/Jaymon/pyt"
            },
            "release_url": "https://pypi.org/project/pyt/1.0.5/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "easily run python unit tests",
            "version": "1.0.5",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Bradley Odell",
            "author_email": "btodell@hotmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Environment :: Console",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
               "Natural Language :: English",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 2.6",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Topic :: Software Development :: Build Tools"
            ],
            "description": "pyz\n===\n\n*Packages all source code and dependencies into a single Python zip application.*\n\nSummary\n-------\n\nDeploying a Python application any larger than a single file is\ncumbersome - this library aims to solve that problem.\n\nPython has been able to run code from within a zip file since version\n2.6. Python 3.5 introduced the `zipapp <https://docs.python.org/3/library/zipapp.html>`__ module\nwhich aims to simplify the process of creating a zip application.\nHowever, **zipapp** isn't a complete solution to the problem - it\ndoesn't handle dependencies and it doesn't include certain extra\nfeatures that this library provides.\n\nThis library allows you to bundle all of your Python code **AND** your\ndependencies into a single Python zip application file.\n\nNote: The dependency bundling feature is not implemented yet, but it is\nin the works!\n\nFeatures\n--------\n\n1. Bundle all Python source code with fine-grained control over included files.\n2. Ability to \"unixify\" the output application by prepending a customizable\n   `shebang <https://en.wikipedia.org/wiki/Shebang_(Unix)>`__.\n3. Python interpreter version check - display a friendly notice instead\n   of a Python exception if the user runs your application using an\n   unsupported Python version.\n\nPlanned\n-------\n\n1. Automatically identify dependencies and package them accordingly.\n",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "https://github.com/BTOdell/pyz/archive/0.4.3.tar.gz",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/BTOdell/pyz",
            "keywords": "pyz zip app zipapp bundle dependencies library",
            "license": "GPLv3",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyz",
            "package_url": "https://pypi.org/project/pyz/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyz/",
            "project_urls": {
               "Download": "https://github.com/BTOdell/pyz/archive/0.4.3.tar.gz",
               "Homepage": "https://github.com/BTOdell/pyz"
            },
            "release_url": "https://pypi.org/project/pyz/0.4.3/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Packages all source code and dependencies into a single Python zip application.",
            "version": "0.4.3",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Val Neekman",
            "author_email": "info@neekware.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 3 - Alpha",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Operating System :: POSIX",
               "Programming Language :: Python",
               "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description": "AWSLI\n====================\n\n**Amazon Web Services Line Interpreter**\n\n**Author:** Val Neekman [ info@neekware.com, @vneekman ]\n\nOverview\n========\n\nA Line Interpreter for Amazon Web Services.\n\nHow to install\n==================\n\n    1. easy_install awsli\n    2. pip install awsli\n    3. git clone http://github.com/un33k/awsli\n        a. cd awsli\n        b. run python setup.py\n    4. wget https://github.com/un33k/awsli/zipball/master\n        a. unzip the downloaded file\n        b. cd into awsli-* directory\n        c. run python setup.py\n\nHow to use\n=================\n\n``Usage``\n\n``Note:``\n\nRunning the tests\n=================\n\nTo run the tests against the current environment:\n\n    python test.py\n\nChangelog\n=========\n\n0.1\n-----\n\n* Initial release\n\n\nLicense\n=======\n\nCopyright (c) 2012, Val Neekman\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without \nmodification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this \nlist of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this \nlist of conditions and the following disclaimer in the documentation and/or \nother materials provided with the distribution.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND \nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED \nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE \nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE \nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL \nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR \nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, \nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE \nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/un33k/awsli",
            "keywords": null,
            "license": "BSD",
            "maintainer": null,
            "maintainer_email": null,
            "name": "awsli",
            "package_url": "https://pypi.org/project/awsli/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/awsli/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/un33k/awsli"
            },
            "release_url": "https://pypi.org/project/awsli/0.0.1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "A Line Interpreter for Amazon Web Services",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Armin Ronacher",
            "author_email": "armin.ronacher@active-4.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Environment :: Web Environment",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
               "Topic :: Software Development :: Libraries :: Python Modules",
               "Topic :: Text Processing :: Markup :: HTML"
            ],
            "description": "jinja\n~~~~~\n\nJinja is a `sandboxed`_ template engine written in pure Python. It\nprovides a `Django`_ like non-XML syntax and compiles templates into\nexecutable python code. It's basically a combination of Django templates\nand python code.\n\nNutshell\n--------\n\nHere a small example of a Jinja template::\n\n    {% extends 'base.html' %}\n    {% block title %}Memberlist{% endblock %}\n    {% block content %}\n      <ul>\n      {% for user in users %}\n        <li><a href=\"{{ user.url|e }}\">{{ user.username|e }}</a></li>\n      {% endfor %}\n      </ul>\n    {% endblock %}\n\nPhilosophy\n----------\n\nApplication logic is for the controller but don't try to make the life\nfor the template designer too hard by giving him too few functionality.\n\nFor more informations visit the new `jinja webpage`_ and `documentation`_.\n\nNote\n----\n\nThis is the Jinja 1.0 release which is completely incompatible with the\nold \"pre 1.0\" branch. The old branch will still receive security updates\nand bugfixes but the 1.0 branch will be the only version that receives\nsupport.\n\nIf you have an application that uses Jinja 0.9 and won't be updated in\nthe near future the best idea is to ship a Jinja 0.9 checkout together\nwith the application.\n\nThe `Jinja tip`_ is installable via `easy_install` with ``easy_install\nJinja==dev``.\n\n.. _sandboxed: http://en.wikipedia.org/wiki/Sandbox_(computer_security)\n.. _Django: http://www.djangoproject.com/\n.. _jinja webpage: http://jinja.pocoo.org/\n.. _documentation: http://jinja.pocoo.org/documentation/index.html\n.. _Jinja tip: http://dev.pocoo.org/hg/jinja-main/archive/tip.tar.gz#egg=Jinja-dev\n\n\n:copyright: 2007 by Armin Ronacher.\n:license: BSD, see LICENSE for more details.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "http://jinja.pocoo.org/",
            "keywords": "python.templating.engines",
            "license": "BSD",
            "maintainer": null,
            "maintainer_email": null,
            "name": "Jinja",
            "package_url": "https://pypi.org/project/Jinja/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/Jinja/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "http://jinja.pocoo.org/"
            },
            "release_url": "https://pypi.org/project/Jinja/1.2/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "A small but fast and easy to use stand-alone template engine written in pure python.",
            "version": "1.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Hsiaoming Yang",
            "author_email": "me@lepture.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Environment :: Console",
               "Environment :: Web Environment",
               "Framework :: Django",
               "Framework :: Flask",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.5",
               "Programming Language :: Python :: 3.6",
               "Programming Language :: Python :: 3.7",
               "Programming Language :: Python :: 3.8",
               "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
               "Topic :: Internet :: WWW/HTTP :: WSGI :: Application",
               "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description": "Authlib\n=======\n\nThe ultimate Python library in building OAuth and OpenID Connect servers.\nJWS, JWK, JWA, JWT are included.\n\nUseful Links\n------------\n\n1. Homepage: https://authlib.org/\n2. Documentation: https://docs.authlib.org/\n3. Purchase Commercial License: https://authlib.org/plans\n4. Blog: https://blog.authlib.org/\n5. More Repositories: https://github.com/authlib\n6. Twitter: https://twitter.com/authlib\n7. Donate: https://www.patreon.com/lepture\n\nSpecifications\n--------------\n\n- RFC5849: The OAuth 1.0 Protocol\n- RFC6749: The OAuth 2.0 Authorization Framework\n- RFC6750: The OAuth 2.0 Authorization Framework: Bearer Token Usage\n- RFC7009: OAuth 2.0 Token Revocation\n- RFC7515: JSON Web Signature\n- RFC7516: JSON Web Encryption\n- RFC7517: JSON Web Key\n- RFC7518: JSON Web Algorithms\n- RFC7519: JSON Web Token\n- RFC7521: Assertion Framework for OAuth 2.0 Client Authentication and Authorization Grants\n- RFC7523: JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants\n- RFC7591: OAuth 2.0 Dynamic Client Registration Protocol\n- RFC7662: OAuth 2.0 Token Introspection\n- RFC8414: OAuth 2.0 Authorization Server Metadata\n- RFC8628: OAuth 2.0 Device Authorization Grant\n- OpenID Connect 1.0\n- OpenID Connect Discovery 1.0\n\nImplementations\n---------------\n\n- Requests OAuth 1 Session\n- Requests OAuth 2 Session\n- Requests Assertion Session\n- Flask OAuth 1/2 Client\n- Django OAuth 1/2 Client\n- Flask OAuth 1.0 Server\n- Flask OAuth 2.0 Server\n- Flask OpenID Connect 1.0\n- Django OAuth 1.0 Server\n- Django OAuth 2.0 Server\n- Django OpenID Connect 1.0\n\nLicense\n-------\n\nAuthlib is licensed under BSD. Please see LICENSE for licensing details.\n\nIf this license does not fit your company, consider to purchase a commercial\nlicense. Find more information on `Authlib Plans`_.\n\n.. _`Authlib Plans`: https://authlib.org/plans\n\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://authlib.org/",
            "keywords": "",
            "license": "BSD-3-Clause",
            "maintainer": "",
            "maintainer_email": "",
            "name": "Authlib",
            "package_url": "https://pypi.org/project/Authlib/",
            "platform": "any",
            "project_url": "https://pypi.org/project/Authlib/",
            "project_urls": {
               "Blog": "https://blog.authlib.org/",
               "Bug Tracker": "https://github.com/lepture/authlib/issues",
               "Commercial License": "https://authlib.org/plans",
               "Documentation": "https://docs.authlib.org/",
               "Donate": "https://lepture.com/donate",
               "Homepage": "https://authlib.org/",
               "Source Code": "https://github.com/lepture/authlib"
            },
            "release_url": "https://pypi.org/project/Authlib/0.14.3/",
            "requires_dist": [
               "cryptography",
               "requests ; extra == 'client'"
            ],
            "requires_python": "",
            "summary": "The ultimate Python library in building OAuth and OpenID Connect servers.",
            "version": "0.14.3",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Julien Bigot",
            "author_email": "julien.bigot@cea.fr",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Environment :: Console",
               "License :: OSI Approved :: MIT License"
            ],
            "description": "# zpp\n\nThis is zpp, the Z Pre-Processor.\n\nZpp transforms bash in a pre-processor for F90 source files.\nIt offers a set of functions specifically tailored to build clean Fortran90\ninterfaces by generating code for all types, kinds, and array ranks supported by\na given compiler.\n\n## Syntax\n\nZpp files are typically named `*.F90.zpp`.\n\nIn these files, the lines that start with `!$SH` are interpreted as bash lines. \nOther lines are copied as-is, except that variable substitution is operated as\nin a double-quoted string, including bash commands `${VAR}` or `$(command)`.\nIf inside a bash control block (`if`, `for`, etc.), the output generation obeys\nthe control statement.\n\nFor example, this code:\n```\n!$SH for GREETED in world universe multiverse ; do\nprint *, \"Hello ${GREETED}\"\n!$SH done\n```\n\nWould produce the following result:\n```\nprint *, \"Hello world\"\nprint *, \"Hello universe\"\nprint *, \"Hello multiverse\"\n```\n\n### Support functions\n\nPredefined bash functions, variable and code can be provided in `.zpp.sh` files\nthat can be included with `#!SH source <filename>.zpp.sh`.\n\n**Beware**: a file NEEDs to have the `.zpp.sh` extension to be included from\nzpp.\n\nZpp provides a standard library of functions tailored to build clean Fortran90\ninterfaces by generating code for all types, kinds, and array ranks supported by\na given compiler.\n\n#### zpp_str_repeat\n\nFound in `base.zpp.sh`\n\nOutputs a string multiple times.\n\nParameters:\n1. the string to Repeat\n2. the lower bound of the iterations (inclusive)\n3. the upper bound of the iterations (inclusive)\n4. the string separator\n5. the string starter\n6. the string ender\n\nRepeats string `$1` (`$3`-`$2`+1) times, separated by string `$4` inside `$5`\n`$6`.\n* If the number of repetitions is negative, the result is empty.\n* If `$1` contains the '@N' substring, it will be replaced by the iteration\n  number (from `$2` to `$3`).\n\nexample:\n```\n#!SH source base.zpp.sh\nzpp_str_repeat v@N 5 7 '...' '<<' '>>'\nzpp_str_repeat w@N 1 1 '...' '<<' '>>'\nzpp_str_repeat x@N 1 0 '...' '<<' '>>'\n```\noutput:\n```\n<<v5...v6...v7>>\n<<w1>>\n```\n\n#### zpp_str_repeat_reverse\n\nFound in `base.zpp.sh`\n\nOutputs a string multiple times in reverse order.\n\nParameters:\n1. the string to Repeat\n2. the upper bound of the iterations (inclusive)\n3. the lower bound of the iterations (inclusive)\n4. the string separator\n5. the string starter\n6. the string ender\n\nRepeats string `$1` (`$2`-`$3`+1) times, separated by string `$4` inside `$5`\n`$6`.\n* If the number of repetitions is negative, the result is empty.\n* If `$1` contains the '@N' substring, it will be replaced by the iteration\n  number (from `$2` to `$3`, i.e. upper to lower).\n\nexample:\n```\n#!SH source base.zpp.sh\nzpp_str_repeat_reverse v@N 5 7 '...' '<<' '>>'\nzpp_str_repeat_reverse w@N 1 1 '...' '<<' '>>'\nzpp_str_repeat_reverse x@N 1 0 '...' '<<' '>>'\n```\noutput:\n```\n<<v7...v6...v5>>\n<<w1>>\n```\n\n#### ZPP_FORT_TYPES\n\nFound in `fortran.zpp.sh`\n\nThe list of types supported by the fortran compiler as zpp:typeIDs.\n\nThe compiler ID should be provided in `ZPP_CONFIG` as `config.<ID>`.\nThe supported predefined IDs are: `Gnu`, `Intel`, `PGI` and `XL`.\nYou can also provide definitions for an additional compiler by defining\n`ZPP_FORT_TYPES` in a file named `config.<ID>.zpp.sh`.\n\nIf you use cmake, it will automatically generate such a file for your compiler\nand define  `ZPP_CONFIG` so you don't have to handle it.\n\n### zpp_fort_array_desc\n\nFound in `fortran.zpp.sh`\n\nOutputs an assumed shaped array descriptor of the provided size.\n\nParameters:\n1. the size of the assumed shaped array\n\nexample:\n```\n#!SH source fortran.zpp.sh\ninteger:: scalar$(zpp_fort_array_desc 0)\ninteger:: array1d$(zpp_fort_array_desc 1)\ninteger:: array2d$(zpp_fort_array_desc 2)\n```\noutput:\n```\ninteger:: scalar\ninteger:: array1d(:)\ninteger:: array2d(:,:)\n```\n\n### zpp_fort_ptype\n\nFound in `fortran.zpp.sh`\n\nOutputs the type associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\nexample:\n```\n#!SH source fortran.zpp.sh\n!$SH for T in ${ZPP_FORT_TYPES} ; do\n$(zpp_fort_ptype $1)\n!$SH done\n```\nexample output:\n```\nCHARACTER\nCOMPLEX\nCOMPLEX\nINTEGER\nINTEGER\nINTEGER\nINTEGER\nLOGICAL\nREAL\nREAL\n```\n\n### zpp_fort_kind\n\nFound in `fortran.zpp.sh`\n\nOutputs the kind associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\nexample:\n```\n#!SH source fortran.zpp.sh\n!$SH for T in ${ZPP_FORT_TYPES} ; do\n$(zpp_fort_kind $1)\n!$SH done\n```\nexample output:\n```\n1\n4\n8\n1\n2\n4\n8\n1\n4\n8\n```\n\n### zpp_fort_type\n\nFound in `fortran.zpp.sh`\n\nOutputs the full type (with kind included) associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n2. additional attributes for the type\n\nexample:\n```\n#!SH source fortran.zpp.sh\n!$SH for T in ${MY_CHAR_TYPES} ; do\n$(zpp_fort_type $1)\n$(zpp_fort_type $1 \"len=5\")\n!$SH done\n```\nexample output:\n```\nCHARACTER(KIND=1)\nCHARACTER(KIND=1,len=5)\n```\n\n### zpp_fort_sizeof\n\nFound in `fortran.zpp.sh`\n\nOutputs the size in bits associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\n### zpp_fort_io_format\n\nFound in `fortran.zpp.sh`\n\nOutputs an IO descriptor suitable for a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\n### ZPP_HDF5F_TYPES\n\nFound in `hdf5_fortran.zpp.sh`\n\nA list of zpp:typeIDs supported by HDF5.\n\n### hdf5_constant\n\nFound in `hdf5_fortran.zpp.sh`\n\nOutputs the HDF5 type constant associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\nexample:\n```\n#!SH source hdf5_fortran.zpp.sh\n!$SH for T in ${ZPP_HDF5F_TYPES} ; do\n$(hdf5_constant $1)\n!$SH done\n```\nexample output:\n```\nH5T_NATIVE_INTEGER\nH5T_NATIVE_REAL\nH5T_NATIVE_REAL\nH5T_NATIVE_CHARACTER\n```\n\n\n## Command-line interface\n\nZpp basic usage is as follow:\n```\nUsage: zpp [Options...] <source> [<destination>]\n  use `zpp -h' for more info\n\nPreprocesses BASH in-line commands in a source file\n\nOptions:\n  --version        show program's version number and exit\n  -h, --help       show this help message and exit\n  -I DIR           Add DIR to search list for source directives\n  -o FILE          Place the preprocessed code in file FILE.\n  -D OPTION=VALUE  Set the value of OPTION to VALUE\n```\n\n## CMake interface\n\nSupport is provided for using zpp from CMake based projects, but you can use\nit from plain Makefiles too.\n\nThere are two ways you can use zpp from your CMake project:\n* with `add_subdirectory`: include zpp in your project and use it directly from\n  there,\n* with `find_package`: install zpp and use it as an external dependency of your\n  project.\n\n#### CMake subdirectory usage\n\nUsing zpp with `add_subdirectory` is very simple.\nJust copy the `zpp` directory in your source and point to it with\n`add_subdirectory(zpp)`.\nThe `zpp_preprocess` then becomes available to process zpp files.\n\nThis is demonstrated in `example/cmake_subdirectory`.\n\n#### CMake find usage\n\nUsing zpp with `find_package` is no more complex.\nIf zpp is installed, just add a `find_package(zpp REQUIRED)`.\nThe `zpp_preprocess` then becomes available to process zpp files.\n\nThis is demonstrated in `example/cmake_find`.\n\n## GMake usage\n\nUsing zpp from a GNU Makefile is slightly less powerful than from CMake.\nThe types and kinds supported by the Fortran compiler will not be automatically\ndetected.\nPredefined lists of supported types for well known compilers are provided\ninstead.\n\nTo use zpp from a Makefile, include the `share/zpp/zpp.mk` file (either from an\ninstalled location or from a subdirectory in your project).\nYou can then set the `zpp_COMPILER_ID` variable to the compiler you use and\n`.F90` files will be automatically generated from their `.F90.zpp` equivalent.\nThe `zppFLAGS` variable is automatically passed to zpp similarly to `CFLAGS` or\n`CXXFLAGS` for `cc` and `cxx`.\n\nThis is demonstrated in `example/cmake_makefile`.\n\n## Installation\n\nZpp can be installed using the usual python way with `setup.py`.\n```\n./setup.py --help\n```\n\nThe cmake approach is deprecated.\n\n## FAQ\n\nQ. Isn't zpp redundant with assumed type parameters?\n\nA.\nThe assumed type parameters functionality allows to implement part of what can\nbe done with zpp (support for all kinds of a type). However as of 2013 it was\nnot correctly supported on most compilers installed on the supercomputers.\n\nIn addition, many things can be done with zpp but not with assumed type\nparameters, such as support for variable array rank or small variations of the\ncode depending on the kind.\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "bash Fortran pre-processor",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "zpp",
            "package_url": "https://pypi.org/project/zpp/",
            "platform": "",
            "project_url": "https://pypi.org/project/zpp/",
            "project_urls": {
               "Source Code": "https://github.com/pdidev/zpp/"
            },
            "release_url": "https://pypi.org/project/zpp/1.0.4/",
            "requires_dist": [
               "setuptools"
            ],
            "requires_python": "",
            "summary": "a Bash Pre-Processor for Fortran. ZPP is useful in order to build clean Fortran90 interfaces. It allows to generate Fortran code for all types, kinds, and array ranks supported by the compiler.",
            "version": "1.0.4",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Dheepak Krishnamurthy",
            "author_email": "kdheepak89@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# zip [![](https://travis-ci.org/kdheepak/zip.svg?branch=master)](https://travis-ci.org/kdheepak/zip/branches)\n\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/kdheepak/zip",
            "keywords": "",
            "license": "Revised BSD License",
            "maintainer": "",
            "maintainer_email": "",
            "name": "zip",
            "package_url": "https://pypi.org/project/zip/",
            "platform": "",
            "project_url": "https://pypi.org/project/zip/",
            "project_urls": {
               "Homepage": "https://github.com/kdheepak/zip"
            },
            "release_url": "https://pypi.org/project/zip/0.0.2/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Intel Corporation",
            "author_email": "scripting@intel.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "Intended Audience :: Education",
               "Intended Audience :: Other Audience",
               "Intended Audience :: Science/Research",
               "Intended Audience :: System Administrators",
               "License :: Other/Proprietary License",
               "Operating System :: MacOS",
               "Operating System :: Microsoft :: Windows",
               "Operating System :: POSIX",
               "Operating System :: Unix",
               "Topic :: Software Development :: Libraries"
            ],
            "description": "Intel(R) Performance Primitives provides developers with high-quality, production-ready, low-level building blocks for image processing, signal processing, and data processing (data compression and decompression, and cryptography) applications.\n\nOne of many Intel(R) accelerated Python packages and performance library runtimes available on [PyPI](https://software.intel.com/en-us/articles/installing-the-intel-distribution-for-python-and-intel-performance-libraries-with-pip-and), and as part of [Intel(R) Distribution for Python](https://software.intel.com/en-us/distribution-for-python).\n\nFor latest release updates and security notifications, please [subscribe](https://software.intel.com/en-us/forums/intel-distribution-for-python) to the Intel(R) Distribution for Python Community forum.\n\nFree to use and redistribute pursuant to the [Intel Simplified Software License](https://software.intel.com/en-us/license/intel-simplified-software-license).\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://software.intel.com/en-us/articles/empowering-science-with-high-performance-python",
            "keywords": "",
            "license": "Proprietary - Intel",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ipp",
            "package_url": "https://pypi.org/project/ipp/",
            "platform": "",
            "project_url": "https://pypi.org/project/ipp/",
            "project_urls": {
               "Homepage": "https://software.intel.com/en-us/articles/empowering-science-with-high-performance-python"
            },
            "release_url": "https://pypi.org/project/ipp/2019.4.243/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Intel(R) Performance Primitives",
            "version": "2019.4.243",
            "yanked": false,
            "yanked_reason": null
         }
      ],
      "numpy": [
         {
            "author": "Gabriel Alves",
            "author_email": "gabriel.alves@pickcells.bio",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# sx\n#### Framework to manage gRPC-based microservices application",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "https://github.com/itsmealves/sx/releases/download/0.6.0/sx-0.6.0.tar.gz",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/itsmealves/sx",
            "keywords": "sx microservices rpc grpc Framework",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "sx",
            "package_url": "https://pypi.org/project/sx/",
            "platform": "",
            "project_url": "https://pypi.org/project/sx/",
            "project_urls": {
               "Download": "https://github.com/itsmealves/sx/releases/download/0.6.0/sx-0.6.0.tar.gz",
               "Homepage": "https://github.com/itsmealves/sx"
            },
            "release_url": "https://pypi.org/project/sx/0.6.0/",
            "requires_dist": null,
            "requires_python": ">=3.5",
            "summary": "Framework to manage gRPC-based microservices application",
            "version": "0.6.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "chrysn",
            "author_email": "chrysn@fsfe.org",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 3 - Alpha",
               "Intended Audience :: Education",
               "Intended Audience :: Science/Research",
               "License :: OSI Approved :: GNU General Public License (GPL)"
            ],
            "description": "UNKNOWN",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "UNKNOWN",
            "keywords": null,
            "license": "GPL",
            "maintainer": null,
            "maintainer_email": null,
            "name": "si",
            "package_url": "https://pypi.org/project/si/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/si/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "UNKNOWN"
            },
            "release_url": "https://pypi.org/project/si/0.1.1-1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Module to represent SI units",
            "version": "0.1.1-1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "leesoar",
            "author_email": "secure@tom.com",
            "bugtrack_url": null,
            "classifiers": [
               "License :: OSI Approved :: MIT License",
               "Programming Language :: Python :: 3.5",
               "Programming Language :: Python :: 3.6",
               "Programming Language :: Python :: 3.7",
               "Programming Language :: Python :: Implementation :: CPython",
               "Programming Language :: Python :: Implementation :: PyPy"
            ],
            "description": "\nDevelop soon\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://leesoar.com",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ida",
            "package_url": "https://pypi.org/project/ida/",
            "platform": "",
            "project_url": "https://pypi.org/project/ida/",
            "project_urls": {
               "Homepage": "https://leesoar.com"
            },
            "release_url": "https://pypi.org/project/ida/0.0.1/",
            "requires_dist": null,
            "requires_python": ">=3.3.0",
            "summary": "Develop soon",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Xavier Bruhiere",
            "author_email": "xavier.bruhiere@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 2 - Pre-Alpha",
               "Intended Audience :: Science/Research",
               "License :: OSI Approved :: Apache Software License",
               "Natural Language :: English",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2.7",
               "Topic :: Software Development",
               "Topic :: System :: Shells"
            ],
            "description": "python library DNA\n==================\n\n[![Coverage Status](https://coveralls.io/repos/hivetech/dna/badge.png)](https://coveralls.io/r/hivetech/dna)\n\n> Generic python utilities\n\nInstallation\n------------\n\n```console\npip install dna\n```\n\nExample\n-----\n\n```python\nimport dna.utils as utils\nimport dna.logger as logger\n\nlog_setup = logger.setup(level='info', filename='app.log')\nlog = logger.logger(__name__)\nwith log_setup.applicationbound():\n\n    log.info('hello', where='world')\n\n    useless_id = utils.generate_unique_id()\n    useless_name = utils.generate_random_name()\n\n    if utils.docker_check() and utils.is_running('ipyhon'):\n\n        print utils.Version('0.4.1')\n\n        module = utils.dynamic_import('dna.settings', 'LOG')\n        print utils.emphasis(module, align=False)\n\n        print utils.self_ip()\n```",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/hivetech/dna",
            "keywords": null,
            "license": "Apache 2.0",
            "maintainer": null,
            "maintainer_email": null,
            "name": "dna",
            "package_url": "https://pypi.org/project/dna/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/dna/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/hivetech/dna"
            },
            "release_url": "https://pypi.org/project/dna/0.0.7/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Generic python utilities",
            "version": "0.0.7",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Christopher Brown",
            "author_email": "io@henrian.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 2 - Pre-Alpha",
               "License :: OSI Approved :: MIT License",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.6",
               "Programming Language :: Python :: 2.7",
               "Topic :: Software Development :: Libraries :: Python Modules",
               "Topic :: System :: Archiving :: Packaging",
               "Topic :: System :: Filesystems"
            ],
            "description": "Python (package) installation\n-----------------------------\n\nGetting started from `PyPI <https://pypi.python.org/pypi/pi/>`__:\n\n::\n\n    easy_install pi\n\n`Whence easy\\_install? <#setuptools>`__\n\nCommands\n--------\n\n-  Uninstall package named \"pip\":\n\n   ::\n\n       pi uninstall pip\n\n-  Install package named \"filesequence\":\n\n   ::\n\n       pi install filesequence\n\n-  List paths that Python searches for imported modules:\n\n   ::\n\n       pi paths\n\n-  List installed packages:\n\n   ::\n\n       pi list\n\nTesting\n-------\n\nContinuous integration:\n\n|Travis CI Build Status|\n\nOr run tests locally:\n\n::\n\n    nosetests --with-doctest\n\nRelated\n~~~~~~~\n\n-  http://guide.python-distribute.org/creation.html\n-  `distribute/pkg\\_resources\n   docs <http://pythonhosted.org/distribute/pkg_resources.html>`__\n-  standard library\n   ```site`` <http://docs.python.org/2/library/site.html>`__\n-  standard library `environment\n   variables <http://docs.python.org/2/using/cmdline.html#environment-variables>`__\n\nSetuptools\n~~~~~~~~~~\n\n``pi`` does not yet completely replace\n`setuptools <https://pypi.python.org/pypi/setuptools>`__. You may need\nto install it first:\n\n+----------+-----------------------------------------+\n| Distro   | Package manager command                 |\n+==========+=========================================+\n| Ubuntu   | ``apt-get install python-setuptools``   |\n+----------+-----------------------------------------+\n| Mac      | built-in                                |\n+----------+-----------------------------------------+\n| Arch     | ``pacman -S python-setuptools``         |\n+----------+-----------------------------------------+\n| CentOS   | ``yum install python-setuptools``       |\n+----------+-----------------------------------------+\n\nLicense\n-------\n\nCopyright (c) 2013 Christopher Brown. `MIT\nLicensed <https://raw.github.com/chbrown/pi/master/LICENSE>`__.\n\n.. |Travis CI Build Status| image:: https://travis-ci.org/chbrown/pi.png?branch=master\n   :target: https://travis-ci.org/chbrown/pi",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/chbrown/pi",
            "keywords": null,
            "license": "Copyright (c) 2013 Christopher Brown\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.",
            "maintainer": null,
            "maintainer_email": null,
            "name": "pi",
            "package_url": "https://pypi.org/project/pi/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/pi/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/chbrown/pi"
            },
            "release_url": "https://pypi.org/project/pi/0.1.2/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Simpler python package installation",
            "version": "0.1.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ip",
            "package_url": "https://pypi.org/project/ip/",
            "platform": "",
            "project_url": "https://pypi.org/project/ip/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/ip/0.0.1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Vitalii Vanovschi",
            "author_email": "support@parallelpython.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Natural Language :: English",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Topic :: Software Development",
               "Topic :: System :: Distributed Computing"
            ],
            "description": "Parallel Python module (PP) provides an easy and efficient way to create parallel-enabled applications for SMP computers and clusters. PP module features cross-platform portability and dynamic load balancing. Thus application written with PP will parallelize efficiently even on heterogeneous and multi-platform clusters (including clusters running other application with variable CPU loads). Visit http://www.parallelpython.com for further information.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "http://www.parallelpython.com/downloads/pp/pp-1.6.5.zip",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "http://www.parallelpython.com",
            "keywords": null,
            "license": "BSD-like",
            "maintainer": null,
            "maintainer_email": null,
            "name": "pp",
            "package_url": "https://pypi.org/project/pp/",
            "platform": "Windows,Linux,Unix",
            "project_url": "https://pypi.org/project/pp/",
            "project_urls": {
               "Download": "http://www.parallelpython.com/downloads/pp/pp-1.6.5.zip",
               "Homepage": "http://www.parallelpython.com"
            },
            "release_url": "https://pypi.org/project/pp/1.6.5/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Parallel and distributed programming for Python",
            "version": "1.6.5",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Marcus Donnelly",
            "author_email": "marcus.k.donnelly@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "Intended Audience :: Science/Research",
               "License :: OSI Approved :: BSD License",
               "Programming Language :: Python :: 3",
               "Topic :: Scientific/Engineering"
            ],
            "description": "",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "Oceanography,Utilities",
            "license": "BSD",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ocutils",
            "package_url": "https://pypi.org/project/ocutils/",
            "platform": "",
            "project_url": "https://pypi.org/project/ocutils/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/ocutils/1.1.1/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Utility functions for oceanography related work",
            "version": "1.1.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Kiana Alessandra V. Villaera",
            "author_email": "kiana.villaera@senti.com.ph",
            "bugtrack_url": null,
            "classifiers": [
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 3"
            ],
            "description": "Contains everything you might need to perform essential data center functions\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/K-Winkles/dcutils",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dcutils",
            "package_url": "https://pypi.org/project/dcutils/",
            "platform": "",
            "project_url": "https://pypi.org/project/dcutils/",
            "project_urls": {
               "Homepage": "https://github.com/K-Winkles/dcutils"
            },
            "release_url": "https://pypi.org/project/dcutils/0.6/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "A simple package for data center utilities",
            "version": "0.6",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Mike Kazantsev",
            "author_email": "mk.fraggod@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Intended Audience :: Developers",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3.5",
               "Topic :: Software Development",
               "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description": "pretty-yaml (or pyaml)\n======================\n\nPyYAML-based python module to produce pretty and readable YAML-serialized data.\n\nThis module is for serialization only, see `ruamel.yaml`_ module for literate\nYAML parsing (keeping track of comments, spacing, line/column numbers of values, etc).\n\n[note: to dump stuff parsed by ruamel.yaml with this module, use only ``YAML(typ='safe')`` there]\n\n.. contents::\n  :backlinks: none\n\n\nWarning\n-------\n\nPrime goal of this module is to produce human-readable output that can be easily\nmanipulated and re-used, but maybe with some occasional caveats.\n\nOne good example of such \"caveat\" is that e.g. ``{'foo': '123'}`` will serialize\nto ``foo: 123``, which for PyYAML would be a bug, as 123 will then be read back\nas an integer from that, but here it's a feature.\n\nSo please do not rely on the thing to produce output that can always be\ndeserialized exactly to what was exported, at least - use PyYAML (e.g. with\noptions from the next section) for that.\n\n\nWhat this module does and why\n-----------------------------\n\nYAML is generally nice and easy format to read *if* it was written by humans.\n\nPyYAML can a do fairly decent job of making stuff readable, and the best\ncombination of parameters for such output that I've seen so far is probably this one::\n\n  >>> m = [123, 45.67, {1: None, 2: False}, u'some text']\n  >>> data = dict(a=u'asldnsa\\nasldpáknsa\\n', b=u'whatever text', ma=m, mb=m)\n  >>> yaml.safe_dump(data, sys.stdout, allow_unicode=True, default_flow_style=False)\n  a: 'asldnsa\n\n    asldpáknsa\n\n    '\n  b: whatever text\n  ma: &id001\n  - 123\n  - 45.67\n  - 1: null\n    2: false\n  - some text\n  mb: *id001\n\npyaml tries to improve on that a bit, with the following tweaks:\n\n* Most human-friendly representation options in PyYAML (that I know of) get\n  picked as defaults.\n\n* Does not dump \"null\" values, if possible, replacing these with just empty\n  strings, which have the same meaning but reduce visual clutter and are easier\n  to edit.\n\n* Dicts, sets, OrderedDicts, defaultdicts, namedtuples, etc are representable\n  and get sorted on output (OrderedDicts and namedtuples keep their ordering),\n  so that output would be as diff-friendly as possible, and not arbitrarily\n  depend on python internals.\n\n  It appears that at least recent PyYAML versions also do such sorting for\n  python dicts.\n\n* List items get indented, as they should be.\n\n* bytestrings that can't be auto-converted to unicode raise error, as yaml has\n  no \"binary bytes\" (i.e. unix strings) type.\n\n* Attempt is made to pick more readable string representation styles, depending\n  on the value, e.g.::\n\n    >>> yaml.safe_dump(cert, sys.stdout)\n    cert: '-----BEGIN CERTIFICATE-----\n\n      MIIH3jCCBcagAwIBAgIJAJi7AjQ4Z87OMA0GCSqGSIb3DQEBCwUAMIHBMRcwFQYD\n\n      VQQKFA52YWxlcm9uLm5vX2lzcDEeMBwGA1UECxMVQ2VydGlmaWNhdGUgQXV0aG9y\n    ...\n\n    >>> pyaml.p(cert):\n    cert: |\n      -----BEGIN CERTIFICATE-----\n      MIIH3jCCBcagAwIBAgIJAJi7AjQ4Z87OMA0GCSqGSIb3DQEBCwUAMIHBMRcwFQYD\n      VQQKFA52YWxlcm9uLm5vX2lzcDEeMBwGA1UECxMVQ2VydGlmaWNhdGUgQXV0aG9y\n    ...\n\n* \"force_embed\" option to avoid having &id stuff scattered all over the output\n  (which might be beneficial in some cases, hence the option).\n\n* \"&id\" anchors, if used, get labels from the keys they get attached to,\n  not just use meaningless enumerators.\n\n* \"string_val_style\" option to only apply to strings that are values, not keys,\n  i.e::\n\n    >>> pyaml.p(data, string_val_style='\"')\n    key: \"value\\nasldpáknsa\\n\"\n    >>> yaml.safe_dump(data, sys.stdout, allow_unicode=True, default_style='\"')\n    \"key\": \"value\\nasldpáknsa\\n\"\n\n* \"sort_dicts=False\" option to leave dict item ordering to python, and not\n  force-sort them in yaml output, which can be important for python 3.6+ where\n  they retain ordering info.\n\n* Has an option to add vertical spacing (empty lines) between keys on different\n  depths, to make output much more seekable.\n\nResult for the (rather meaningless) example above (without any additional\ntweaks)::\n\n  >>> pyaml.p(data)\n  a: |\n    asldnsa\n    asldpáknsa\n  b: 'whatever text'\n  ma: &ma\n    - 123\n    - 45.67\n    - 1:\n      2: false\n    - 'some text'\n  mb: *ma\n\n----------\n\nExtended example::\n\n  >>> pyaml.dump(conf, sys.stdout, vspacing=[2, 1]):\n  destination:\n\n    encoding:\n      xz:\n        enabled: true\n        min_size: 5120\n        options:\n        path_filter:\n          - \\.(gz|bz2|t[gb]z2?|xz|lzma|7z|zip|rar)$\n          - \\.(rpm|deb|iso)$\n          - \\.(jpe?g|gif|png|mov|avi|ogg|mkv|webm|mp[34g]|flv|flac|ape|pdf|djvu)$\n          - \\.(sqlite3?|fossil|fsl)$\n          - \\.git/objects/[0-9a-f]+/[0-9a-f]+$\n\n    result:\n      append_to_file:\n      append_to_lafs_dir:\n      print_to_stdout: true\n\n    url: http://localhost:3456/uri\n\n\n  filter:\n    - /(CVS|RCS|SCCS|_darcs|\\{arch\\})/$\n    - /\\.(git|hg|bzr|svn|cvs)(/|ignore|attributes|tags)?$\n    - /=(RELEASE-ID|meta-update|update)$\n\n\n  http:\n\n    ca_certs_files: /etc/ssl/certs/ca-certificates.crt\n\n    debug_requests: false\n\n    request_pool_options:\n      cachedConnectionTimeout: 600\n      maxPersistentPerHost: 10\n      retryAutomatically: true\n\n\n  logging:\n\n    formatters:\n      basic:\n        datefmt: '%Y-%m-%d %H:%M:%S'\n        format: '%(asctime)s :: %(name)s :: %(levelname)s: %(message)s'\n\n    handlers:\n      console:\n        class: logging.StreamHandler\n        formatter: basic\n        level: custom\n        stream: ext://sys.stderr\n\n    loggers:\n      twisted:\n        handlers:\n          - console\n        level: 0\n\n    root:\n      handlers:\n        - console\n      level: custom\n\nNote that unless there are many moderately wide and deep trees of data, which\nare expected to be read and edited by people, it might be preferrable to\ndirectly use PyYAML regardless, as it won't introduce another (rather pointless\nin that case) dependency and a point of failure.\n\n\nSome Tricks\n-----------\n\n* Pretty-print any yaml or json (yaml subset) file from the shell::\n\n    % python -m pyaml /path/to/some/file.yaml\n    % curl -s https://www.githubstatus.com/api/v2/summary.json | python -m pyaml\n\n* Process and replace json/yaml file in-place::\n\n    % python -m pyaml -r file-with-json.data\n\n* Easier \"debug printf\" for more complex data (all funcs below are aliases to\n  same thing)::\n\n    pyaml.p(stuff)\n    pyaml.pprint(my_data)\n    pyaml.pprint('----- HOW DOES THAT BREAKS!?!?', input_data, some_var, more_stuff)\n    pyaml.print(data, file=sys.stderr) # needs \"from __future__ import print_function\"\n\n* Force all string values to a certain style (see info on these in\n  `PyYAML docs`_)::\n\n    pyaml.dump(many_weird_strings, string_val_style='|')\n    pyaml.dump(multiline_words, string_val_style='>')\n    pyaml.dump(no_want_quotes, string_val_style='plain')\n\n  Using ``pyaml.add_representer()`` (note \\*p\\*yaml) as suggested in\n  `this SO thread`_ (or `github-issue-7`_) should also work.\n\n* Control indent and width of the results::\n\n    pyaml.dump(wide_and_deep, indent=4, width=120)\n\n  These are actually keywords for PyYAML Emitter (passed to it from Dumper),\n  see more info on these in `PyYAML docs`_.\n\n* Dump multiple yaml documents into a file: ``pyaml.dump_all([data1, data2, data3], dst_file)``\n\n  explicit_start=True is implied, unless explicit_start=False is passed.\n\n.. _PyYAML docs: http://pyyaml.org/wiki/PyYAMLDocumentation#Scalars\n.. _this SO thread: http://stackoverflow.com/a/7445560\n.. _github-issue-7: https://github.com/mk-fg/pretty-yaml/issues/7\n\n\nInstallation\n------------\n\nIt's a regular package for Python (3.x or 2.x).\n\nModule uses PyYAML_ for processing of the actual YAML files and should pull it\nin as a dependency.\n\nDependency on unidecode_ module is optional and should only be necessary if\nsame-id objects or recursion is used within serialized data.\n\nBe sure to use python3/python2, pip3/pip2, easy_install-... binaries below,\nbased on which python version you want to install the module for, if you have\nseveral on the system (as is norm these days for py2-py3 transition).\n\nUsing pip_ is the best way::\n\n  % pip install pyaml\n\n(add --user option to install into $HOME for current user only)\n\nOr, if you don't have \"pip\" command::\n\n  % python -m ensurepip\n  % python -m pip install --upgrade pip\n  % python -m pip install pyaml\n\n(same suggestion wrt \"install --user\" as above)\n\nOn a very old systems, one of these might work::\n\n  % curl https://bootstrap.pypa.io/get-pip.py | python\n  % pip install pyaml\n\n  % easy_install pyaml\n\n  % git clone --depth=1 https://github.com/mk-fg/pretty-yaml\n  % cd pretty-yaml\n  % python setup.py install\n\n(all of install-commands here also have --user option,\nsee also `pip docs \"installing\" section`_)\n\nCurrent-git version can be installed like this::\n\n  % pip install 'git+https://github.com/mk-fg/pretty-yaml#egg=pyaml'\n\nNote that to install stuff to system-wide PATH and site-packages (without\n--user), elevated privileges (i.e. root and su/sudo) are often required.\n\nUse \"...install --user\", `~/.pydistutils.cfg`_ or virtualenv_ to do unprivileged\ninstalls into custom paths.\n\nMore info on python packaging can be found at `packaging.python.org`_.\n\n.. _ruamel.yaml: https://bitbucket.org/ruamel/yaml/\n.. _PyYAML: http://pyyaml.org/\n.. _unidecode: http://pypi.python.org/pypi/Unidecode\n.. _pip: http://pip-installer.org/\n.. _pip docs \"installing\" section: http://www.pip-installer.org/en/latest/installing.html\n.. _~/.pydistutils.cfg: http://docs.python.org/install/index.html#distutils-configuration-files\n.. _virtualenv: http://pypi.python.org/pypi/virtualenv\n.. _packaging.python.org: https://packaging.python.org/installing/\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/mk-fg/pretty-yaml",
            "keywords": "yaml serialization pretty print format human readable readability",
            "license": "WTFPL",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyaml",
            "package_url": "https://pypi.org/project/pyaml/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyaml/",
            "project_urls": {
               "Homepage": "https://github.com/mk-fg/pretty-yaml"
            },
            "release_url": "https://pypi.org/project/pyaml/20.4.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "PyYAML-based module to produce pretty and readable YAML-serialized data",
            "version": "20.4.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "haogege",
            "author_email": "1394168335@qq.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# pyyml\nUse python in yaml\n## 基本使用\n在python中使用：\n```python\nfrom pyyml import load\n\nwith open('conf.yml') as f:\n    raw_conf = f.read()\nconfig = load(raw_conf)\nprint(config)\n```\n在yaml中 `${...}` 中的内容将会被python执行：\n\nyaml内容\n```yaml\nsum: ${1 + 1}\n```\n实际解析内容\n```python\n{'sum': 2}\n```\n通过在文件开头第一行注释来导入所需的包：\n\n```yaml\n# libs:['os', 'os.path:path', 'this']\n```\n通过 [包名]:[别名] 取别名导入包\n\n`'os.path:path' 等同于 python 中的 from os import path`\n\n例如yaml文件内容\n```yaml\n# libs:['os', 'os.path:path', 'this']\nos_name: ${os.name}\nbase_dir: ${path.abspath(path.dirname(__file__))}\n```\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/q1394168335/pyyml",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyyml",
            "package_url": "https://pypi.org/project/pyyml/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyyml/",
            "project_urls": {
               "Homepage": "https://github.com/q1394168335/pyyml"
            },
            "release_url": "https://pypi.org/project/pyyml/0.0.2/",
            "requires_dist": [
               "pyyaml (>=3.13)"
            ],
            "requires_python": "",
            "summary": "Use python in yaml",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Michael Foord",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "rs",
            "package_url": "https://pypi.org/project/rs/",
            "platform": "",
            "project_url": "https://pypi.org/project/rs/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/rs/0.0/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "",
            "version": "0.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Ramses",
            "author_email": "hello@ramses.tech",
            "bugtrack_url": null,
            "classifiers": [
               "Framework :: Pyramid",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.4",
               "Programming Language :: Python :: 3.5",
               "Topic :: Internet :: WWW/HTTP",
               "Topic :: Internet :: WWW/HTTP :: WSGI :: Application"
            ],
            "description": "# `Ra`\n[![Build Status](https://travis-ci.org/ramses-tech/ra.svg?branch=master)](https://travis-ci.org/ramses-tech/ra)\n[![Documentation](https://readthedocs.org/projects/ra/badge/?version=stable)](http://ra.readthedocs.org)\n\nRa is a test suite generator and helper library for testing APIs described\nin [RAML](http://raml.org/).\n\nOut of the box, Ra provides a basic, automated test suite to test the routes\ndeclared in the RAML document. It provides test helpers for augmenting these\nwith custom tests to test application-specific logic, side effects, etc.\n\nRa is primarily designed to provide testing support for\n[ramses](http://github.com/ramses-tech/ramses) and\n[nefertari](http://github.com/ramses-tech/nefertari) applications, but can\nbe used with any WSGI-conformant, RAML-described API.\n\nIt currently depends on pytest but may be adapted for other test frameworks\nin the future. It works best using WebTest but doesn't require it.\n\n## Name\n\nRa was the god of the sun, the most important god in ancient Egypt.\n\n\n## Try it (dev)\n\nRun the test suite:\n\n```bash\n    $ pip install -r requirements.txt\n    $ py.test\n```\n\nCheck out the example:\n\n```bash\n    $ cd examples/ramses-test\n    $ pip install -r requirements.txt\n    $ py.test\n```\n\nThe example RAML at `examples/ramses-test/api.raml` and the test file\n`examples/ramses-test/tests/test_api.py` should be helpful to reference.\n\nSee the docs in `docs/`, and the `api.raml` and `tests/test_api.py` in\n`tests/apps/ramses_test`",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/ramses-tech/ra",
            "keywords": "web raml",
            "license": "UNKNOWN",
            "maintainer": null,
            "maintainer_email": null,
            "name": "ra",
            "package_url": "https://pypi.org/project/ra/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/ra/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/ramses-tech/ra"
            },
            "release_url": "https://pypi.org/project/ra/0.2.0/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Test RAML API definition",
            "version": "0.2.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Shoumik Palkar",
            "author_email": "shoumik@cs.stanford.edu",
            "bugtrack_url": null,
            "classifiers": [
               "License :: OSI Approved :: BSD License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 3"
            ],
            "description": "## split annotations\n\nThis package contains the Python implementation of [split annotations](), a system for optimizing applications\nthat combine many data-intensive library functions. See some useful links below.\n\n* [Documentation for this package](https://www.weld.rs/split-annotations/docs/)\n* [GitHub repository](https://www.github.com/weld-project/split-annotations)\n* [SOSP 2019 Paper describing the system](https://shoumik.xyz/static/papers/mozart-sosp19final.pdf)\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://www.github.com/weld-project/split-annotations",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "sa",
            "package_url": "https://pypi.org/project/sa/",
            "platform": "",
            "project_url": "https://pypi.org/project/sa/",
            "project_urls": {
               "Homepage": "https://www.github.com/weld-project/split-annotations"
            },
            "release_url": "https://pypi.org/project/sa/0.0.4/",
            "requires_dist": [
               "numpy",
               "pandas",
               "scipy",
               "sharedmem"
            ],
            "requires_python": ">=3.6",
            "summary": "Python split annotations package",
            "version": "0.0.4",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Mitch Garnaat",
            "author_email": "mitch@garnaat.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.6",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.3",
               "Programming Language :: Python :: 3.4",
               "Topic :: Internet"
            ],
            "description": "####\nboto\n####\nboto 2.49.0\n\nReleased: 11-July-2018\n\n.. image:: https://travis-ci.org/boto/boto.svg?branch=develop\n        :target: https://travis-ci.org/boto/boto\n\n.. image:: https://pypip.in/d/boto/badge.svg\n        :target: https://pypi.python.org/pypi/boto/\n\n******\nBoto 3\n******\n\n`Boto3 <https://github.com/boto/boto3>`__, the next version of Boto, is now\nstable and recommended for general use.  It can be used side-by-side with Boto\nin the same project, so it is easy to start using Boto3 in your existing\nprojects as well as new projects. Going forward, API updates and all new\nfeature work will be focused on Boto3.\n\nTo assist users who still depend on Boto and cannot immediately switch over, we\nwill be triaging and addressing critical issues and PRs in Boto in the short\nterm. As more users make the switch to Boto3, we expect to reduce our\nmaintenance involvement over time. If we decide on a cutoff date or any\nsignificant changes to our maintenance plan, we will make pre-announcements\nwell ahead of schedule to allow ample time for our users to adapt/migrate.\n\n\n************\nIntroduction\n************\n\nBoto is a Python package that provides interfaces to Amazon Web Services.\nCurrently, all features work with Python 2.6 and 2.7. Work is under way to\nsupport Python 3.3+ in the same codebase. Modules are being ported one at\na time with the help of the open source community, so please check below\nfor compatibility with Python 3.3+.\n\nTo port a module to Python 3.3+, please view our `Contributing Guidelines`_\nand the `Porting Guide`_. If you would like, you can open an issue to let\nothers know about your work in progress. Tests **must** pass on Python\n2.6, 2.7, 3.3, and 3.4 for pull requests to be accepted.\n\n\n********\nServices\n********\n\nAt the moment, boto supports:\n\n* Compute\n\n  * Amazon Elastic Compute Cloud (EC2) (Python 3)\n  * Amazon Elastic Map Reduce (EMR) (Python 3)\n  * AutoScaling (Python 3)\n  * Amazon Kinesis (Python 3)\n  * AWS Lambda (Python 3)\n  * Amazon EC2 Container Service (Python 3)\n\n* Content Delivery\n\n  * Amazon CloudFront (Python 3)\n\n* Database\n\n  * Amazon Relational Data Service (RDS)\n  * Amazon DynamoDB (Python 3)\n  * Amazon SimpleDB (Python 3)\n  * Amazon ElastiCache (Python 3)\n  * Amazon Redshift (Python 3)\n\n* Deployment and Management\n\n  * AWS Elastic Beanstalk (Python 3)\n  * AWS CloudFormation (Python 3)\n  * AWS Data Pipeline (Python 3)\n  * AWS Opsworks (Python 3)\n  * AWS CloudTrail (Python 3)\n  * AWS CodeDeploy (Python 3)\n\n* Administration & Security\n\n  * AWS Identity and Access Management (IAM) (Python 3)\n  * AWS Key Management Service (KMS) (Python 3)\n  * AWS Config (Python 3)\n  * AWS CloudHSM (Python 3)\n\n* Application Services\n\n  * Amazon CloudSearch (Python 3)\n  * Amazon CloudSearch Domain (Python 3)\n  * Amazon Elastic Transcoder (Python 3)\n  * Amazon Simple Workflow Service (SWF) (Python 3)\n  * Amazon Simple Queue Service (SQS) (Python 3)\n  * Amazon Simple Notification Server (SNS) (Python 3)\n  * Amazon Simple Email Service (SES) (Python 3)\n  * Amazon Cognito Identity (Python 3)\n  * Amazon Cognito Sync (Python 3)\n  * Amazon Machine Learning (Python 3)\n\n* Monitoring\n\n  * Amazon CloudWatch (EC2 Only) (Python 3)\n  * Amazon CloudWatch Logs (Python 3)\n\n* Networking\n\n  * Amazon Route53 (Python 3)\n  * Amazon Route 53 Domains (Python 3)\n  * Amazon Virtual Private Cloud (VPC) (Python 3)\n  * Elastic Load Balancing (ELB) (Python 3)\n  * AWS Direct Connect (Python 3)\n\n* Payments and Billing\n\n  * Amazon Flexible Payment Service (FPS)\n\n* Storage\n\n  * Amazon Simple Storage Service (S3) (Python 3)\n  * Amazon Glacier (Python 3)\n  * Amazon Elastic Block Store (EBS)\n  * Google Cloud Storage\n\n* Workforce\n\n  * Amazon Mechanical Turk\n\n* Other\n\n  * Marketplace Web Services (Python 3)\n  * AWS Support (Python 3)\n\nThe goal of boto is to support the full breadth and depth of Amazon\nWeb Services.  In addition, boto provides support for other public\nservices such as Google Storage in addition to private cloud systems\nlike Eucalyptus, OpenStack and Open Nebula.\n\nBoto is developed mainly using Python 2.6.6 and Python 2.7.3 on Mac OSX\nand Ubuntu Maverick.  It is known to work on other Linux distributions\nand on Windows.  Most of Boto requires no additional libraries or packages\nother than those that are distributed with Python.  Efforts are made\nto keep boto compatible with Python 2.5.x but no guarantees are made.\n\n************\nInstallation\n************\n\nInstall via `pip`_:\n\n::\n\n    $ pip install boto\n\nInstall from source:\n\n::\n\n    $ git clone git://github.com/boto/boto.git\n    $ cd boto\n    $ python setup.py install\n\n**********\nChangeLogs\n**********\n\nTo see what has changed over time in boto, you can check out the\nrelease notes at `http://docs.pythonboto.org/en/latest/#release-notes`\n\n***************************\nFinding Out More About Boto\n***************************\n\nThe main source code repository for boto can be found on `github.com`_.\nThe boto project uses the `gitflow`_ model for branching.\n\n`Online documentation`_ is also available. The online documentation includes\nfull API documentation as well as Getting Started Guides for many of the boto\nmodules.\n\nBoto releases can be found on the `Python Cheese Shop`_.\n\nJoin our IRC channel `#boto` on FreeNode.\nWebchat IRC channel: http://webchat.freenode.net/?channels=boto\n\nJoin the `boto-users Google Group`_.\n\n*************************\nGetting Started with Boto\n*************************\n\nYour credentials can be passed into the methods that create\nconnections.  Alternatively, boto will check for the existence of the\nfollowing environment variables to ascertain your credentials:\n\n**AWS_ACCESS_KEY_ID** - Your AWS Access Key ID\n\n**AWS_SECRET_ACCESS_KEY** - Your AWS Secret Access Key\n\nCredentials and other boto-related settings can also be stored in a\nboto config file.  See `this`_ for details.\n\n.. _Contributing Guidelines: https://github.com/boto/boto/blob/develop/CONTRIBUTING\n.. _Porting Guide: http://boto.readthedocs.org/en/latest/porting_guide.html\n.. _pip: http://www.pip-installer.org/\n.. _release notes: https://github.com/boto/boto/wiki\n.. _github.com: http://github.com/boto/boto\n.. _Online documentation: http://docs.pythonboto.org\n.. _Python Cheese Shop: http://pypi.python.org/pypi/boto\n.. _this: http://docs.pythonboto.org/en/latest/boto_config_tut.html\n.. _gitflow: http://nvie.com/posts/a-successful-git-branching-model/\n.. _neo: https://github.com/boto/boto/tree/neo\n.. _boto-users Google Group: https://groups.google.com/forum/?fromgroups#!forum/boto-users\n\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/boto/boto/",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "boto",
            "package_url": "https://pypi.org/project/boto/",
            "platform": "Posix; MacOS X; Windows",
            "project_url": "https://pypi.org/project/boto/",
            "project_urls": {
               "Homepage": "https://github.com/boto/boto/"
            },
            "release_url": "https://pypi.org/project/boto/2.49.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Amazon Web Services Library",
            "version": "2.49.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Hadi Asghari",
            "author_email": "hd.asghari@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 3",
               "Topic :: Software Development :: Libraries :: Python Modules",
               "Topic :: System :: Networking"
            ],
            "description": "pyasn\n=====\n\n.. image:: https://pypip.in/v/pyasn/badge.png\n   :target: https://pypi.python.org/pypi/pyasn\n\n.. image:: https://pypip.in/d/pyasn/badge.png\n   :target: https://pypi.python.org/pypi/pyasn\n\n\n**pyasn** is a Python extension module that enables very fast IP address to Autonomous System Number lookups.\nCurrent state and Historical lookups can be done, based on the MRT/RIB BGP archive used as input.\n\n*pyasn* is different from other ASN lookup tools in that it provides **offline** and **historical** lookups.\nIt provides utility scripts for users to build their own lookup databases based on any MRT/RIB archive.\nThis makes *pyasn* much faster than online dig/whois/json lookups.\n\nThe module is written in C and Python, and cross-compiles on Linux and Windows. Underneath, it uses a radix tree\ndata structure for storage of IP addresses. In the current version, it borrows code from *py-radix* to support\nboth IPV4 and IPV6 network prefixes. The current release is a beta. Compared to the previous version, it provides\nsupport for Python 2 and 3; adds new functionality, performance improvements, and unit-tests.\n\n*pyasn* is developed and maintained by researchers at the Economics of Cybersecurity research group at Delft\nUniversity of Technology (http://econsec.tbm.tudlft.nl). The package is used on an almost daily basis and bugs\nare fixed pretty quickly.  The package is largely developed and maintained by Hadi Asghari and Arman Noroozian.\nPlease report any bugs via GitHub (https://github.com/hadiasghari/pyasn) or email the developers.\n\n\nInstallation\n============\nInstallation is a breeze via pip: ::\n\n    pip install pyasn --pre\n\nOr with the standard Python: ::\n\n    python setup.py build\n    python setup.py install --record log\n\nYou will need to have pip, setuptools and build essentials installed if you build the package manually. On\nUbuntu/Debian you can get them using the following command: ::\n\n    sudo apt-get install python-pip python-dev build-essential\n\nBuilding the C module on Windows, using either pip or from source, requires Microsoft Visual C++ to be installed.\npyasn has been tested using Visual C++ Express 2010, available freely from Microsoft's website, on both the\nofficial Python 3.4 release and Miniconda3. Other versions of Python, Visual Studio, and Cygwin could also work\nwith minor modifications.\n\nWe plan to release *pyasn* packages to major Linux repositories once it is out of beta.\n\n\nUsage\n=====\nA simple example that demonstrates most of the features: ::\n\n    import pyasn\n\n    # Initialize module and load IP to ASN database\n    # the sample database can be downloaded or built - see below\n    asndb = pyasn.pyasn('ipasn_20140513.dat')\n\n    asndb.lookup('8.8.8.8')\n    # should return: (15169, '8.8.8.0/24'), the origin AS, and the BGP prefix it matches\n\n    asndb.get_as_prefixes(1128)\n    # returns ['130.161.0.0/16', '131.180.0.0/16', '145.94.0.0/16'], TU-Delft prefixes\n\n\nIPASN Data Files\n================\nIPASN data files are a long list of prefixes used to lookup AS number for IPs. An excerpt from such a file looks\nlike this: ::\n\n    ; IP-ASN32-DAT file\n    ; Original file : <Path to a rib file>\n    ; Converted on  : Tue May 13 22:03:05 2014\n    ; CIDRs         : 512490\n    ;\n    1.0.0.0/24  15169\n    1.0.128.0/17        9737\n    1.0.128.0/18        9737\n    1.0.128.0/19        9737\n    1.0.129.0/24        23969\n    ...\n\nIPASN data files can be created by downloading MRT/RIB BGP archives from Routeviews (or similar sources),\nand parsing them using provided scripts that tail the BGP AS-Path. This can be done simply as follows: ::\n\n    pyasn_util_download.py --latest\n    pyasn_util_convert.py --single <Downloaded RIB File> <ipasn_db_file_name>\n\n\n**NOTE:** These scripts are by default installed to ``/usr/local/bin`` and can be executed directly. If you installed\nthe package to a user directory, these scripts will not be on the path and you will have to invoke them by navigating\nto the folder in which they have been copied (e.g. ``~/.local/bin``).\n\nWe also provide download links to a large number of previously generated IPASN data files. These are based on\nweekly  snapshots of the Routeviews data from 2005-2015, accessible here:\nhttp://data.3tu.nl/repository/uuid:d4d23b8e-2077-4592-8b47-cb476ad16e12\n\n**New in v1.6:** To save disk space, you can gzip IPASN data files. The load time will be slighlty longer.\n\n\nPerformance Tip\n===============\nInitial loading of a IPASN data file is the most heavy operation of the package. For fast lookups using multiple\nIPASN data files, for instance for historical lookups on multiple dates, we recommend caching of loaded data files\nfor better performance.\n\n\nUninstalling pyasn\n==================\nYou can remove *pyasn* as follows: ::\n\n    pip uninstall pyasn\n\nIf you built and installed the package your self use the recorded log to remove the installed files.\n\n**Removing PyASN version 1.2**: *pyasn* v1.5/1.6 and v1.2 can be installed side by side (due to lower-cased package\nname). To avoid mistakes, you can uninstall the old **PyASN** by deleting the following files from your Python\ninstallation: ::\n\n    PYTHONDIR/dist-packages/PyASN.so\n    PYTHONDIR/dist-packages/PyASN-1.2.egg-info\n\n\nPackage Structure\n=================\nThe main portions of the directory tree are as follows: ::\n\n    .\n    ├── pyasn/__init__.py       # Python code of the main pyasn module\n    ├── pyasn/pyasn_radix.c     # C extension code (Python RADIX module with bulk load)\n    ├── pyasn/_radix/*          # C extension code (Based on original RADIX code from MRTd)\n    ├── pyasn/mrtx.py           # python module used to convert MRT files to pyasn DB files\n    ├── pyasn-utils/*.py        # Scripts to download & convert BGP MRT dumps to IPASN databases\n    ├── data/                   # Test Resources and some sample DBs to use\n    ├── tests/                  # Tests\n    └── setup.py                # Standard setup.py for installation/testing/etc.\n\n\n\nTesting pyasn Sources\n=====================\nA limited number of unit tests are provided in the ``tests/`` directory when downlading the sources. They can be\nrun with the following command: ::\n\n    python setup.py test\n\nThis beta release has been tested under python version 2.6, 2.7, 3.3, 3.4 and 3.5. We appreciate contributions towards\ntesting *pyasn*!\n\n**New in v1.6:** pyasn_util_convert.py offers a '--dump-screen' option which shows the MRT/RIB archive contents and\nthe chosen origin-AS.\n\n\nLicense & Acknowledgments\n=========================\n*pyasn* is licensed under the MIT license.\n\nIt extends code from py-radix (Michael J. Schultz and Damien Miller),  and improves upon it in several ways, for\ninstance in lowering memory usage and adding bulk prefix/origin load. The underlying radix tree implementation is\ntaken (and modified) from MRTd. These are all subject to their respective licenses.  Please see the LICENSE file\nfor details.\n\nThanks to Dr. Chris Lee (of Shadowserver) for proposing the use of radix trees.\n\nA handful of GitHub developers have contributed features and bug fixes to the latest releases.\nMany thanks to all of them.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": null,
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/hadiasghari/pyasn",
            "keywords": "ip asn autonomous system bgp whois prefix radix python routing networking",
            "license": "MIT",
            "maintainer": null,
            "maintainer_email": null,
            "name": "pyasn",
            "package_url": "https://pypi.org/project/pyasn/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/pyasn/",
            "project_urls": {
               "Homepage": "https://github.com/hadiasghari/pyasn"
            },
            "release_url": "https://pypi.org/project/pyasn/1.6.0b1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Offline IP address to Autonomous System Number lookup module.",
            "version": "1.6.0b1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Perdix Software",
            "author_email": "ssmith@perdixsw.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 2 - Pre-Alpha",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.4",
               "Programming Language :: Python :: 3.5",
               "Programming Language :: Python :: 3.6",
               "Topic :: Office/Business :: Financial",
               "Topic :: Scientific/Engineering :: Mathematics"
            ],
            "description": "UNKNOWN",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "https://www.github.com/perdixsw/umpy/tarball/0.1.0",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://www.github.com/perdixsw/umpy",
            "keywords": "units,measure,measurement,conversion,converter",
            "license": "MIT",
            "maintainer": null,
            "maintainer_email": null,
            "name": "umpy",
            "package_url": "https://pypi.org/project/umpy/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/umpy/",
            "project_urls": {
               "Download": "https://www.github.com/perdixsw/umpy/tarball/0.1.0",
               "Homepage": "https://www.github.com/perdixsw/umpy"
            },
            "release_url": "https://pypi.org/project/umpy/0.1.0/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Simple unit of measure conversion for python, optimized for manufacturing contexts.",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Jay Marcyes",
            "author_email": "jay@marcyes.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Environment :: Console",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Topic :: Software Development :: Testing"
            ],
            "description": "Pyt\n===\n\nPyt is a lightweight wrapper around `Python’s unittest\nmodule <https://docs.python.org/3/library/unittest.html>`__ that adds\nsome nice features and enhancements over the stock ``unittest`` module.\n\nQuickstart\n~~~~~~~~~~\n\nPyt overrides unittest’s built-in pathfinding to be smarter and less\nverbose, so you can match tests using prefix matching which makes\nrunning a test like:\n\n::\n\n   $ python -m unittest tests.foo_test.BarTestCase.test_che\n\nas simple as:\n\n::\n\n   $ pyt foo.Bar.che\n\nBut it’s even less verbose if you want it to be, pyt can reach into the\nmodules and classes to do its matching, so you don’t even need to\nspecify the module and class if you don’t want to:\n\n::\n\n   $ pyt che\n\nMore examples\n^^^^^^^^^^^^^\n\nTo run all the ``Happy`` tests:\n\n::\n\n   $ pyt Happy\n\nTo run all the ``newmodule`` tests:\n\n::\n\n   $ pyt newmodule\n\nTo run more than one test:\n\n::\n\n   $ pyt test1 test2 ...\n\nTo run every test ``pyt`` can find:\n\n::\n\n   $ pyt\n\nAnd the way I like to run all tests in the current directory:\n\n::\n\n   $ pyt -vb\n\nWhich can also be written:\n\n::\n\n   $ pyt --verbose --buffer\n\nFlags\n~~~~~\n\nTo see everything pyt can do\n\n::\n\n   $ pyt --help\n\n–warnings\n^^^^^^^^^\n\nThis will convert warnings into errors.\n\n::\n\n   $ pyt --warnings\n\n–rerun\n^^^^^^\n\nIf your last testrun had failing tests this will rerun only the tests\nthat failed.\n\n::\n\n   $pyt --rerun\n\nThings to be aware of\n~~~~~~~~~~~~~~~~~~~~~\n\npyt uses Python’s PEP 8 style conventions\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n``pyt`` uses `Python’s code styling\nconventions <http://www.python.org/dev/peps/pep-0008/>`__ to decide what\nis the module and class, so, given input like this:\n\n::\n\n   $ pyt foo.bar.Baz.che\n\n``pyt`` will consider ``foo.bar`` to be the module, ``Baz`` to be a\nclass (because it starts with a capital letter), and ``che`` to be a\nmethod (since it comes after the class).\n\nLikewise, ``pyt`` uses unittest conventions, so a test module should end\nwith ``_test`` (eg, ``foo.bar_test``) or start with test (eg,\n``test_foo.py``) and a TestCase class should extend\n``unittest.TestCase``, and test methods should start with ``test_`` (eg,\n``test_che``).\n\nVague input can cause pyt to run more tests than you expect\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSo if you have something like this:\n\n::\n\n   project/\n     __init__.py\n     user.py\n     foo/\n       __init__.py\n       user.py\n     tests/\n       __init__.py\n       user_test.py\n       foo/\n         __init__.py\n         user_test.py\n\nAnd you want to run tests for ``foo.user`` and you run:\n\n::\n\n   $ pyt user\n\nit will run both ``tests/user_test`` and ``tests.foo.user_test``, the\nsolution is to just be more verbose when you have to be:\n\n::\n\n   $ pyt foo.user\n\nEnvironment Variables\n^^^^^^^^^^^^^^^^^^^^^\n\nIf you are running the tests within pyt, you might notice there is an\nenvironment variable ``PYT_TEST_COUNT`` that contains the count of how\nmany tests pyt found to run.\n\nInstallation\n------------\n\nUse ``pip``:\n\n::\n\n   $ pip install pyt\n\nYou can also get it directly from the repo:\n\n::\n\n   $ pip install --upgrade git+https://github.com/Jaymon/pyt#egg=pyt\n\nIf you install pyt using Python 3 it can also be invoked using the\n``pyt3`` command:\n\n::\n\n   $ pyt3 --help\n\nLikewise, Python 2 installs a ``pyt2`` command:\n\n::\n\n   $ pyt2 --help\n\nTesting\n-------\n\nTesting in 2.7 on most systems:\n\n::\n\n   $ python -m unittest pyt_test\n\nTesting in 3.5 on MacOS:\n\n::\n\n   $ python3.5 -m unittest pyt_test\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "http://github.com/Jaymon/pyt",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyt",
            "package_url": "https://pypi.org/project/pyt/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyt/",
            "project_urls": {
               "Homepage": "http://github.com/Jaymon/pyt"
            },
            "release_url": "https://pypi.org/project/pyt/1.0.5/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "easily run python unit tests",
            "version": "1.0.5",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Bradley Odell",
            "author_email": "btodell@hotmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Environment :: Console",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
               "Natural Language :: English",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 2.6",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Topic :: Software Development :: Build Tools"
            ],
            "description": "pyz\n===\n\n*Packages all source code and dependencies into a single Python zip application.*\n\nSummary\n-------\n\nDeploying a Python application any larger than a single file is\ncumbersome - this library aims to solve that problem.\n\nPython has been able to run code from within a zip file since version\n2.6. Python 3.5 introduced the `zipapp <https://docs.python.org/3/library/zipapp.html>`__ module\nwhich aims to simplify the process of creating a zip application.\nHowever, **zipapp** isn't a complete solution to the problem - it\ndoesn't handle dependencies and it doesn't include certain extra\nfeatures that this library provides.\n\nThis library allows you to bundle all of your Python code **AND** your\ndependencies into a single Python zip application file.\n\nNote: The dependency bundling feature is not implemented yet, but it is\nin the works!\n\nFeatures\n--------\n\n1. Bundle all Python source code with fine-grained control over included files.\n2. Ability to \"unixify\" the output application by prepending a customizable\n   `shebang <https://en.wikipedia.org/wiki/Shebang_(Unix)>`__.\n3. Python interpreter version check - display a friendly notice instead\n   of a Python exception if the user runs your application using an\n   unsupported Python version.\n\nPlanned\n-------\n\n1. Automatically identify dependencies and package them accordingly.\n",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "https://github.com/BTOdell/pyz/archive/0.4.3.tar.gz",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/BTOdell/pyz",
            "keywords": "pyz zip app zipapp bundle dependencies library",
            "license": "GPLv3",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyz",
            "package_url": "https://pypi.org/project/pyz/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyz/",
            "project_urls": {
               "Download": "https://github.com/BTOdell/pyz/archive/0.4.3.tar.gz",
               "Homepage": "https://github.com/BTOdell/pyz"
            },
            "release_url": "https://pypi.org/project/pyz/0.4.3/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Packages all source code and dependencies into a single Python zip application.",
            "version": "0.4.3",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Val Neekman",
            "author_email": "info@neekware.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 3 - Alpha",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Operating System :: POSIX",
               "Programming Language :: Python",
               "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description": "AWSLI\n====================\n\n**Amazon Web Services Line Interpreter**\n\n**Author:** Val Neekman [ info@neekware.com, @vneekman ]\n\nOverview\n========\n\nA Line Interpreter for Amazon Web Services.\n\nHow to install\n==================\n\n    1. easy_install awsli\n    2. pip install awsli\n    3. git clone http://github.com/un33k/awsli\n        a. cd awsli\n        b. run python setup.py\n    4. wget https://github.com/un33k/awsli/zipball/master\n        a. unzip the downloaded file\n        b. cd into awsli-* directory\n        c. run python setup.py\n\nHow to use\n=================\n\n``Usage``\n\n``Note:``\n\nRunning the tests\n=================\n\nTo run the tests against the current environment:\n\n    python test.py\n\nChangelog\n=========\n\n0.1\n-----\n\n* Initial release\n\n\nLicense\n=======\n\nCopyright (c) 2012, Val Neekman\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without \nmodification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this \nlist of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this \nlist of conditions and the following disclaimer in the documentation and/or \nother materials provided with the distribution.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND \nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED \nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE \nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE \nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL \nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR \nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, \nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE \nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/un33k/awsli",
            "keywords": null,
            "license": "BSD",
            "maintainer": null,
            "maintainer_email": null,
            "name": "awsli",
            "package_url": "https://pypi.org/project/awsli/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/awsli/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/un33k/awsli"
            },
            "release_url": "https://pypi.org/project/awsli/0.0.1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "A Line Interpreter for Amazon Web Services",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Armin Ronacher",
            "author_email": "armin.ronacher@active-4.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Environment :: Web Environment",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
               "Topic :: Software Development :: Libraries :: Python Modules",
               "Topic :: Text Processing :: Markup :: HTML"
            ],
            "description": "jinja\n~~~~~\n\nJinja is a `sandboxed`_ template engine written in pure Python. It\nprovides a `Django`_ like non-XML syntax and compiles templates into\nexecutable python code. It's basically a combination of Django templates\nand python code.\n\nNutshell\n--------\n\nHere a small example of a Jinja template::\n\n    {% extends 'base.html' %}\n    {% block title %}Memberlist{% endblock %}\n    {% block content %}\n      <ul>\n      {% for user in users %}\n        <li><a href=\"{{ user.url|e }}\">{{ user.username|e }}</a></li>\n      {% endfor %}\n      </ul>\n    {% endblock %}\n\nPhilosophy\n----------\n\nApplication logic is for the controller but don't try to make the life\nfor the template designer too hard by giving him too few functionality.\n\nFor more informations visit the new `jinja webpage`_ and `documentation`_.\n\nNote\n----\n\nThis is the Jinja 1.0 release which is completely incompatible with the\nold \"pre 1.0\" branch. The old branch will still receive security updates\nand bugfixes but the 1.0 branch will be the only version that receives\nsupport.\n\nIf you have an application that uses Jinja 0.9 and won't be updated in\nthe near future the best idea is to ship a Jinja 0.9 checkout together\nwith the application.\n\nThe `Jinja tip`_ is installable via `easy_install` with ``easy_install\nJinja==dev``.\n\n.. _sandboxed: http://en.wikipedia.org/wiki/Sandbox_(computer_security)\n.. _Django: http://www.djangoproject.com/\n.. _jinja webpage: http://jinja.pocoo.org/\n.. _documentation: http://jinja.pocoo.org/documentation/index.html\n.. _Jinja tip: http://dev.pocoo.org/hg/jinja-main/archive/tip.tar.gz#egg=Jinja-dev\n\n\n:copyright: 2007 by Armin Ronacher.\n:license: BSD, see LICENSE for more details.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "http://jinja.pocoo.org/",
            "keywords": "python.templating.engines",
            "license": "BSD",
            "maintainer": null,
            "maintainer_email": null,
            "name": "Jinja",
            "package_url": "https://pypi.org/project/Jinja/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/Jinja/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "http://jinja.pocoo.org/"
            },
            "release_url": "https://pypi.org/project/Jinja/1.2/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "A small but fast and easy to use stand-alone template engine written in pure python.",
            "version": "1.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Hsiaoming Yang",
            "author_email": "me@lepture.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Environment :: Console",
               "Environment :: Web Environment",
               "Framework :: Django",
               "Framework :: Flask",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.5",
               "Programming Language :: Python :: 3.6",
               "Programming Language :: Python :: 3.7",
               "Programming Language :: Python :: 3.8",
               "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
               "Topic :: Internet :: WWW/HTTP :: WSGI :: Application",
               "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description": "Authlib\n=======\n\nThe ultimate Python library in building OAuth and OpenID Connect servers.\nJWS, JWK, JWA, JWT are included.\n\nUseful Links\n------------\n\n1. Homepage: https://authlib.org/\n2. Documentation: https://docs.authlib.org/\n3. Purchase Commercial License: https://authlib.org/plans\n4. Blog: https://blog.authlib.org/\n5. More Repositories: https://github.com/authlib\n6. Twitter: https://twitter.com/authlib\n7. Donate: https://www.patreon.com/lepture\n\nSpecifications\n--------------\n\n- RFC5849: The OAuth 1.0 Protocol\n- RFC6749: The OAuth 2.0 Authorization Framework\n- RFC6750: The OAuth 2.0 Authorization Framework: Bearer Token Usage\n- RFC7009: OAuth 2.0 Token Revocation\n- RFC7515: JSON Web Signature\n- RFC7516: JSON Web Encryption\n- RFC7517: JSON Web Key\n- RFC7518: JSON Web Algorithms\n- RFC7519: JSON Web Token\n- RFC7521: Assertion Framework for OAuth 2.0 Client Authentication and Authorization Grants\n- RFC7523: JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants\n- RFC7591: OAuth 2.0 Dynamic Client Registration Protocol\n- RFC7662: OAuth 2.0 Token Introspection\n- RFC8414: OAuth 2.0 Authorization Server Metadata\n- RFC8628: OAuth 2.0 Device Authorization Grant\n- OpenID Connect 1.0\n- OpenID Connect Discovery 1.0\n\nImplementations\n---------------\n\n- Requests OAuth 1 Session\n- Requests OAuth 2 Session\n- Requests Assertion Session\n- Flask OAuth 1/2 Client\n- Django OAuth 1/2 Client\n- Flask OAuth 1.0 Server\n- Flask OAuth 2.0 Server\n- Flask OpenID Connect 1.0\n- Django OAuth 1.0 Server\n- Django OAuth 2.0 Server\n- Django OpenID Connect 1.0\n\nLicense\n-------\n\nAuthlib is licensed under BSD. Please see LICENSE for licensing details.\n\nIf this license does not fit your company, consider to purchase a commercial\nlicense. Find more information on `Authlib Plans`_.\n\n.. _`Authlib Plans`: https://authlib.org/plans\n\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://authlib.org/",
            "keywords": "",
            "license": "BSD-3-Clause",
            "maintainer": "",
            "maintainer_email": "",
            "name": "Authlib",
            "package_url": "https://pypi.org/project/Authlib/",
            "platform": "any",
            "project_url": "https://pypi.org/project/Authlib/",
            "project_urls": {
               "Blog": "https://blog.authlib.org/",
               "Bug Tracker": "https://github.com/lepture/authlib/issues",
               "Commercial License": "https://authlib.org/plans",
               "Documentation": "https://docs.authlib.org/",
               "Donate": "https://lepture.com/donate",
               "Homepage": "https://authlib.org/",
               "Source Code": "https://github.com/lepture/authlib"
            },
            "release_url": "https://pypi.org/project/Authlib/0.14.3/",
            "requires_dist": [
               "cryptography",
               "requests ; extra == 'client'"
            ],
            "requires_python": "",
            "summary": "The ultimate Python library in building OAuth and OpenID Connect servers.",
            "version": "0.14.3",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Julien Bigot",
            "author_email": "julien.bigot@cea.fr",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Environment :: Console",
               "License :: OSI Approved :: MIT License"
            ],
            "description": "# zpp\n\nThis is zpp, the Z Pre-Processor.\n\nZpp transforms bash in a pre-processor for F90 source files.\nIt offers a set of functions specifically tailored to build clean Fortran90\ninterfaces by generating code for all types, kinds, and array ranks supported by\na given compiler.\n\n## Syntax\n\nZpp files are typically named `*.F90.zpp`.\n\nIn these files, the lines that start with `!$SH` are interpreted as bash lines. \nOther lines are copied as-is, except that variable substitution is operated as\nin a double-quoted string, including bash commands `${VAR}` or `$(command)`.\nIf inside a bash control block (`if`, `for`, etc.), the output generation obeys\nthe control statement.\n\nFor example, this code:\n```\n!$SH for GREETED in world universe multiverse ; do\nprint *, \"Hello ${GREETED}\"\n!$SH done\n```\n\nWould produce the following result:\n```\nprint *, \"Hello world\"\nprint *, \"Hello universe\"\nprint *, \"Hello multiverse\"\n```\n\n### Support functions\n\nPredefined bash functions, variable and code can be provided in `.zpp.sh` files\nthat can be included with `#!SH source <filename>.zpp.sh`.\n\n**Beware**: a file NEEDs to have the `.zpp.sh` extension to be included from\nzpp.\n\nZpp provides a standard library of functions tailored to build clean Fortran90\ninterfaces by generating code for all types, kinds, and array ranks supported by\na given compiler.\n\n#### zpp_str_repeat\n\nFound in `base.zpp.sh`\n\nOutputs a string multiple times.\n\nParameters:\n1. the string to Repeat\n2. the lower bound of the iterations (inclusive)\n3. the upper bound of the iterations (inclusive)\n4. the string separator\n5. the string starter\n6. the string ender\n\nRepeats string `$1` (`$3`-`$2`+1) times, separated by string `$4` inside `$5`\n`$6`.\n* If the number of repetitions is negative, the result is empty.\n* If `$1` contains the '@N' substring, it will be replaced by the iteration\n  number (from `$2` to `$3`).\n\nexample:\n```\n#!SH source base.zpp.sh\nzpp_str_repeat v@N 5 7 '...' '<<' '>>'\nzpp_str_repeat w@N 1 1 '...' '<<' '>>'\nzpp_str_repeat x@N 1 0 '...' '<<' '>>'\n```\noutput:\n```\n<<v5...v6...v7>>\n<<w1>>\n```\n\n#### zpp_str_repeat_reverse\n\nFound in `base.zpp.sh`\n\nOutputs a string multiple times in reverse order.\n\nParameters:\n1. the string to Repeat\n2. the upper bound of the iterations (inclusive)\n3. the lower bound of the iterations (inclusive)\n4. the string separator\n5. the string starter\n6. the string ender\n\nRepeats string `$1` (`$2`-`$3`+1) times, separated by string `$4` inside `$5`\n`$6`.\n* If the number of repetitions is negative, the result is empty.\n* If `$1` contains the '@N' substring, it will be replaced by the iteration\n  number (from `$2` to `$3`, i.e. upper to lower).\n\nexample:\n```\n#!SH source base.zpp.sh\nzpp_str_repeat_reverse v@N 5 7 '...' '<<' '>>'\nzpp_str_repeat_reverse w@N 1 1 '...' '<<' '>>'\nzpp_str_repeat_reverse x@N 1 0 '...' '<<' '>>'\n```\noutput:\n```\n<<v7...v6...v5>>\n<<w1>>\n```\n\n#### ZPP_FORT_TYPES\n\nFound in `fortran.zpp.sh`\n\nThe list of types supported by the fortran compiler as zpp:typeIDs.\n\nThe compiler ID should be provided in `ZPP_CONFIG` as `config.<ID>`.\nThe supported predefined IDs are: `Gnu`, `Intel`, `PGI` and `XL`.\nYou can also provide definitions for an additional compiler by defining\n`ZPP_FORT_TYPES` in a file named `config.<ID>.zpp.sh`.\n\nIf you use cmake, it will automatically generate such a file for your compiler\nand define  `ZPP_CONFIG` so you don't have to handle it.\n\n### zpp_fort_array_desc\n\nFound in `fortran.zpp.sh`\n\nOutputs an assumed shaped array descriptor of the provided size.\n\nParameters:\n1. the size of the assumed shaped array\n\nexample:\n```\n#!SH source fortran.zpp.sh\ninteger:: scalar$(zpp_fort_array_desc 0)\ninteger:: array1d$(zpp_fort_array_desc 1)\ninteger:: array2d$(zpp_fort_array_desc 2)\n```\noutput:\n```\ninteger:: scalar\ninteger:: array1d(:)\ninteger:: array2d(:,:)\n```\n\n### zpp_fort_ptype\n\nFound in `fortran.zpp.sh`\n\nOutputs the type associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\nexample:\n```\n#!SH source fortran.zpp.sh\n!$SH for T in ${ZPP_FORT_TYPES} ; do\n$(zpp_fort_ptype $1)\n!$SH done\n```\nexample output:\n```\nCHARACTER\nCOMPLEX\nCOMPLEX\nINTEGER\nINTEGER\nINTEGER\nINTEGER\nLOGICAL\nREAL\nREAL\n```\n\n### zpp_fort_kind\n\nFound in `fortran.zpp.sh`\n\nOutputs the kind associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\nexample:\n```\n#!SH source fortran.zpp.sh\n!$SH for T in ${ZPP_FORT_TYPES} ; do\n$(zpp_fort_kind $1)\n!$SH done\n```\nexample output:\n```\n1\n4\n8\n1\n2\n4\n8\n1\n4\n8\n```\n\n### zpp_fort_type\n\nFound in `fortran.zpp.sh`\n\nOutputs the full type (with kind included) associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n2. additional attributes for the type\n\nexample:\n```\n#!SH source fortran.zpp.sh\n!$SH for T in ${MY_CHAR_TYPES} ; do\n$(zpp_fort_type $1)\n$(zpp_fort_type $1 \"len=5\")\n!$SH done\n```\nexample output:\n```\nCHARACTER(KIND=1)\nCHARACTER(KIND=1,len=5)\n```\n\n### zpp_fort_sizeof\n\nFound in `fortran.zpp.sh`\n\nOutputs the size in bits associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\n### zpp_fort_io_format\n\nFound in `fortran.zpp.sh`\n\nOutputs an IO descriptor suitable for a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\n### ZPP_HDF5F_TYPES\n\nFound in `hdf5_fortran.zpp.sh`\n\nA list of zpp:typeIDs supported by HDF5.\n\n### hdf5_constant\n\nFound in `hdf5_fortran.zpp.sh`\n\nOutputs the HDF5 type constant associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\nexample:\n```\n#!SH source hdf5_fortran.zpp.sh\n!$SH for T in ${ZPP_HDF5F_TYPES} ; do\n$(hdf5_constant $1)\n!$SH done\n```\nexample output:\n```\nH5T_NATIVE_INTEGER\nH5T_NATIVE_REAL\nH5T_NATIVE_REAL\nH5T_NATIVE_CHARACTER\n```\n\n\n## Command-line interface\n\nZpp basic usage is as follow:\n```\nUsage: zpp [Options...] <source> [<destination>]\n  use `zpp -h' for more info\n\nPreprocesses BASH in-line commands in a source file\n\nOptions:\n  --version        show program's version number and exit\n  -h, --help       show this help message and exit\n  -I DIR           Add DIR to search list for source directives\n  -o FILE          Place the preprocessed code in file FILE.\n  -D OPTION=VALUE  Set the value of OPTION to VALUE\n```\n\n## CMake interface\n\nSupport is provided for using zpp from CMake based projects, but you can use\nit from plain Makefiles too.\n\nThere are two ways you can use zpp from your CMake project:\n* with `add_subdirectory`: include zpp in your project and use it directly from\n  there,\n* with `find_package`: install zpp and use it as an external dependency of your\n  project.\n\n#### CMake subdirectory usage\n\nUsing zpp with `add_subdirectory` is very simple.\nJust copy the `zpp` directory in your source and point to it with\n`add_subdirectory(zpp)`.\nThe `zpp_preprocess` then becomes available to process zpp files.\n\nThis is demonstrated in `example/cmake_subdirectory`.\n\n#### CMake find usage\n\nUsing zpp with `find_package` is no more complex.\nIf zpp is installed, just add a `find_package(zpp REQUIRED)`.\nThe `zpp_preprocess` then becomes available to process zpp files.\n\nThis is demonstrated in `example/cmake_find`.\n\n## GMake usage\n\nUsing zpp from a GNU Makefile is slightly less powerful than from CMake.\nThe types and kinds supported by the Fortran compiler will not be automatically\ndetected.\nPredefined lists of supported types for well known compilers are provided\ninstead.\n\nTo use zpp from a Makefile, include the `share/zpp/zpp.mk` file (either from an\ninstalled location or from a subdirectory in your project).\nYou can then set the `zpp_COMPILER_ID` variable to the compiler you use and\n`.F90` files will be automatically generated from their `.F90.zpp` equivalent.\nThe `zppFLAGS` variable is automatically passed to zpp similarly to `CFLAGS` or\n`CXXFLAGS` for `cc` and `cxx`.\n\nThis is demonstrated in `example/cmake_makefile`.\n\n## Installation\n\nZpp can be installed using the usual python way with `setup.py`.\n```\n./setup.py --help\n```\n\nThe cmake approach is deprecated.\n\n## FAQ\n\nQ. Isn't zpp redundant with assumed type parameters?\n\nA.\nThe assumed type parameters functionality allows to implement part of what can\nbe done with zpp (support for all kinds of a type). However as of 2013 it was\nnot correctly supported on most compilers installed on the supercomputers.\n\nIn addition, many things can be done with zpp but not with assumed type\nparameters, such as support for variable array rank or small variations of the\ncode depending on the kind.\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "bash Fortran pre-processor",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "zpp",
            "package_url": "https://pypi.org/project/zpp/",
            "platform": "",
            "project_url": "https://pypi.org/project/zpp/",
            "project_urls": {
               "Source Code": "https://github.com/pdidev/zpp/"
            },
            "release_url": "https://pypi.org/project/zpp/1.0.4/",
            "requires_dist": [
               "setuptools"
            ],
            "requires_python": "",
            "summary": "a Bash Pre-Processor for Fortran. ZPP is useful in order to build clean Fortran90 interfaces. It allows to generate Fortran code for all types, kinds, and array ranks supported by the compiler.",
            "version": "1.0.4",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Dheepak Krishnamurthy",
            "author_email": "kdheepak89@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# zip [![](https://travis-ci.org/kdheepak/zip.svg?branch=master)](https://travis-ci.org/kdheepak/zip/branches)\n\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/kdheepak/zip",
            "keywords": "",
            "license": "Revised BSD License",
            "maintainer": "",
            "maintainer_email": "",
            "name": "zip",
            "package_url": "https://pypi.org/project/zip/",
            "platform": "",
            "project_url": "https://pypi.org/project/zip/",
            "project_urls": {
               "Homepage": "https://github.com/kdheepak/zip"
            },
            "release_url": "https://pypi.org/project/zip/0.0.2/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Intel Corporation",
            "author_email": "scripting@intel.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "Intended Audience :: Education",
               "Intended Audience :: Other Audience",
               "Intended Audience :: Science/Research",
               "Intended Audience :: System Administrators",
               "License :: Other/Proprietary License",
               "Operating System :: MacOS",
               "Operating System :: Microsoft :: Windows",
               "Operating System :: POSIX",
               "Operating System :: Unix",
               "Topic :: Software Development :: Libraries"
            ],
            "description": "Intel(R) Performance Primitives provides developers with high-quality, production-ready, low-level building blocks for image processing, signal processing, and data processing (data compression and decompression, and cryptography) applications.\n\nOne of many Intel(R) accelerated Python packages and performance library runtimes available on [PyPI](https://software.intel.com/en-us/articles/installing-the-intel-distribution-for-python-and-intel-performance-libraries-with-pip-and), and as part of [Intel(R) Distribution for Python](https://software.intel.com/en-us/distribution-for-python).\n\nFor latest release updates and security notifications, please [subscribe](https://software.intel.com/en-us/forums/intel-distribution-for-python) to the Intel(R) Distribution for Python Community forum.\n\nFree to use and redistribute pursuant to the [Intel Simplified Software License](https://software.intel.com/en-us/license/intel-simplified-software-license).\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://software.intel.com/en-us/articles/empowering-science-with-high-performance-python",
            "keywords": "",
            "license": "Proprietary - Intel",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ipp",
            "package_url": "https://pypi.org/project/ipp/",
            "platform": "",
            "project_url": "https://pypi.org/project/ipp/",
            "project_urls": {
               "Homepage": "https://software.intel.com/en-us/articles/empowering-science-with-high-performance-python"
            },
            "release_url": "https://pypi.org/project/ipp/2019.4.243/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Intel(R) Performance Primitives",
            "version": "2019.4.243",
            "yanked": false,
            "yanked_reason": null
         }
      ],
      "pytz": [
         {
            "author": "Gabriel Alves",
            "author_email": "gabriel.alves@pickcells.bio",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# sx\n#### Framework to manage gRPC-based microservices application",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "https://github.com/itsmealves/sx/releases/download/0.6.0/sx-0.6.0.tar.gz",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/itsmealves/sx",
            "keywords": "sx microservices rpc grpc Framework",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "sx",
            "package_url": "https://pypi.org/project/sx/",
            "platform": "",
            "project_url": "https://pypi.org/project/sx/",
            "project_urls": {
               "Download": "https://github.com/itsmealves/sx/releases/download/0.6.0/sx-0.6.0.tar.gz",
               "Homepage": "https://github.com/itsmealves/sx"
            },
            "release_url": "https://pypi.org/project/sx/0.6.0/",
            "requires_dist": null,
            "requires_python": ">=3.5",
            "summary": "Framework to manage gRPC-based microservices application",
            "version": "0.6.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "chrysn",
            "author_email": "chrysn@fsfe.org",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 3 - Alpha",
               "Intended Audience :: Education",
               "Intended Audience :: Science/Research",
               "License :: OSI Approved :: GNU General Public License (GPL)"
            ],
            "description": "UNKNOWN",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "UNKNOWN",
            "keywords": null,
            "license": "GPL",
            "maintainer": null,
            "maintainer_email": null,
            "name": "si",
            "package_url": "https://pypi.org/project/si/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/si/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "UNKNOWN"
            },
            "release_url": "https://pypi.org/project/si/0.1.1-1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Module to represent SI units",
            "version": "0.1.1-1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "leesoar",
            "author_email": "secure@tom.com",
            "bugtrack_url": null,
            "classifiers": [
               "License :: OSI Approved :: MIT License",
               "Programming Language :: Python :: 3.5",
               "Programming Language :: Python :: 3.6",
               "Programming Language :: Python :: 3.7",
               "Programming Language :: Python :: Implementation :: CPython",
               "Programming Language :: Python :: Implementation :: PyPy"
            ],
            "description": "\nDevelop soon\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://leesoar.com",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ida",
            "package_url": "https://pypi.org/project/ida/",
            "platform": "",
            "project_url": "https://pypi.org/project/ida/",
            "project_urls": {
               "Homepage": "https://leesoar.com"
            },
            "release_url": "https://pypi.org/project/ida/0.0.1/",
            "requires_dist": null,
            "requires_python": ">=3.3.0",
            "summary": "Develop soon",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Xavier Bruhiere",
            "author_email": "xavier.bruhiere@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 2 - Pre-Alpha",
               "Intended Audience :: Science/Research",
               "License :: OSI Approved :: Apache Software License",
               "Natural Language :: English",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2.7",
               "Topic :: Software Development",
               "Topic :: System :: Shells"
            ],
            "description": "python library DNA\n==================\n\n[![Coverage Status](https://coveralls.io/repos/hivetech/dna/badge.png)](https://coveralls.io/r/hivetech/dna)\n\n> Generic python utilities\n\nInstallation\n------------\n\n```console\npip install dna\n```\n\nExample\n-----\n\n```python\nimport dna.utils as utils\nimport dna.logger as logger\n\nlog_setup = logger.setup(level='info', filename='app.log')\nlog = logger.logger(__name__)\nwith log_setup.applicationbound():\n\n    log.info('hello', where='world')\n\n    useless_id = utils.generate_unique_id()\n    useless_name = utils.generate_random_name()\n\n    if utils.docker_check() and utils.is_running('ipyhon'):\n\n        print utils.Version('0.4.1')\n\n        module = utils.dynamic_import('dna.settings', 'LOG')\n        print utils.emphasis(module, align=False)\n\n        print utils.self_ip()\n```",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/hivetech/dna",
            "keywords": null,
            "license": "Apache 2.0",
            "maintainer": null,
            "maintainer_email": null,
            "name": "dna",
            "package_url": "https://pypi.org/project/dna/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/dna/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/hivetech/dna"
            },
            "release_url": "https://pypi.org/project/dna/0.0.7/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Generic python utilities",
            "version": "0.0.7",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Christopher Brown",
            "author_email": "io@henrian.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 2 - Pre-Alpha",
               "License :: OSI Approved :: MIT License",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.6",
               "Programming Language :: Python :: 2.7",
               "Topic :: Software Development :: Libraries :: Python Modules",
               "Topic :: System :: Archiving :: Packaging",
               "Topic :: System :: Filesystems"
            ],
            "description": "Python (package) installation\n-----------------------------\n\nGetting started from `PyPI <https://pypi.python.org/pypi/pi/>`__:\n\n::\n\n    easy_install pi\n\n`Whence easy\\_install? <#setuptools>`__\n\nCommands\n--------\n\n-  Uninstall package named \"pip\":\n\n   ::\n\n       pi uninstall pip\n\n-  Install package named \"filesequence\":\n\n   ::\n\n       pi install filesequence\n\n-  List paths that Python searches for imported modules:\n\n   ::\n\n       pi paths\n\n-  List installed packages:\n\n   ::\n\n       pi list\n\nTesting\n-------\n\nContinuous integration:\n\n|Travis CI Build Status|\n\nOr run tests locally:\n\n::\n\n    nosetests --with-doctest\n\nRelated\n~~~~~~~\n\n-  http://guide.python-distribute.org/creation.html\n-  `distribute/pkg\\_resources\n   docs <http://pythonhosted.org/distribute/pkg_resources.html>`__\n-  standard library\n   ```site`` <http://docs.python.org/2/library/site.html>`__\n-  standard library `environment\n   variables <http://docs.python.org/2/using/cmdline.html#environment-variables>`__\n\nSetuptools\n~~~~~~~~~~\n\n``pi`` does not yet completely replace\n`setuptools <https://pypi.python.org/pypi/setuptools>`__. You may need\nto install it first:\n\n+----------+-----------------------------------------+\n| Distro   | Package manager command                 |\n+==========+=========================================+\n| Ubuntu   | ``apt-get install python-setuptools``   |\n+----------+-----------------------------------------+\n| Mac      | built-in                                |\n+----------+-----------------------------------------+\n| Arch     | ``pacman -S python-setuptools``         |\n+----------+-----------------------------------------+\n| CentOS   | ``yum install python-setuptools``       |\n+----------+-----------------------------------------+\n\nLicense\n-------\n\nCopyright (c) 2013 Christopher Brown. `MIT\nLicensed <https://raw.github.com/chbrown/pi/master/LICENSE>`__.\n\n.. |Travis CI Build Status| image:: https://travis-ci.org/chbrown/pi.png?branch=master\n   :target: https://travis-ci.org/chbrown/pi",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/chbrown/pi",
            "keywords": null,
            "license": "Copyright (c) 2013 Christopher Brown\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.",
            "maintainer": null,
            "maintainer_email": null,
            "name": "pi",
            "package_url": "https://pypi.org/project/pi/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/pi/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/chbrown/pi"
            },
            "release_url": "https://pypi.org/project/pi/0.1.2/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Simpler python package installation",
            "version": "0.1.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ip",
            "package_url": "https://pypi.org/project/ip/",
            "platform": "",
            "project_url": "https://pypi.org/project/ip/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/ip/0.0.1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Vitalii Vanovschi",
            "author_email": "support@parallelpython.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Natural Language :: English",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Topic :: Software Development",
               "Topic :: System :: Distributed Computing"
            ],
            "description": "Parallel Python module (PP) provides an easy and efficient way to create parallel-enabled applications for SMP computers and clusters. PP module features cross-platform portability and dynamic load balancing. Thus application written with PP will parallelize efficiently even on heterogeneous and multi-platform clusters (including clusters running other application with variable CPU loads). Visit http://www.parallelpython.com for further information.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "http://www.parallelpython.com/downloads/pp/pp-1.6.5.zip",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "http://www.parallelpython.com",
            "keywords": null,
            "license": "BSD-like",
            "maintainer": null,
            "maintainer_email": null,
            "name": "pp",
            "package_url": "https://pypi.org/project/pp/",
            "platform": "Windows,Linux,Unix",
            "project_url": "https://pypi.org/project/pp/",
            "project_urls": {
               "Download": "http://www.parallelpython.com/downloads/pp/pp-1.6.5.zip",
               "Homepage": "http://www.parallelpython.com"
            },
            "release_url": "https://pypi.org/project/pp/1.6.5/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Parallel and distributed programming for Python",
            "version": "1.6.5",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Marcus Donnelly",
            "author_email": "marcus.k.donnelly@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "Intended Audience :: Science/Research",
               "License :: OSI Approved :: BSD License",
               "Programming Language :: Python :: 3",
               "Topic :: Scientific/Engineering"
            ],
            "description": "",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "Oceanography,Utilities",
            "license": "BSD",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ocutils",
            "package_url": "https://pypi.org/project/ocutils/",
            "platform": "",
            "project_url": "https://pypi.org/project/ocutils/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/ocutils/1.1.1/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Utility functions for oceanography related work",
            "version": "1.1.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Kiana Alessandra V. Villaera",
            "author_email": "kiana.villaera@senti.com.ph",
            "bugtrack_url": null,
            "classifiers": [
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 3"
            ],
            "description": "Contains everything you might need to perform essential data center functions\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/K-Winkles/dcutils",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dcutils",
            "package_url": "https://pypi.org/project/dcutils/",
            "platform": "",
            "project_url": "https://pypi.org/project/dcutils/",
            "project_urls": {
               "Homepage": "https://github.com/K-Winkles/dcutils"
            },
            "release_url": "https://pypi.org/project/dcutils/0.6/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "A simple package for data center utilities",
            "version": "0.6",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Mike Kazantsev",
            "author_email": "mk.fraggod@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Intended Audience :: Developers",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3.5",
               "Topic :: Software Development",
               "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description": "pretty-yaml (or pyaml)\n======================\n\nPyYAML-based python module to produce pretty and readable YAML-serialized data.\n\nThis module is for serialization only, see `ruamel.yaml`_ module for literate\nYAML parsing (keeping track of comments, spacing, line/column numbers of values, etc).\n\n[note: to dump stuff parsed by ruamel.yaml with this module, use only ``YAML(typ='safe')`` there]\n\n.. contents::\n  :backlinks: none\n\n\nWarning\n-------\n\nPrime goal of this module is to produce human-readable output that can be easily\nmanipulated and re-used, but maybe with some occasional caveats.\n\nOne good example of such \"caveat\" is that e.g. ``{'foo': '123'}`` will serialize\nto ``foo: 123``, which for PyYAML would be a bug, as 123 will then be read back\nas an integer from that, but here it's a feature.\n\nSo please do not rely on the thing to produce output that can always be\ndeserialized exactly to what was exported, at least - use PyYAML (e.g. with\noptions from the next section) for that.\n\n\nWhat this module does and why\n-----------------------------\n\nYAML is generally nice and easy format to read *if* it was written by humans.\n\nPyYAML can a do fairly decent job of making stuff readable, and the best\ncombination of parameters for such output that I've seen so far is probably this one::\n\n  >>> m = [123, 45.67, {1: None, 2: False}, u'some text']\n  >>> data = dict(a=u'asldnsa\\nasldpáknsa\\n', b=u'whatever text', ma=m, mb=m)\n  >>> yaml.safe_dump(data, sys.stdout, allow_unicode=True, default_flow_style=False)\n  a: 'asldnsa\n\n    asldpáknsa\n\n    '\n  b: whatever text\n  ma: &id001\n  - 123\n  - 45.67\n  - 1: null\n    2: false\n  - some text\n  mb: *id001\n\npyaml tries to improve on that a bit, with the following tweaks:\n\n* Most human-friendly representation options in PyYAML (that I know of) get\n  picked as defaults.\n\n* Does not dump \"null\" values, if possible, replacing these with just empty\n  strings, which have the same meaning but reduce visual clutter and are easier\n  to edit.\n\n* Dicts, sets, OrderedDicts, defaultdicts, namedtuples, etc are representable\n  and get sorted on output (OrderedDicts and namedtuples keep their ordering),\n  so that output would be as diff-friendly as possible, and not arbitrarily\n  depend on python internals.\n\n  It appears that at least recent PyYAML versions also do such sorting for\n  python dicts.\n\n* List items get indented, as they should be.\n\n* bytestrings that can't be auto-converted to unicode raise error, as yaml has\n  no \"binary bytes\" (i.e. unix strings) type.\n\n* Attempt is made to pick more readable string representation styles, depending\n  on the value, e.g.::\n\n    >>> yaml.safe_dump(cert, sys.stdout)\n    cert: '-----BEGIN CERTIFICATE-----\n\n      MIIH3jCCBcagAwIBAgIJAJi7AjQ4Z87OMA0GCSqGSIb3DQEBCwUAMIHBMRcwFQYD\n\n      VQQKFA52YWxlcm9uLm5vX2lzcDEeMBwGA1UECxMVQ2VydGlmaWNhdGUgQXV0aG9y\n    ...\n\n    >>> pyaml.p(cert):\n    cert: |\n      -----BEGIN CERTIFICATE-----\n      MIIH3jCCBcagAwIBAgIJAJi7AjQ4Z87OMA0GCSqGSIb3DQEBCwUAMIHBMRcwFQYD\n      VQQKFA52YWxlcm9uLm5vX2lzcDEeMBwGA1UECxMVQ2VydGlmaWNhdGUgQXV0aG9y\n    ...\n\n* \"force_embed\" option to avoid having &id stuff scattered all over the output\n  (which might be beneficial in some cases, hence the option).\n\n* \"&id\" anchors, if used, get labels from the keys they get attached to,\n  not just use meaningless enumerators.\n\n* \"string_val_style\" option to only apply to strings that are values, not keys,\n  i.e::\n\n    >>> pyaml.p(data, string_val_style='\"')\n    key: \"value\\nasldpáknsa\\n\"\n    >>> yaml.safe_dump(data, sys.stdout, allow_unicode=True, default_style='\"')\n    \"key\": \"value\\nasldpáknsa\\n\"\n\n* \"sort_dicts=False\" option to leave dict item ordering to python, and not\n  force-sort them in yaml output, which can be important for python 3.6+ where\n  they retain ordering info.\n\n* Has an option to add vertical spacing (empty lines) between keys on different\n  depths, to make output much more seekable.\n\nResult for the (rather meaningless) example above (without any additional\ntweaks)::\n\n  >>> pyaml.p(data)\n  a: |\n    asldnsa\n    asldpáknsa\n  b: 'whatever text'\n  ma: &ma\n    - 123\n    - 45.67\n    - 1:\n      2: false\n    - 'some text'\n  mb: *ma\n\n----------\n\nExtended example::\n\n  >>> pyaml.dump(conf, sys.stdout, vspacing=[2, 1]):\n  destination:\n\n    encoding:\n      xz:\n        enabled: true\n        min_size: 5120\n        options:\n        path_filter:\n          - \\.(gz|bz2|t[gb]z2?|xz|lzma|7z|zip|rar)$\n          - \\.(rpm|deb|iso)$\n          - \\.(jpe?g|gif|png|mov|avi|ogg|mkv|webm|mp[34g]|flv|flac|ape|pdf|djvu)$\n          - \\.(sqlite3?|fossil|fsl)$\n          - \\.git/objects/[0-9a-f]+/[0-9a-f]+$\n\n    result:\n      append_to_file:\n      append_to_lafs_dir:\n      print_to_stdout: true\n\n    url: http://localhost:3456/uri\n\n\n  filter:\n    - /(CVS|RCS|SCCS|_darcs|\\{arch\\})/$\n    - /\\.(git|hg|bzr|svn|cvs)(/|ignore|attributes|tags)?$\n    - /=(RELEASE-ID|meta-update|update)$\n\n\n  http:\n\n    ca_certs_files: /etc/ssl/certs/ca-certificates.crt\n\n    debug_requests: false\n\n    request_pool_options:\n      cachedConnectionTimeout: 600\n      maxPersistentPerHost: 10\n      retryAutomatically: true\n\n\n  logging:\n\n    formatters:\n      basic:\n        datefmt: '%Y-%m-%d %H:%M:%S'\n        format: '%(asctime)s :: %(name)s :: %(levelname)s: %(message)s'\n\n    handlers:\n      console:\n        class: logging.StreamHandler\n        formatter: basic\n        level: custom\n        stream: ext://sys.stderr\n\n    loggers:\n      twisted:\n        handlers:\n          - console\n        level: 0\n\n    root:\n      handlers:\n        - console\n      level: custom\n\nNote that unless there are many moderately wide and deep trees of data, which\nare expected to be read and edited by people, it might be preferrable to\ndirectly use PyYAML regardless, as it won't introduce another (rather pointless\nin that case) dependency and a point of failure.\n\n\nSome Tricks\n-----------\n\n* Pretty-print any yaml or json (yaml subset) file from the shell::\n\n    % python -m pyaml /path/to/some/file.yaml\n    % curl -s https://www.githubstatus.com/api/v2/summary.json | python -m pyaml\n\n* Process and replace json/yaml file in-place::\n\n    % python -m pyaml -r file-with-json.data\n\n* Easier \"debug printf\" for more complex data (all funcs below are aliases to\n  same thing)::\n\n    pyaml.p(stuff)\n    pyaml.pprint(my_data)\n    pyaml.pprint('----- HOW DOES THAT BREAKS!?!?', input_data, some_var, more_stuff)\n    pyaml.print(data, file=sys.stderr) # needs \"from __future__ import print_function\"\n\n* Force all string values to a certain style (see info on these in\n  `PyYAML docs`_)::\n\n    pyaml.dump(many_weird_strings, string_val_style='|')\n    pyaml.dump(multiline_words, string_val_style='>')\n    pyaml.dump(no_want_quotes, string_val_style='plain')\n\n  Using ``pyaml.add_representer()`` (note \\*p\\*yaml) as suggested in\n  `this SO thread`_ (or `github-issue-7`_) should also work.\n\n* Control indent and width of the results::\n\n    pyaml.dump(wide_and_deep, indent=4, width=120)\n\n  These are actually keywords for PyYAML Emitter (passed to it from Dumper),\n  see more info on these in `PyYAML docs`_.\n\n* Dump multiple yaml documents into a file: ``pyaml.dump_all([data1, data2, data3], dst_file)``\n\n  explicit_start=True is implied, unless explicit_start=False is passed.\n\n.. _PyYAML docs: http://pyyaml.org/wiki/PyYAMLDocumentation#Scalars\n.. _this SO thread: http://stackoverflow.com/a/7445560\n.. _github-issue-7: https://github.com/mk-fg/pretty-yaml/issues/7\n\n\nInstallation\n------------\n\nIt's a regular package for Python (3.x or 2.x).\n\nModule uses PyYAML_ for processing of the actual YAML files and should pull it\nin as a dependency.\n\nDependency on unidecode_ module is optional and should only be necessary if\nsame-id objects or recursion is used within serialized data.\n\nBe sure to use python3/python2, pip3/pip2, easy_install-... binaries below,\nbased on which python version you want to install the module for, if you have\nseveral on the system (as is norm these days for py2-py3 transition).\n\nUsing pip_ is the best way::\n\n  % pip install pyaml\n\n(add --user option to install into $HOME for current user only)\n\nOr, if you don't have \"pip\" command::\n\n  % python -m ensurepip\n  % python -m pip install --upgrade pip\n  % python -m pip install pyaml\n\n(same suggestion wrt \"install --user\" as above)\n\nOn a very old systems, one of these might work::\n\n  % curl https://bootstrap.pypa.io/get-pip.py | python\n  % pip install pyaml\n\n  % easy_install pyaml\n\n  % git clone --depth=1 https://github.com/mk-fg/pretty-yaml\n  % cd pretty-yaml\n  % python setup.py install\n\n(all of install-commands here also have --user option,\nsee also `pip docs \"installing\" section`_)\n\nCurrent-git version can be installed like this::\n\n  % pip install 'git+https://github.com/mk-fg/pretty-yaml#egg=pyaml'\n\nNote that to install stuff to system-wide PATH and site-packages (without\n--user), elevated privileges (i.e. root and su/sudo) are often required.\n\nUse \"...install --user\", `~/.pydistutils.cfg`_ or virtualenv_ to do unprivileged\ninstalls into custom paths.\n\nMore info on python packaging can be found at `packaging.python.org`_.\n\n.. _ruamel.yaml: https://bitbucket.org/ruamel/yaml/\n.. _PyYAML: http://pyyaml.org/\n.. _unidecode: http://pypi.python.org/pypi/Unidecode\n.. _pip: http://pip-installer.org/\n.. _pip docs \"installing\" section: http://www.pip-installer.org/en/latest/installing.html\n.. _~/.pydistutils.cfg: http://docs.python.org/install/index.html#distutils-configuration-files\n.. _virtualenv: http://pypi.python.org/pypi/virtualenv\n.. _packaging.python.org: https://packaging.python.org/installing/\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/mk-fg/pretty-yaml",
            "keywords": "yaml serialization pretty print format human readable readability",
            "license": "WTFPL",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyaml",
            "package_url": "https://pypi.org/project/pyaml/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyaml/",
            "project_urls": {
               "Homepage": "https://github.com/mk-fg/pretty-yaml"
            },
            "release_url": "https://pypi.org/project/pyaml/20.4.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "PyYAML-based module to produce pretty and readable YAML-serialized data",
            "version": "20.4.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "haogege",
            "author_email": "1394168335@qq.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# pyyml\nUse python in yaml\n## 基本使用\n在python中使用：\n```python\nfrom pyyml import load\n\nwith open('conf.yml') as f:\n    raw_conf = f.read()\nconfig = load(raw_conf)\nprint(config)\n```\n在yaml中 `${...}` 中的内容将会被python执行：\n\nyaml内容\n```yaml\nsum: ${1 + 1}\n```\n实际解析内容\n```python\n{'sum': 2}\n```\n通过在文件开头第一行注释来导入所需的包：\n\n```yaml\n# libs:['os', 'os.path:path', 'this']\n```\n通过 [包名]:[别名] 取别名导入包\n\n`'os.path:path' 等同于 python 中的 from os import path`\n\n例如yaml文件内容\n```yaml\n# libs:['os', 'os.path:path', 'this']\nos_name: ${os.name}\nbase_dir: ${path.abspath(path.dirname(__file__))}\n```\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/q1394168335/pyyml",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyyml",
            "package_url": "https://pypi.org/project/pyyml/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyyml/",
            "project_urls": {
               "Homepage": "https://github.com/q1394168335/pyyml"
            },
            "release_url": "https://pypi.org/project/pyyml/0.0.2/",
            "requires_dist": [
               "pyyaml (>=3.13)"
            ],
            "requires_python": "",
            "summary": "Use python in yaml",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Michael Foord",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "rs",
            "package_url": "https://pypi.org/project/rs/",
            "platform": "",
            "project_url": "https://pypi.org/project/rs/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/rs/0.0/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "",
            "version": "0.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Ramses",
            "author_email": "hello@ramses.tech",
            "bugtrack_url": null,
            "classifiers": [
               "Framework :: Pyramid",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.4",
               "Programming Language :: Python :: 3.5",
               "Topic :: Internet :: WWW/HTTP",
               "Topic :: Internet :: WWW/HTTP :: WSGI :: Application"
            ],
            "description": "# `Ra`\n[![Build Status](https://travis-ci.org/ramses-tech/ra.svg?branch=master)](https://travis-ci.org/ramses-tech/ra)\n[![Documentation](https://readthedocs.org/projects/ra/badge/?version=stable)](http://ra.readthedocs.org)\n\nRa is a test suite generator and helper library for testing APIs described\nin [RAML](http://raml.org/).\n\nOut of the box, Ra provides a basic, automated test suite to test the routes\ndeclared in the RAML document. It provides test helpers for augmenting these\nwith custom tests to test application-specific logic, side effects, etc.\n\nRa is primarily designed to provide testing support for\n[ramses](http://github.com/ramses-tech/ramses) and\n[nefertari](http://github.com/ramses-tech/nefertari) applications, but can\nbe used with any WSGI-conformant, RAML-described API.\n\nIt currently depends on pytest but may be adapted for other test frameworks\nin the future. It works best using WebTest but doesn't require it.\n\n## Name\n\nRa was the god of the sun, the most important god in ancient Egypt.\n\n\n## Try it (dev)\n\nRun the test suite:\n\n```bash\n    $ pip install -r requirements.txt\n    $ py.test\n```\n\nCheck out the example:\n\n```bash\n    $ cd examples/ramses-test\n    $ pip install -r requirements.txt\n    $ py.test\n```\n\nThe example RAML at `examples/ramses-test/api.raml` and the test file\n`examples/ramses-test/tests/test_api.py` should be helpful to reference.\n\nSee the docs in `docs/`, and the `api.raml` and `tests/test_api.py` in\n`tests/apps/ramses_test`",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/ramses-tech/ra",
            "keywords": "web raml",
            "license": "UNKNOWN",
            "maintainer": null,
            "maintainer_email": null,
            "name": "ra",
            "package_url": "https://pypi.org/project/ra/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/ra/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/ramses-tech/ra"
            },
            "release_url": "https://pypi.org/project/ra/0.2.0/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Test RAML API definition",
            "version": "0.2.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Shoumik Palkar",
            "author_email": "shoumik@cs.stanford.edu",
            "bugtrack_url": null,
            "classifiers": [
               "License :: OSI Approved :: BSD License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 3"
            ],
            "description": "## split annotations\n\nThis package contains the Python implementation of [split annotations](), a system for optimizing applications\nthat combine many data-intensive library functions. See some useful links below.\n\n* [Documentation for this package](https://www.weld.rs/split-annotations/docs/)\n* [GitHub repository](https://www.github.com/weld-project/split-annotations)\n* [SOSP 2019 Paper describing the system](https://shoumik.xyz/static/papers/mozart-sosp19final.pdf)\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://www.github.com/weld-project/split-annotations",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "sa",
            "package_url": "https://pypi.org/project/sa/",
            "platform": "",
            "project_url": "https://pypi.org/project/sa/",
            "project_urls": {
               "Homepage": "https://www.github.com/weld-project/split-annotations"
            },
            "release_url": "https://pypi.org/project/sa/0.0.4/",
            "requires_dist": [
               "numpy",
               "pandas",
               "scipy",
               "sharedmem"
            ],
            "requires_python": ">=3.6",
            "summary": "Python split annotations package",
            "version": "0.0.4",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Mitch Garnaat",
            "author_email": "mitch@garnaat.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.6",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.3",
               "Programming Language :: Python :: 3.4",
               "Topic :: Internet"
            ],
            "description": "####\nboto\n####\nboto 2.49.0\n\nReleased: 11-July-2018\n\n.. image:: https://travis-ci.org/boto/boto.svg?branch=develop\n        :target: https://travis-ci.org/boto/boto\n\n.. image:: https://pypip.in/d/boto/badge.svg\n        :target: https://pypi.python.org/pypi/boto/\n\n******\nBoto 3\n******\n\n`Boto3 <https://github.com/boto/boto3>`__, the next version of Boto, is now\nstable and recommended for general use.  It can be used side-by-side with Boto\nin the same project, so it is easy to start using Boto3 in your existing\nprojects as well as new projects. Going forward, API updates and all new\nfeature work will be focused on Boto3.\n\nTo assist users who still depend on Boto and cannot immediately switch over, we\nwill be triaging and addressing critical issues and PRs in Boto in the short\nterm. As more users make the switch to Boto3, we expect to reduce our\nmaintenance involvement over time. If we decide on a cutoff date or any\nsignificant changes to our maintenance plan, we will make pre-announcements\nwell ahead of schedule to allow ample time for our users to adapt/migrate.\n\n\n************\nIntroduction\n************\n\nBoto is a Python package that provides interfaces to Amazon Web Services.\nCurrently, all features work with Python 2.6 and 2.7. Work is under way to\nsupport Python 3.3+ in the same codebase. Modules are being ported one at\na time with the help of the open source community, so please check below\nfor compatibility with Python 3.3+.\n\nTo port a module to Python 3.3+, please view our `Contributing Guidelines`_\nand the `Porting Guide`_. If you would like, you can open an issue to let\nothers know about your work in progress. Tests **must** pass on Python\n2.6, 2.7, 3.3, and 3.4 for pull requests to be accepted.\n\n\n********\nServices\n********\n\nAt the moment, boto supports:\n\n* Compute\n\n  * Amazon Elastic Compute Cloud (EC2) (Python 3)\n  * Amazon Elastic Map Reduce (EMR) (Python 3)\n  * AutoScaling (Python 3)\n  * Amazon Kinesis (Python 3)\n  * AWS Lambda (Python 3)\n  * Amazon EC2 Container Service (Python 3)\n\n* Content Delivery\n\n  * Amazon CloudFront (Python 3)\n\n* Database\n\n  * Amazon Relational Data Service (RDS)\n  * Amazon DynamoDB (Python 3)\n  * Amazon SimpleDB (Python 3)\n  * Amazon ElastiCache (Python 3)\n  * Amazon Redshift (Python 3)\n\n* Deployment and Management\n\n  * AWS Elastic Beanstalk (Python 3)\n  * AWS CloudFormation (Python 3)\n  * AWS Data Pipeline (Python 3)\n  * AWS Opsworks (Python 3)\n  * AWS CloudTrail (Python 3)\n  * AWS CodeDeploy (Python 3)\n\n* Administration & Security\n\n  * AWS Identity and Access Management (IAM) (Python 3)\n  * AWS Key Management Service (KMS) (Python 3)\n  * AWS Config (Python 3)\n  * AWS CloudHSM (Python 3)\n\n* Application Services\n\n  * Amazon CloudSearch (Python 3)\n  * Amazon CloudSearch Domain (Python 3)\n  * Amazon Elastic Transcoder (Python 3)\n  * Amazon Simple Workflow Service (SWF) (Python 3)\n  * Amazon Simple Queue Service (SQS) (Python 3)\n  * Amazon Simple Notification Server (SNS) (Python 3)\n  * Amazon Simple Email Service (SES) (Python 3)\n  * Amazon Cognito Identity (Python 3)\n  * Amazon Cognito Sync (Python 3)\n  * Amazon Machine Learning (Python 3)\n\n* Monitoring\n\n  * Amazon CloudWatch (EC2 Only) (Python 3)\n  * Amazon CloudWatch Logs (Python 3)\n\n* Networking\n\n  * Amazon Route53 (Python 3)\n  * Amazon Route 53 Domains (Python 3)\n  * Amazon Virtual Private Cloud (VPC) (Python 3)\n  * Elastic Load Balancing (ELB) (Python 3)\n  * AWS Direct Connect (Python 3)\n\n* Payments and Billing\n\n  * Amazon Flexible Payment Service (FPS)\n\n* Storage\n\n  * Amazon Simple Storage Service (S3) (Python 3)\n  * Amazon Glacier (Python 3)\n  * Amazon Elastic Block Store (EBS)\n  * Google Cloud Storage\n\n* Workforce\n\n  * Amazon Mechanical Turk\n\n* Other\n\n  * Marketplace Web Services (Python 3)\n  * AWS Support (Python 3)\n\nThe goal of boto is to support the full breadth and depth of Amazon\nWeb Services.  In addition, boto provides support for other public\nservices such as Google Storage in addition to private cloud systems\nlike Eucalyptus, OpenStack and Open Nebula.\n\nBoto is developed mainly using Python 2.6.6 and Python 2.7.3 on Mac OSX\nand Ubuntu Maverick.  It is known to work on other Linux distributions\nand on Windows.  Most of Boto requires no additional libraries or packages\nother than those that are distributed with Python.  Efforts are made\nto keep boto compatible with Python 2.5.x but no guarantees are made.\n\n************\nInstallation\n************\n\nInstall via `pip`_:\n\n::\n\n    $ pip install boto\n\nInstall from source:\n\n::\n\n    $ git clone git://github.com/boto/boto.git\n    $ cd boto\n    $ python setup.py install\n\n**********\nChangeLogs\n**********\n\nTo see what has changed over time in boto, you can check out the\nrelease notes at `http://docs.pythonboto.org/en/latest/#release-notes`\n\n***************************\nFinding Out More About Boto\n***************************\n\nThe main source code repository for boto can be found on `github.com`_.\nThe boto project uses the `gitflow`_ model for branching.\n\n`Online documentation`_ is also available. The online documentation includes\nfull API documentation as well as Getting Started Guides for many of the boto\nmodules.\n\nBoto releases can be found on the `Python Cheese Shop`_.\n\nJoin our IRC channel `#boto` on FreeNode.\nWebchat IRC channel: http://webchat.freenode.net/?channels=boto\n\nJoin the `boto-users Google Group`_.\n\n*************************\nGetting Started with Boto\n*************************\n\nYour credentials can be passed into the methods that create\nconnections.  Alternatively, boto will check for the existence of the\nfollowing environment variables to ascertain your credentials:\n\n**AWS_ACCESS_KEY_ID** - Your AWS Access Key ID\n\n**AWS_SECRET_ACCESS_KEY** - Your AWS Secret Access Key\n\nCredentials and other boto-related settings can also be stored in a\nboto config file.  See `this`_ for details.\n\n.. _Contributing Guidelines: https://github.com/boto/boto/blob/develop/CONTRIBUTING\n.. _Porting Guide: http://boto.readthedocs.org/en/latest/porting_guide.html\n.. _pip: http://www.pip-installer.org/\n.. _release notes: https://github.com/boto/boto/wiki\n.. _github.com: http://github.com/boto/boto\n.. _Online documentation: http://docs.pythonboto.org\n.. _Python Cheese Shop: http://pypi.python.org/pypi/boto\n.. _this: http://docs.pythonboto.org/en/latest/boto_config_tut.html\n.. _gitflow: http://nvie.com/posts/a-successful-git-branching-model/\n.. _neo: https://github.com/boto/boto/tree/neo\n.. _boto-users Google Group: https://groups.google.com/forum/?fromgroups#!forum/boto-users\n\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/boto/boto/",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "boto",
            "package_url": "https://pypi.org/project/boto/",
            "platform": "Posix; MacOS X; Windows",
            "project_url": "https://pypi.org/project/boto/",
            "project_urls": {
               "Homepage": "https://github.com/boto/boto/"
            },
            "release_url": "https://pypi.org/project/boto/2.49.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Amazon Web Services Library",
            "version": "2.49.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Hadi Asghari",
            "author_email": "hd.asghari@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 3",
               "Topic :: Software Development :: Libraries :: Python Modules",
               "Topic :: System :: Networking"
            ],
            "description": "pyasn\n=====\n\n.. image:: https://pypip.in/v/pyasn/badge.png\n   :target: https://pypi.python.org/pypi/pyasn\n\n.. image:: https://pypip.in/d/pyasn/badge.png\n   :target: https://pypi.python.org/pypi/pyasn\n\n\n**pyasn** is a Python extension module that enables very fast IP address to Autonomous System Number lookups.\nCurrent state and Historical lookups can be done, based on the MRT/RIB BGP archive used as input.\n\n*pyasn* is different from other ASN lookup tools in that it provides **offline** and **historical** lookups.\nIt provides utility scripts for users to build their own lookup databases based on any MRT/RIB archive.\nThis makes *pyasn* much faster than online dig/whois/json lookups.\n\nThe module is written in C and Python, and cross-compiles on Linux and Windows. Underneath, it uses a radix tree\ndata structure for storage of IP addresses. In the current version, it borrows code from *py-radix* to support\nboth IPV4 and IPV6 network prefixes. The current release is a beta. Compared to the previous version, it provides\nsupport for Python 2 and 3; adds new functionality, performance improvements, and unit-tests.\n\n*pyasn* is developed and maintained by researchers at the Economics of Cybersecurity research group at Delft\nUniversity of Technology (http://econsec.tbm.tudlft.nl). The package is used on an almost daily basis and bugs\nare fixed pretty quickly.  The package is largely developed and maintained by Hadi Asghari and Arman Noroozian.\nPlease report any bugs via GitHub (https://github.com/hadiasghari/pyasn) or email the developers.\n\n\nInstallation\n============\nInstallation is a breeze via pip: ::\n\n    pip install pyasn --pre\n\nOr with the standard Python: ::\n\n    python setup.py build\n    python setup.py install --record log\n\nYou will need to have pip, setuptools and build essentials installed if you build the package manually. On\nUbuntu/Debian you can get them using the following command: ::\n\n    sudo apt-get install python-pip python-dev build-essential\n\nBuilding the C module on Windows, using either pip or from source, requires Microsoft Visual C++ to be installed.\npyasn has been tested using Visual C++ Express 2010, available freely from Microsoft's website, on both the\nofficial Python 3.4 release and Miniconda3. Other versions of Python, Visual Studio, and Cygwin could also work\nwith minor modifications.\n\nWe plan to release *pyasn* packages to major Linux repositories once it is out of beta.\n\n\nUsage\n=====\nA simple example that demonstrates most of the features: ::\n\n    import pyasn\n\n    # Initialize module and load IP to ASN database\n    # the sample database can be downloaded or built - see below\n    asndb = pyasn.pyasn('ipasn_20140513.dat')\n\n    asndb.lookup('8.8.8.8')\n    # should return: (15169, '8.8.8.0/24'), the origin AS, and the BGP prefix it matches\n\n    asndb.get_as_prefixes(1128)\n    # returns ['130.161.0.0/16', '131.180.0.0/16', '145.94.0.0/16'], TU-Delft prefixes\n\n\nIPASN Data Files\n================\nIPASN data files are a long list of prefixes used to lookup AS number for IPs. An excerpt from such a file looks\nlike this: ::\n\n    ; IP-ASN32-DAT file\n    ; Original file : <Path to a rib file>\n    ; Converted on  : Tue May 13 22:03:05 2014\n    ; CIDRs         : 512490\n    ;\n    1.0.0.0/24  15169\n    1.0.128.0/17        9737\n    1.0.128.0/18        9737\n    1.0.128.0/19        9737\n    1.0.129.0/24        23969\n    ...\n\nIPASN data files can be created by downloading MRT/RIB BGP archives from Routeviews (or similar sources),\nand parsing them using provided scripts that tail the BGP AS-Path. This can be done simply as follows: ::\n\n    pyasn_util_download.py --latest\n    pyasn_util_convert.py --single <Downloaded RIB File> <ipasn_db_file_name>\n\n\n**NOTE:** These scripts are by default installed to ``/usr/local/bin`` and can be executed directly. If you installed\nthe package to a user directory, these scripts will not be on the path and you will have to invoke them by navigating\nto the folder in which they have been copied (e.g. ``~/.local/bin``).\n\nWe also provide download links to a large number of previously generated IPASN data files. These are based on\nweekly  snapshots of the Routeviews data from 2005-2015, accessible here:\nhttp://data.3tu.nl/repository/uuid:d4d23b8e-2077-4592-8b47-cb476ad16e12\n\n**New in v1.6:** To save disk space, you can gzip IPASN data files. The load time will be slighlty longer.\n\n\nPerformance Tip\n===============\nInitial loading of a IPASN data file is the most heavy operation of the package. For fast lookups using multiple\nIPASN data files, for instance for historical lookups on multiple dates, we recommend caching of loaded data files\nfor better performance.\n\n\nUninstalling pyasn\n==================\nYou can remove *pyasn* as follows: ::\n\n    pip uninstall pyasn\n\nIf you built and installed the package your self use the recorded log to remove the installed files.\n\n**Removing PyASN version 1.2**: *pyasn* v1.5/1.6 and v1.2 can be installed side by side (due to lower-cased package\nname). To avoid mistakes, you can uninstall the old **PyASN** by deleting the following files from your Python\ninstallation: ::\n\n    PYTHONDIR/dist-packages/PyASN.so\n    PYTHONDIR/dist-packages/PyASN-1.2.egg-info\n\n\nPackage Structure\n=================\nThe main portions of the directory tree are as follows: ::\n\n    .\n    ├── pyasn/__init__.py       # Python code of the main pyasn module\n    ├── pyasn/pyasn_radix.c     # C extension code (Python RADIX module with bulk load)\n    ├── pyasn/_radix/*          # C extension code (Based on original RADIX code from MRTd)\n    ├── pyasn/mrtx.py           # python module used to convert MRT files to pyasn DB files\n    ├── pyasn-utils/*.py        # Scripts to download & convert BGP MRT dumps to IPASN databases\n    ├── data/                   # Test Resources and some sample DBs to use\n    ├── tests/                  # Tests\n    └── setup.py                # Standard setup.py for installation/testing/etc.\n\n\n\nTesting pyasn Sources\n=====================\nA limited number of unit tests are provided in the ``tests/`` directory when downlading the sources. They can be\nrun with the following command: ::\n\n    python setup.py test\n\nThis beta release has been tested under python version 2.6, 2.7, 3.3, 3.4 and 3.5. We appreciate contributions towards\ntesting *pyasn*!\n\n**New in v1.6:** pyasn_util_convert.py offers a '--dump-screen' option which shows the MRT/RIB archive contents and\nthe chosen origin-AS.\n\n\nLicense & Acknowledgments\n=========================\n*pyasn* is licensed under the MIT license.\n\nIt extends code from py-radix (Michael J. Schultz and Damien Miller),  and improves upon it in several ways, for\ninstance in lowering memory usage and adding bulk prefix/origin load. The underlying radix tree implementation is\ntaken (and modified) from MRTd. These are all subject to their respective licenses.  Please see the LICENSE file\nfor details.\n\nThanks to Dr. Chris Lee (of Shadowserver) for proposing the use of radix trees.\n\nA handful of GitHub developers have contributed features and bug fixes to the latest releases.\nMany thanks to all of them.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": null,
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/hadiasghari/pyasn",
            "keywords": "ip asn autonomous system bgp whois prefix radix python routing networking",
            "license": "MIT",
            "maintainer": null,
            "maintainer_email": null,
            "name": "pyasn",
            "package_url": "https://pypi.org/project/pyasn/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/pyasn/",
            "project_urls": {
               "Homepage": "https://github.com/hadiasghari/pyasn"
            },
            "release_url": "https://pypi.org/project/pyasn/1.6.0b1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Offline IP address to Autonomous System Number lookup module.",
            "version": "1.6.0b1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Perdix Software",
            "author_email": "ssmith@perdixsw.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 2 - Pre-Alpha",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.4",
               "Programming Language :: Python :: 3.5",
               "Programming Language :: Python :: 3.6",
               "Topic :: Office/Business :: Financial",
               "Topic :: Scientific/Engineering :: Mathematics"
            ],
            "description": "UNKNOWN",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "https://www.github.com/perdixsw/umpy/tarball/0.1.0",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://www.github.com/perdixsw/umpy",
            "keywords": "units,measure,measurement,conversion,converter",
            "license": "MIT",
            "maintainer": null,
            "maintainer_email": null,
            "name": "umpy",
            "package_url": "https://pypi.org/project/umpy/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/umpy/",
            "project_urls": {
               "Download": "https://www.github.com/perdixsw/umpy/tarball/0.1.0",
               "Homepage": "https://www.github.com/perdixsw/umpy"
            },
            "release_url": "https://pypi.org/project/umpy/0.1.0/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Simple unit of measure conversion for python, optimized for manufacturing contexts.",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Jay Marcyes",
            "author_email": "jay@marcyes.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Environment :: Console",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Topic :: Software Development :: Testing"
            ],
            "description": "Pyt\n===\n\nPyt is a lightweight wrapper around `Python’s unittest\nmodule <https://docs.python.org/3/library/unittest.html>`__ that adds\nsome nice features and enhancements over the stock ``unittest`` module.\n\nQuickstart\n~~~~~~~~~~\n\nPyt overrides unittest’s built-in pathfinding to be smarter and less\nverbose, so you can match tests using prefix matching which makes\nrunning a test like:\n\n::\n\n   $ python -m unittest tests.foo_test.BarTestCase.test_che\n\nas simple as:\n\n::\n\n   $ pyt foo.Bar.che\n\nBut it’s even less verbose if you want it to be, pyt can reach into the\nmodules and classes to do its matching, so you don’t even need to\nspecify the module and class if you don’t want to:\n\n::\n\n   $ pyt che\n\nMore examples\n^^^^^^^^^^^^^\n\nTo run all the ``Happy`` tests:\n\n::\n\n   $ pyt Happy\n\nTo run all the ``newmodule`` tests:\n\n::\n\n   $ pyt newmodule\n\nTo run more than one test:\n\n::\n\n   $ pyt test1 test2 ...\n\nTo run every test ``pyt`` can find:\n\n::\n\n   $ pyt\n\nAnd the way I like to run all tests in the current directory:\n\n::\n\n   $ pyt -vb\n\nWhich can also be written:\n\n::\n\n   $ pyt --verbose --buffer\n\nFlags\n~~~~~\n\nTo see everything pyt can do\n\n::\n\n   $ pyt --help\n\n–warnings\n^^^^^^^^^\n\nThis will convert warnings into errors.\n\n::\n\n   $ pyt --warnings\n\n–rerun\n^^^^^^\n\nIf your last testrun had failing tests this will rerun only the tests\nthat failed.\n\n::\n\n   $pyt --rerun\n\nThings to be aware of\n~~~~~~~~~~~~~~~~~~~~~\n\npyt uses Python’s PEP 8 style conventions\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n``pyt`` uses `Python’s code styling\nconventions <http://www.python.org/dev/peps/pep-0008/>`__ to decide what\nis the module and class, so, given input like this:\n\n::\n\n   $ pyt foo.bar.Baz.che\n\n``pyt`` will consider ``foo.bar`` to be the module, ``Baz`` to be a\nclass (because it starts with a capital letter), and ``che`` to be a\nmethod (since it comes after the class).\n\nLikewise, ``pyt`` uses unittest conventions, so a test module should end\nwith ``_test`` (eg, ``foo.bar_test``) or start with test (eg,\n``test_foo.py``) and a TestCase class should extend\n``unittest.TestCase``, and test methods should start with ``test_`` (eg,\n``test_che``).\n\nVague input can cause pyt to run more tests than you expect\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSo if you have something like this:\n\n::\n\n   project/\n     __init__.py\n     user.py\n     foo/\n       __init__.py\n       user.py\n     tests/\n       __init__.py\n       user_test.py\n       foo/\n         __init__.py\n         user_test.py\n\nAnd you want to run tests for ``foo.user`` and you run:\n\n::\n\n   $ pyt user\n\nit will run both ``tests/user_test`` and ``tests.foo.user_test``, the\nsolution is to just be more verbose when you have to be:\n\n::\n\n   $ pyt foo.user\n\nEnvironment Variables\n^^^^^^^^^^^^^^^^^^^^^\n\nIf you are running the tests within pyt, you might notice there is an\nenvironment variable ``PYT_TEST_COUNT`` that contains the count of how\nmany tests pyt found to run.\n\nInstallation\n------------\n\nUse ``pip``:\n\n::\n\n   $ pip install pyt\n\nYou can also get it directly from the repo:\n\n::\n\n   $ pip install --upgrade git+https://github.com/Jaymon/pyt#egg=pyt\n\nIf you install pyt using Python 3 it can also be invoked using the\n``pyt3`` command:\n\n::\n\n   $ pyt3 --help\n\nLikewise, Python 2 installs a ``pyt2`` command:\n\n::\n\n   $ pyt2 --help\n\nTesting\n-------\n\nTesting in 2.7 on most systems:\n\n::\n\n   $ python -m unittest pyt_test\n\nTesting in 3.5 on MacOS:\n\n::\n\n   $ python3.5 -m unittest pyt_test\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "http://github.com/Jaymon/pyt",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyt",
            "package_url": "https://pypi.org/project/pyt/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyt/",
            "project_urls": {
               "Homepage": "http://github.com/Jaymon/pyt"
            },
            "release_url": "https://pypi.org/project/pyt/1.0.5/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "easily run python unit tests",
            "version": "1.0.5",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Bradley Odell",
            "author_email": "btodell@hotmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Environment :: Console",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
               "Natural Language :: English",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 2.6",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Topic :: Software Development :: Build Tools"
            ],
            "description": "pyz\n===\n\n*Packages all source code and dependencies into a single Python zip application.*\n\nSummary\n-------\n\nDeploying a Python application any larger than a single file is\ncumbersome - this library aims to solve that problem.\n\nPython has been able to run code from within a zip file since version\n2.6. Python 3.5 introduced the `zipapp <https://docs.python.org/3/library/zipapp.html>`__ module\nwhich aims to simplify the process of creating a zip application.\nHowever, **zipapp** isn't a complete solution to the problem - it\ndoesn't handle dependencies and it doesn't include certain extra\nfeatures that this library provides.\n\nThis library allows you to bundle all of your Python code **AND** your\ndependencies into a single Python zip application file.\n\nNote: The dependency bundling feature is not implemented yet, but it is\nin the works!\n\nFeatures\n--------\n\n1. Bundle all Python source code with fine-grained control over included files.\n2. Ability to \"unixify\" the output application by prepending a customizable\n   `shebang <https://en.wikipedia.org/wiki/Shebang_(Unix)>`__.\n3. Python interpreter version check - display a friendly notice instead\n   of a Python exception if the user runs your application using an\n   unsupported Python version.\n\nPlanned\n-------\n\n1. Automatically identify dependencies and package them accordingly.\n",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "https://github.com/BTOdell/pyz/archive/0.4.3.tar.gz",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/BTOdell/pyz",
            "keywords": "pyz zip app zipapp bundle dependencies library",
            "license": "GPLv3",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyz",
            "package_url": "https://pypi.org/project/pyz/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyz/",
            "project_urls": {
               "Download": "https://github.com/BTOdell/pyz/archive/0.4.3.tar.gz",
               "Homepage": "https://github.com/BTOdell/pyz"
            },
            "release_url": "https://pypi.org/project/pyz/0.4.3/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Packages all source code and dependencies into a single Python zip application.",
            "version": "0.4.3",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Val Neekman",
            "author_email": "info@neekware.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 3 - Alpha",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Operating System :: POSIX",
               "Programming Language :: Python",
               "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description": "AWSLI\n====================\n\n**Amazon Web Services Line Interpreter**\n\n**Author:** Val Neekman [ info@neekware.com, @vneekman ]\n\nOverview\n========\n\nA Line Interpreter for Amazon Web Services.\n\nHow to install\n==================\n\n    1. easy_install awsli\n    2. pip install awsli\n    3. git clone http://github.com/un33k/awsli\n        a. cd awsli\n        b. run python setup.py\n    4. wget https://github.com/un33k/awsli/zipball/master\n        a. unzip the downloaded file\n        b. cd into awsli-* directory\n        c. run python setup.py\n\nHow to use\n=================\n\n``Usage``\n\n``Note:``\n\nRunning the tests\n=================\n\nTo run the tests against the current environment:\n\n    python test.py\n\nChangelog\n=========\n\n0.1\n-----\n\n* Initial release\n\n\nLicense\n=======\n\nCopyright (c) 2012, Val Neekman\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without \nmodification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this \nlist of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this \nlist of conditions and the following disclaimer in the documentation and/or \nother materials provided with the distribution.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND \nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED \nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE \nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE \nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL \nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR \nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, \nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE \nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/un33k/awsli",
            "keywords": null,
            "license": "BSD",
            "maintainer": null,
            "maintainer_email": null,
            "name": "awsli",
            "package_url": "https://pypi.org/project/awsli/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/awsli/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/un33k/awsli"
            },
            "release_url": "https://pypi.org/project/awsli/0.0.1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "A Line Interpreter for Amazon Web Services",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Armin Ronacher",
            "author_email": "armin.ronacher@active-4.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Environment :: Web Environment",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
               "Topic :: Software Development :: Libraries :: Python Modules",
               "Topic :: Text Processing :: Markup :: HTML"
            ],
            "description": "jinja\n~~~~~\n\nJinja is a `sandboxed`_ template engine written in pure Python. It\nprovides a `Django`_ like non-XML syntax and compiles templates into\nexecutable python code. It's basically a combination of Django templates\nand python code.\n\nNutshell\n--------\n\nHere a small example of a Jinja template::\n\n    {% extends 'base.html' %}\n    {% block title %}Memberlist{% endblock %}\n    {% block content %}\n      <ul>\n      {% for user in users %}\n        <li><a href=\"{{ user.url|e }}\">{{ user.username|e }}</a></li>\n      {% endfor %}\n      </ul>\n    {% endblock %}\n\nPhilosophy\n----------\n\nApplication logic is for the controller but don't try to make the life\nfor the template designer too hard by giving him too few functionality.\n\nFor more informations visit the new `jinja webpage`_ and `documentation`_.\n\nNote\n----\n\nThis is the Jinja 1.0 release which is completely incompatible with the\nold \"pre 1.0\" branch. The old branch will still receive security updates\nand bugfixes but the 1.0 branch will be the only version that receives\nsupport.\n\nIf you have an application that uses Jinja 0.9 and won't be updated in\nthe near future the best idea is to ship a Jinja 0.9 checkout together\nwith the application.\n\nThe `Jinja tip`_ is installable via `easy_install` with ``easy_install\nJinja==dev``.\n\n.. _sandboxed: http://en.wikipedia.org/wiki/Sandbox_(computer_security)\n.. _Django: http://www.djangoproject.com/\n.. _jinja webpage: http://jinja.pocoo.org/\n.. _documentation: http://jinja.pocoo.org/documentation/index.html\n.. _Jinja tip: http://dev.pocoo.org/hg/jinja-main/archive/tip.tar.gz#egg=Jinja-dev\n\n\n:copyright: 2007 by Armin Ronacher.\n:license: BSD, see LICENSE for more details.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "http://jinja.pocoo.org/",
            "keywords": "python.templating.engines",
            "license": "BSD",
            "maintainer": null,
            "maintainer_email": null,
            "name": "Jinja",
            "package_url": "https://pypi.org/project/Jinja/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/Jinja/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "http://jinja.pocoo.org/"
            },
            "release_url": "https://pypi.org/project/Jinja/1.2/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "A small but fast and easy to use stand-alone template engine written in pure python.",
            "version": "1.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Hsiaoming Yang",
            "author_email": "me@lepture.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Environment :: Console",
               "Environment :: Web Environment",
               "Framework :: Django",
               "Framework :: Flask",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.5",
               "Programming Language :: Python :: 3.6",
               "Programming Language :: Python :: 3.7",
               "Programming Language :: Python :: 3.8",
               "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
               "Topic :: Internet :: WWW/HTTP :: WSGI :: Application",
               "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description": "Authlib\n=======\n\nThe ultimate Python library in building OAuth and OpenID Connect servers.\nJWS, JWK, JWA, JWT are included.\n\nUseful Links\n------------\n\n1. Homepage: https://authlib.org/\n2. Documentation: https://docs.authlib.org/\n3. Purchase Commercial License: https://authlib.org/plans\n4. Blog: https://blog.authlib.org/\n5. More Repositories: https://github.com/authlib\n6. Twitter: https://twitter.com/authlib\n7. Donate: https://www.patreon.com/lepture\n\nSpecifications\n--------------\n\n- RFC5849: The OAuth 1.0 Protocol\n- RFC6749: The OAuth 2.0 Authorization Framework\n- RFC6750: The OAuth 2.0 Authorization Framework: Bearer Token Usage\n- RFC7009: OAuth 2.0 Token Revocation\n- RFC7515: JSON Web Signature\n- RFC7516: JSON Web Encryption\n- RFC7517: JSON Web Key\n- RFC7518: JSON Web Algorithms\n- RFC7519: JSON Web Token\n- RFC7521: Assertion Framework for OAuth 2.0 Client Authentication and Authorization Grants\n- RFC7523: JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants\n- RFC7591: OAuth 2.0 Dynamic Client Registration Protocol\n- RFC7662: OAuth 2.0 Token Introspection\n- RFC8414: OAuth 2.0 Authorization Server Metadata\n- RFC8628: OAuth 2.0 Device Authorization Grant\n- OpenID Connect 1.0\n- OpenID Connect Discovery 1.0\n\nImplementations\n---------------\n\n- Requests OAuth 1 Session\n- Requests OAuth 2 Session\n- Requests Assertion Session\n- Flask OAuth 1/2 Client\n- Django OAuth 1/2 Client\n- Flask OAuth 1.0 Server\n- Flask OAuth 2.0 Server\n- Flask OpenID Connect 1.0\n- Django OAuth 1.0 Server\n- Django OAuth 2.0 Server\n- Django OpenID Connect 1.0\n\nLicense\n-------\n\nAuthlib is licensed under BSD. Please see LICENSE for licensing details.\n\nIf this license does not fit your company, consider to purchase a commercial\nlicense. Find more information on `Authlib Plans`_.\n\n.. _`Authlib Plans`: https://authlib.org/plans\n\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://authlib.org/",
            "keywords": "",
            "license": "BSD-3-Clause",
            "maintainer": "",
            "maintainer_email": "",
            "name": "Authlib",
            "package_url": "https://pypi.org/project/Authlib/",
            "platform": "any",
            "project_url": "https://pypi.org/project/Authlib/",
            "project_urls": {
               "Blog": "https://blog.authlib.org/",
               "Bug Tracker": "https://github.com/lepture/authlib/issues",
               "Commercial License": "https://authlib.org/plans",
               "Documentation": "https://docs.authlib.org/",
               "Donate": "https://lepture.com/donate",
               "Homepage": "https://authlib.org/",
               "Source Code": "https://github.com/lepture/authlib"
            },
            "release_url": "https://pypi.org/project/Authlib/0.14.3/",
            "requires_dist": [
               "cryptography",
               "requests ; extra == 'client'"
            ],
            "requires_python": "",
            "summary": "The ultimate Python library in building OAuth and OpenID Connect servers.",
            "version": "0.14.3",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Julien Bigot",
            "author_email": "julien.bigot@cea.fr",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Environment :: Console",
               "License :: OSI Approved :: MIT License"
            ],
            "description": "# zpp\n\nThis is zpp, the Z Pre-Processor.\n\nZpp transforms bash in a pre-processor for F90 source files.\nIt offers a set of functions specifically tailored to build clean Fortran90\ninterfaces by generating code for all types, kinds, and array ranks supported by\na given compiler.\n\n## Syntax\n\nZpp files are typically named `*.F90.zpp`.\n\nIn these files, the lines that start with `!$SH` are interpreted as bash lines. \nOther lines are copied as-is, except that variable substitution is operated as\nin a double-quoted string, including bash commands `${VAR}` or `$(command)`.\nIf inside a bash control block (`if`, `for`, etc.), the output generation obeys\nthe control statement.\n\nFor example, this code:\n```\n!$SH for GREETED in world universe multiverse ; do\nprint *, \"Hello ${GREETED}\"\n!$SH done\n```\n\nWould produce the following result:\n```\nprint *, \"Hello world\"\nprint *, \"Hello universe\"\nprint *, \"Hello multiverse\"\n```\n\n### Support functions\n\nPredefined bash functions, variable and code can be provided in `.zpp.sh` files\nthat can be included with `#!SH source <filename>.zpp.sh`.\n\n**Beware**: a file NEEDs to have the `.zpp.sh` extension to be included from\nzpp.\n\nZpp provides a standard library of functions tailored to build clean Fortran90\ninterfaces by generating code for all types, kinds, and array ranks supported by\na given compiler.\n\n#### zpp_str_repeat\n\nFound in `base.zpp.sh`\n\nOutputs a string multiple times.\n\nParameters:\n1. the string to Repeat\n2. the lower bound of the iterations (inclusive)\n3. the upper bound of the iterations (inclusive)\n4. the string separator\n5. the string starter\n6. the string ender\n\nRepeats string `$1` (`$3`-`$2`+1) times, separated by string `$4` inside `$5`\n`$6`.\n* If the number of repetitions is negative, the result is empty.\n* If `$1` contains the '@N' substring, it will be replaced by the iteration\n  number (from `$2` to `$3`).\n\nexample:\n```\n#!SH source base.zpp.sh\nzpp_str_repeat v@N 5 7 '...' '<<' '>>'\nzpp_str_repeat w@N 1 1 '...' '<<' '>>'\nzpp_str_repeat x@N 1 0 '...' '<<' '>>'\n```\noutput:\n```\n<<v5...v6...v7>>\n<<w1>>\n```\n\n#### zpp_str_repeat_reverse\n\nFound in `base.zpp.sh`\n\nOutputs a string multiple times in reverse order.\n\nParameters:\n1. the string to Repeat\n2. the upper bound of the iterations (inclusive)\n3. the lower bound of the iterations (inclusive)\n4. the string separator\n5. the string starter\n6. the string ender\n\nRepeats string `$1` (`$2`-`$3`+1) times, separated by string `$4` inside `$5`\n`$6`.\n* If the number of repetitions is negative, the result is empty.\n* If `$1` contains the '@N' substring, it will be replaced by the iteration\n  number (from `$2` to `$3`, i.e. upper to lower).\n\nexample:\n```\n#!SH source base.zpp.sh\nzpp_str_repeat_reverse v@N 5 7 '...' '<<' '>>'\nzpp_str_repeat_reverse w@N 1 1 '...' '<<' '>>'\nzpp_str_repeat_reverse x@N 1 0 '...' '<<' '>>'\n```\noutput:\n```\n<<v7...v6...v5>>\n<<w1>>\n```\n\n#### ZPP_FORT_TYPES\n\nFound in `fortran.zpp.sh`\n\nThe list of types supported by the fortran compiler as zpp:typeIDs.\n\nThe compiler ID should be provided in `ZPP_CONFIG` as `config.<ID>`.\nThe supported predefined IDs are: `Gnu`, `Intel`, `PGI` and `XL`.\nYou can also provide definitions for an additional compiler by defining\n`ZPP_FORT_TYPES` in a file named `config.<ID>.zpp.sh`.\n\nIf you use cmake, it will automatically generate such a file for your compiler\nand define  `ZPP_CONFIG` so you don't have to handle it.\n\n### zpp_fort_array_desc\n\nFound in `fortran.zpp.sh`\n\nOutputs an assumed shaped array descriptor of the provided size.\n\nParameters:\n1. the size of the assumed shaped array\n\nexample:\n```\n#!SH source fortran.zpp.sh\ninteger:: scalar$(zpp_fort_array_desc 0)\ninteger:: array1d$(zpp_fort_array_desc 1)\ninteger:: array2d$(zpp_fort_array_desc 2)\n```\noutput:\n```\ninteger:: scalar\ninteger:: array1d(:)\ninteger:: array2d(:,:)\n```\n\n### zpp_fort_ptype\n\nFound in `fortran.zpp.sh`\n\nOutputs the type associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\nexample:\n```\n#!SH source fortran.zpp.sh\n!$SH for T in ${ZPP_FORT_TYPES} ; do\n$(zpp_fort_ptype $1)\n!$SH done\n```\nexample output:\n```\nCHARACTER\nCOMPLEX\nCOMPLEX\nINTEGER\nINTEGER\nINTEGER\nINTEGER\nLOGICAL\nREAL\nREAL\n```\n\n### zpp_fort_kind\n\nFound in `fortran.zpp.sh`\n\nOutputs the kind associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\nexample:\n```\n#!SH source fortran.zpp.sh\n!$SH for T in ${ZPP_FORT_TYPES} ; do\n$(zpp_fort_kind $1)\n!$SH done\n```\nexample output:\n```\n1\n4\n8\n1\n2\n4\n8\n1\n4\n8\n```\n\n### zpp_fort_type\n\nFound in `fortran.zpp.sh`\n\nOutputs the full type (with kind included) associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n2. additional attributes for the type\n\nexample:\n```\n#!SH source fortran.zpp.sh\n!$SH for T in ${MY_CHAR_TYPES} ; do\n$(zpp_fort_type $1)\n$(zpp_fort_type $1 \"len=5\")\n!$SH done\n```\nexample output:\n```\nCHARACTER(KIND=1)\nCHARACTER(KIND=1,len=5)\n```\n\n### zpp_fort_sizeof\n\nFound in `fortran.zpp.sh`\n\nOutputs the size in bits associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\n### zpp_fort_io_format\n\nFound in `fortran.zpp.sh`\n\nOutputs an IO descriptor suitable for a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\n### ZPP_HDF5F_TYPES\n\nFound in `hdf5_fortran.zpp.sh`\n\nA list of zpp:typeIDs supported by HDF5.\n\n### hdf5_constant\n\nFound in `hdf5_fortran.zpp.sh`\n\nOutputs the HDF5 type constant associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\nexample:\n```\n#!SH source hdf5_fortran.zpp.sh\n!$SH for T in ${ZPP_HDF5F_TYPES} ; do\n$(hdf5_constant $1)\n!$SH done\n```\nexample output:\n```\nH5T_NATIVE_INTEGER\nH5T_NATIVE_REAL\nH5T_NATIVE_REAL\nH5T_NATIVE_CHARACTER\n```\n\n\n## Command-line interface\n\nZpp basic usage is as follow:\n```\nUsage: zpp [Options...] <source> [<destination>]\n  use `zpp -h' for more info\n\nPreprocesses BASH in-line commands in a source file\n\nOptions:\n  --version        show program's version number and exit\n  -h, --help       show this help message and exit\n  -I DIR           Add DIR to search list for source directives\n  -o FILE          Place the preprocessed code in file FILE.\n  -D OPTION=VALUE  Set the value of OPTION to VALUE\n```\n\n## CMake interface\n\nSupport is provided for using zpp from CMake based projects, but you can use\nit from plain Makefiles too.\n\nThere are two ways you can use zpp from your CMake project:\n* with `add_subdirectory`: include zpp in your project and use it directly from\n  there,\n* with `find_package`: install zpp and use it as an external dependency of your\n  project.\n\n#### CMake subdirectory usage\n\nUsing zpp with `add_subdirectory` is very simple.\nJust copy the `zpp` directory in your source and point to it with\n`add_subdirectory(zpp)`.\nThe `zpp_preprocess` then becomes available to process zpp files.\n\nThis is demonstrated in `example/cmake_subdirectory`.\n\n#### CMake find usage\n\nUsing zpp with `find_package` is no more complex.\nIf zpp is installed, just add a `find_package(zpp REQUIRED)`.\nThe `zpp_preprocess` then becomes available to process zpp files.\n\nThis is demonstrated in `example/cmake_find`.\n\n## GMake usage\n\nUsing zpp from a GNU Makefile is slightly less powerful than from CMake.\nThe types and kinds supported by the Fortran compiler will not be automatically\ndetected.\nPredefined lists of supported types for well known compilers are provided\ninstead.\n\nTo use zpp from a Makefile, include the `share/zpp/zpp.mk` file (either from an\ninstalled location or from a subdirectory in your project).\nYou can then set the `zpp_COMPILER_ID` variable to the compiler you use and\n`.F90` files will be automatically generated from their `.F90.zpp` equivalent.\nThe `zppFLAGS` variable is automatically passed to zpp similarly to `CFLAGS` or\n`CXXFLAGS` for `cc` and `cxx`.\n\nThis is demonstrated in `example/cmake_makefile`.\n\n## Installation\n\nZpp can be installed using the usual python way with `setup.py`.\n```\n./setup.py --help\n```\n\nThe cmake approach is deprecated.\n\n## FAQ\n\nQ. Isn't zpp redundant with assumed type parameters?\n\nA.\nThe assumed type parameters functionality allows to implement part of what can\nbe done with zpp (support for all kinds of a type). However as of 2013 it was\nnot correctly supported on most compilers installed on the supercomputers.\n\nIn addition, many things can be done with zpp but not with assumed type\nparameters, such as support for variable array rank or small variations of the\ncode depending on the kind.\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "bash Fortran pre-processor",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "zpp",
            "package_url": "https://pypi.org/project/zpp/",
            "platform": "",
            "project_url": "https://pypi.org/project/zpp/",
            "project_urls": {
               "Source Code": "https://github.com/pdidev/zpp/"
            },
            "release_url": "https://pypi.org/project/zpp/1.0.4/",
            "requires_dist": [
               "setuptools"
            ],
            "requires_python": "",
            "summary": "a Bash Pre-Processor for Fortran. ZPP is useful in order to build clean Fortran90 interfaces. It allows to generate Fortran code for all types, kinds, and array ranks supported by the compiler.",
            "version": "1.0.4",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Dheepak Krishnamurthy",
            "author_email": "kdheepak89@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# zip [![](https://travis-ci.org/kdheepak/zip.svg?branch=master)](https://travis-ci.org/kdheepak/zip/branches)\n\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/kdheepak/zip",
            "keywords": "",
            "license": "Revised BSD License",
            "maintainer": "",
            "maintainer_email": "",
            "name": "zip",
            "package_url": "https://pypi.org/project/zip/",
            "platform": "",
            "project_url": "https://pypi.org/project/zip/",
            "project_urls": {
               "Homepage": "https://github.com/kdheepak/zip"
            },
            "release_url": "https://pypi.org/project/zip/0.0.2/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Intel Corporation",
            "author_email": "scripting@intel.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "Intended Audience :: Education",
               "Intended Audience :: Other Audience",
               "Intended Audience :: Science/Research",
               "Intended Audience :: System Administrators",
               "License :: Other/Proprietary License",
               "Operating System :: MacOS",
               "Operating System :: Microsoft :: Windows",
               "Operating System :: POSIX",
               "Operating System :: Unix",
               "Topic :: Software Development :: Libraries"
            ],
            "description": "Intel(R) Performance Primitives provides developers with high-quality, production-ready, low-level building blocks for image processing, signal processing, and data processing (data compression and decompression, and cryptography) applications.\n\nOne of many Intel(R) accelerated Python packages and performance library runtimes available on [PyPI](https://software.intel.com/en-us/articles/installing-the-intel-distribution-for-python-and-intel-performance-libraries-with-pip-and), and as part of [Intel(R) Distribution for Python](https://software.intel.com/en-us/distribution-for-python).\n\nFor latest release updates and security notifications, please [subscribe](https://software.intel.com/en-us/forums/intel-distribution-for-python) to the Intel(R) Distribution for Python Community forum.\n\nFree to use and redistribute pursuant to the [Intel Simplified Software License](https://software.intel.com/en-us/license/intel-simplified-software-license).\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://software.intel.com/en-us/articles/empowering-science-with-high-performance-python",
            "keywords": "",
            "license": "Proprietary - Intel",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ipp",
            "package_url": "https://pypi.org/project/ipp/",
            "platform": "",
            "project_url": "https://pypi.org/project/ipp/",
            "project_urls": {
               "Homepage": "https://software.intel.com/en-us/articles/empowering-science-with-high-performance-python"
            },
            "release_url": "https://pypi.org/project/ipp/2019.4.243/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Intel(R) Performance Primitives",
            "version": "2019.4.243",
            "yanked": false,
            "yanked_reason": null
         }
      ],
      "awscli": [
         {
            "author": "Gabriel Alves",
            "author_email": "gabriel.alves@pickcells.bio",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# sx\n#### Framework to manage gRPC-based microservices application",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "https://github.com/itsmealves/sx/releases/download/0.6.0/sx-0.6.0.tar.gz",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/itsmealves/sx",
            "keywords": "sx microservices rpc grpc Framework",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "sx",
            "package_url": "https://pypi.org/project/sx/",
            "platform": "",
            "project_url": "https://pypi.org/project/sx/",
            "project_urls": {
               "Download": "https://github.com/itsmealves/sx/releases/download/0.6.0/sx-0.6.0.tar.gz",
               "Homepage": "https://github.com/itsmealves/sx"
            },
            "release_url": "https://pypi.org/project/sx/0.6.0/",
            "requires_dist": null,
            "requires_python": ">=3.5",
            "summary": "Framework to manage gRPC-based microservices application",
            "version": "0.6.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "chrysn",
            "author_email": "chrysn@fsfe.org",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 3 - Alpha",
               "Intended Audience :: Education",
               "Intended Audience :: Science/Research",
               "License :: OSI Approved :: GNU General Public License (GPL)"
            ],
            "description": "UNKNOWN",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "UNKNOWN",
            "keywords": null,
            "license": "GPL",
            "maintainer": null,
            "maintainer_email": null,
            "name": "si",
            "package_url": "https://pypi.org/project/si/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/si/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "UNKNOWN"
            },
            "release_url": "https://pypi.org/project/si/0.1.1-1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Module to represent SI units",
            "version": "0.1.1-1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "leesoar",
            "author_email": "secure@tom.com",
            "bugtrack_url": null,
            "classifiers": [
               "License :: OSI Approved :: MIT License",
               "Programming Language :: Python :: 3.5",
               "Programming Language :: Python :: 3.6",
               "Programming Language :: Python :: 3.7",
               "Programming Language :: Python :: Implementation :: CPython",
               "Programming Language :: Python :: Implementation :: PyPy"
            ],
            "description": "\nDevelop soon\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://leesoar.com",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ida",
            "package_url": "https://pypi.org/project/ida/",
            "platform": "",
            "project_url": "https://pypi.org/project/ida/",
            "project_urls": {
               "Homepage": "https://leesoar.com"
            },
            "release_url": "https://pypi.org/project/ida/0.0.1/",
            "requires_dist": null,
            "requires_python": ">=3.3.0",
            "summary": "Develop soon",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Xavier Bruhiere",
            "author_email": "xavier.bruhiere@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 2 - Pre-Alpha",
               "Intended Audience :: Science/Research",
               "License :: OSI Approved :: Apache Software License",
               "Natural Language :: English",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2.7",
               "Topic :: Software Development",
               "Topic :: System :: Shells"
            ],
            "description": "python library DNA\n==================\n\n[![Coverage Status](https://coveralls.io/repos/hivetech/dna/badge.png)](https://coveralls.io/r/hivetech/dna)\n\n> Generic python utilities\n\nInstallation\n------------\n\n```console\npip install dna\n```\n\nExample\n-----\n\n```python\nimport dna.utils as utils\nimport dna.logger as logger\n\nlog_setup = logger.setup(level='info', filename='app.log')\nlog = logger.logger(__name__)\nwith log_setup.applicationbound():\n\n    log.info('hello', where='world')\n\n    useless_id = utils.generate_unique_id()\n    useless_name = utils.generate_random_name()\n\n    if utils.docker_check() and utils.is_running('ipyhon'):\n\n        print utils.Version('0.4.1')\n\n        module = utils.dynamic_import('dna.settings', 'LOG')\n        print utils.emphasis(module, align=False)\n\n        print utils.self_ip()\n```",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/hivetech/dna",
            "keywords": null,
            "license": "Apache 2.0",
            "maintainer": null,
            "maintainer_email": null,
            "name": "dna",
            "package_url": "https://pypi.org/project/dna/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/dna/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/hivetech/dna"
            },
            "release_url": "https://pypi.org/project/dna/0.0.7/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Generic python utilities",
            "version": "0.0.7",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Christopher Brown",
            "author_email": "io@henrian.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 2 - Pre-Alpha",
               "License :: OSI Approved :: MIT License",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.6",
               "Programming Language :: Python :: 2.7",
               "Topic :: Software Development :: Libraries :: Python Modules",
               "Topic :: System :: Archiving :: Packaging",
               "Topic :: System :: Filesystems"
            ],
            "description": "Python (package) installation\n-----------------------------\n\nGetting started from `PyPI <https://pypi.python.org/pypi/pi/>`__:\n\n::\n\n    easy_install pi\n\n`Whence easy\\_install? <#setuptools>`__\n\nCommands\n--------\n\n-  Uninstall package named \"pip\":\n\n   ::\n\n       pi uninstall pip\n\n-  Install package named \"filesequence\":\n\n   ::\n\n       pi install filesequence\n\n-  List paths that Python searches for imported modules:\n\n   ::\n\n       pi paths\n\n-  List installed packages:\n\n   ::\n\n       pi list\n\nTesting\n-------\n\nContinuous integration:\n\n|Travis CI Build Status|\n\nOr run tests locally:\n\n::\n\n    nosetests --with-doctest\n\nRelated\n~~~~~~~\n\n-  http://guide.python-distribute.org/creation.html\n-  `distribute/pkg\\_resources\n   docs <http://pythonhosted.org/distribute/pkg_resources.html>`__\n-  standard library\n   ```site`` <http://docs.python.org/2/library/site.html>`__\n-  standard library `environment\n   variables <http://docs.python.org/2/using/cmdline.html#environment-variables>`__\n\nSetuptools\n~~~~~~~~~~\n\n``pi`` does not yet completely replace\n`setuptools <https://pypi.python.org/pypi/setuptools>`__. You may need\nto install it first:\n\n+----------+-----------------------------------------+\n| Distro   | Package manager command                 |\n+==========+=========================================+\n| Ubuntu   | ``apt-get install python-setuptools``   |\n+----------+-----------------------------------------+\n| Mac      | built-in                                |\n+----------+-----------------------------------------+\n| Arch     | ``pacman -S python-setuptools``         |\n+----------+-----------------------------------------+\n| CentOS   | ``yum install python-setuptools``       |\n+----------+-----------------------------------------+\n\nLicense\n-------\n\nCopyright (c) 2013 Christopher Brown. `MIT\nLicensed <https://raw.github.com/chbrown/pi/master/LICENSE>`__.\n\n.. |Travis CI Build Status| image:: https://travis-ci.org/chbrown/pi.png?branch=master\n   :target: https://travis-ci.org/chbrown/pi",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/chbrown/pi",
            "keywords": null,
            "license": "Copyright (c) 2013 Christopher Brown\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.",
            "maintainer": null,
            "maintainer_email": null,
            "name": "pi",
            "package_url": "https://pypi.org/project/pi/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/pi/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/chbrown/pi"
            },
            "release_url": "https://pypi.org/project/pi/0.1.2/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Simpler python package installation",
            "version": "0.1.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ip",
            "package_url": "https://pypi.org/project/ip/",
            "platform": "",
            "project_url": "https://pypi.org/project/ip/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/ip/0.0.1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Vitalii Vanovschi",
            "author_email": "support@parallelpython.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Natural Language :: English",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Topic :: Software Development",
               "Topic :: System :: Distributed Computing"
            ],
            "description": "Parallel Python module (PP) provides an easy and efficient way to create parallel-enabled applications for SMP computers and clusters. PP module features cross-platform portability and dynamic load balancing. Thus application written with PP will parallelize efficiently even on heterogeneous and multi-platform clusters (including clusters running other application with variable CPU loads). Visit http://www.parallelpython.com for further information.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "http://www.parallelpython.com/downloads/pp/pp-1.6.5.zip",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "http://www.parallelpython.com",
            "keywords": null,
            "license": "BSD-like",
            "maintainer": null,
            "maintainer_email": null,
            "name": "pp",
            "package_url": "https://pypi.org/project/pp/",
            "platform": "Windows,Linux,Unix",
            "project_url": "https://pypi.org/project/pp/",
            "project_urls": {
               "Download": "http://www.parallelpython.com/downloads/pp/pp-1.6.5.zip",
               "Homepage": "http://www.parallelpython.com"
            },
            "release_url": "https://pypi.org/project/pp/1.6.5/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Parallel and distributed programming for Python",
            "version": "1.6.5",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Marcus Donnelly",
            "author_email": "marcus.k.donnelly@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "Intended Audience :: Science/Research",
               "License :: OSI Approved :: BSD License",
               "Programming Language :: Python :: 3",
               "Topic :: Scientific/Engineering"
            ],
            "description": "",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "Oceanography,Utilities",
            "license": "BSD",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ocutils",
            "package_url": "https://pypi.org/project/ocutils/",
            "platform": "",
            "project_url": "https://pypi.org/project/ocutils/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/ocutils/1.1.1/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Utility functions for oceanography related work",
            "version": "1.1.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Kiana Alessandra V. Villaera",
            "author_email": "kiana.villaera@senti.com.ph",
            "bugtrack_url": null,
            "classifiers": [
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 3"
            ],
            "description": "Contains everything you might need to perform essential data center functions\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/K-Winkles/dcutils",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dcutils",
            "package_url": "https://pypi.org/project/dcutils/",
            "platform": "",
            "project_url": "https://pypi.org/project/dcutils/",
            "project_urls": {
               "Homepage": "https://github.com/K-Winkles/dcutils"
            },
            "release_url": "https://pypi.org/project/dcutils/0.6/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "A simple package for data center utilities",
            "version": "0.6",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Mike Kazantsev",
            "author_email": "mk.fraggod@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Intended Audience :: Developers",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3.5",
               "Topic :: Software Development",
               "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description": "pretty-yaml (or pyaml)\n======================\n\nPyYAML-based python module to produce pretty and readable YAML-serialized data.\n\nThis module is for serialization only, see `ruamel.yaml`_ module for literate\nYAML parsing (keeping track of comments, spacing, line/column numbers of values, etc).\n\n[note: to dump stuff parsed by ruamel.yaml with this module, use only ``YAML(typ='safe')`` there]\n\n.. contents::\n  :backlinks: none\n\n\nWarning\n-------\n\nPrime goal of this module is to produce human-readable output that can be easily\nmanipulated and re-used, but maybe with some occasional caveats.\n\nOne good example of such \"caveat\" is that e.g. ``{'foo': '123'}`` will serialize\nto ``foo: 123``, which for PyYAML would be a bug, as 123 will then be read back\nas an integer from that, but here it's a feature.\n\nSo please do not rely on the thing to produce output that can always be\ndeserialized exactly to what was exported, at least - use PyYAML (e.g. with\noptions from the next section) for that.\n\n\nWhat this module does and why\n-----------------------------\n\nYAML is generally nice and easy format to read *if* it was written by humans.\n\nPyYAML can a do fairly decent job of making stuff readable, and the best\ncombination of parameters for such output that I've seen so far is probably this one::\n\n  >>> m = [123, 45.67, {1: None, 2: False}, u'some text']\n  >>> data = dict(a=u'asldnsa\\nasldpáknsa\\n', b=u'whatever text', ma=m, mb=m)\n  >>> yaml.safe_dump(data, sys.stdout, allow_unicode=True, default_flow_style=False)\n  a: 'asldnsa\n\n    asldpáknsa\n\n    '\n  b: whatever text\n  ma: &id001\n  - 123\n  - 45.67\n  - 1: null\n    2: false\n  - some text\n  mb: *id001\n\npyaml tries to improve on that a bit, with the following tweaks:\n\n* Most human-friendly representation options in PyYAML (that I know of) get\n  picked as defaults.\n\n* Does not dump \"null\" values, if possible, replacing these with just empty\n  strings, which have the same meaning but reduce visual clutter and are easier\n  to edit.\n\n* Dicts, sets, OrderedDicts, defaultdicts, namedtuples, etc are representable\n  and get sorted on output (OrderedDicts and namedtuples keep their ordering),\n  so that output would be as diff-friendly as possible, and not arbitrarily\n  depend on python internals.\n\n  It appears that at least recent PyYAML versions also do such sorting for\n  python dicts.\n\n* List items get indented, as they should be.\n\n* bytestrings that can't be auto-converted to unicode raise error, as yaml has\n  no \"binary bytes\" (i.e. unix strings) type.\n\n* Attempt is made to pick more readable string representation styles, depending\n  on the value, e.g.::\n\n    >>> yaml.safe_dump(cert, sys.stdout)\n    cert: '-----BEGIN CERTIFICATE-----\n\n      MIIH3jCCBcagAwIBAgIJAJi7AjQ4Z87OMA0GCSqGSIb3DQEBCwUAMIHBMRcwFQYD\n\n      VQQKFA52YWxlcm9uLm5vX2lzcDEeMBwGA1UECxMVQ2VydGlmaWNhdGUgQXV0aG9y\n    ...\n\n    >>> pyaml.p(cert):\n    cert: |\n      -----BEGIN CERTIFICATE-----\n      MIIH3jCCBcagAwIBAgIJAJi7AjQ4Z87OMA0GCSqGSIb3DQEBCwUAMIHBMRcwFQYD\n      VQQKFA52YWxlcm9uLm5vX2lzcDEeMBwGA1UECxMVQ2VydGlmaWNhdGUgQXV0aG9y\n    ...\n\n* \"force_embed\" option to avoid having &id stuff scattered all over the output\n  (which might be beneficial in some cases, hence the option).\n\n* \"&id\" anchors, if used, get labels from the keys they get attached to,\n  not just use meaningless enumerators.\n\n* \"string_val_style\" option to only apply to strings that are values, not keys,\n  i.e::\n\n    >>> pyaml.p(data, string_val_style='\"')\n    key: \"value\\nasldpáknsa\\n\"\n    >>> yaml.safe_dump(data, sys.stdout, allow_unicode=True, default_style='\"')\n    \"key\": \"value\\nasldpáknsa\\n\"\n\n* \"sort_dicts=False\" option to leave dict item ordering to python, and not\n  force-sort them in yaml output, which can be important for python 3.6+ where\n  they retain ordering info.\n\n* Has an option to add vertical spacing (empty lines) between keys on different\n  depths, to make output much more seekable.\n\nResult for the (rather meaningless) example above (without any additional\ntweaks)::\n\n  >>> pyaml.p(data)\n  a: |\n    asldnsa\n    asldpáknsa\n  b: 'whatever text'\n  ma: &ma\n    - 123\n    - 45.67\n    - 1:\n      2: false\n    - 'some text'\n  mb: *ma\n\n----------\n\nExtended example::\n\n  >>> pyaml.dump(conf, sys.stdout, vspacing=[2, 1]):\n  destination:\n\n    encoding:\n      xz:\n        enabled: true\n        min_size: 5120\n        options:\n        path_filter:\n          - \\.(gz|bz2|t[gb]z2?|xz|lzma|7z|zip|rar)$\n          - \\.(rpm|deb|iso)$\n          - \\.(jpe?g|gif|png|mov|avi|ogg|mkv|webm|mp[34g]|flv|flac|ape|pdf|djvu)$\n          - \\.(sqlite3?|fossil|fsl)$\n          - \\.git/objects/[0-9a-f]+/[0-9a-f]+$\n\n    result:\n      append_to_file:\n      append_to_lafs_dir:\n      print_to_stdout: true\n\n    url: http://localhost:3456/uri\n\n\n  filter:\n    - /(CVS|RCS|SCCS|_darcs|\\{arch\\})/$\n    - /\\.(git|hg|bzr|svn|cvs)(/|ignore|attributes|tags)?$\n    - /=(RELEASE-ID|meta-update|update)$\n\n\n  http:\n\n    ca_certs_files: /etc/ssl/certs/ca-certificates.crt\n\n    debug_requests: false\n\n    request_pool_options:\n      cachedConnectionTimeout: 600\n      maxPersistentPerHost: 10\n      retryAutomatically: true\n\n\n  logging:\n\n    formatters:\n      basic:\n        datefmt: '%Y-%m-%d %H:%M:%S'\n        format: '%(asctime)s :: %(name)s :: %(levelname)s: %(message)s'\n\n    handlers:\n      console:\n        class: logging.StreamHandler\n        formatter: basic\n        level: custom\n        stream: ext://sys.stderr\n\n    loggers:\n      twisted:\n        handlers:\n          - console\n        level: 0\n\n    root:\n      handlers:\n        - console\n      level: custom\n\nNote that unless there are many moderately wide and deep trees of data, which\nare expected to be read and edited by people, it might be preferrable to\ndirectly use PyYAML regardless, as it won't introduce another (rather pointless\nin that case) dependency and a point of failure.\n\n\nSome Tricks\n-----------\n\n* Pretty-print any yaml or json (yaml subset) file from the shell::\n\n    % python -m pyaml /path/to/some/file.yaml\n    % curl -s https://www.githubstatus.com/api/v2/summary.json | python -m pyaml\n\n* Process and replace json/yaml file in-place::\n\n    % python -m pyaml -r file-with-json.data\n\n* Easier \"debug printf\" for more complex data (all funcs below are aliases to\n  same thing)::\n\n    pyaml.p(stuff)\n    pyaml.pprint(my_data)\n    pyaml.pprint('----- HOW DOES THAT BREAKS!?!?', input_data, some_var, more_stuff)\n    pyaml.print(data, file=sys.stderr) # needs \"from __future__ import print_function\"\n\n* Force all string values to a certain style (see info on these in\n  `PyYAML docs`_)::\n\n    pyaml.dump(many_weird_strings, string_val_style='|')\n    pyaml.dump(multiline_words, string_val_style='>')\n    pyaml.dump(no_want_quotes, string_val_style='plain')\n\n  Using ``pyaml.add_representer()`` (note \\*p\\*yaml) as suggested in\n  `this SO thread`_ (or `github-issue-7`_) should also work.\n\n* Control indent and width of the results::\n\n    pyaml.dump(wide_and_deep, indent=4, width=120)\n\n  These are actually keywords for PyYAML Emitter (passed to it from Dumper),\n  see more info on these in `PyYAML docs`_.\n\n* Dump multiple yaml documents into a file: ``pyaml.dump_all([data1, data2, data3], dst_file)``\n\n  explicit_start=True is implied, unless explicit_start=False is passed.\n\n.. _PyYAML docs: http://pyyaml.org/wiki/PyYAMLDocumentation#Scalars\n.. _this SO thread: http://stackoverflow.com/a/7445560\n.. _github-issue-7: https://github.com/mk-fg/pretty-yaml/issues/7\n\n\nInstallation\n------------\n\nIt's a regular package for Python (3.x or 2.x).\n\nModule uses PyYAML_ for processing of the actual YAML files and should pull it\nin as a dependency.\n\nDependency on unidecode_ module is optional and should only be necessary if\nsame-id objects or recursion is used within serialized data.\n\nBe sure to use python3/python2, pip3/pip2, easy_install-... binaries below,\nbased on which python version you want to install the module for, if you have\nseveral on the system (as is norm these days for py2-py3 transition).\n\nUsing pip_ is the best way::\n\n  % pip install pyaml\n\n(add --user option to install into $HOME for current user only)\n\nOr, if you don't have \"pip\" command::\n\n  % python -m ensurepip\n  % python -m pip install --upgrade pip\n  % python -m pip install pyaml\n\n(same suggestion wrt \"install --user\" as above)\n\nOn a very old systems, one of these might work::\n\n  % curl https://bootstrap.pypa.io/get-pip.py | python\n  % pip install pyaml\n\n  % easy_install pyaml\n\n  % git clone --depth=1 https://github.com/mk-fg/pretty-yaml\n  % cd pretty-yaml\n  % python setup.py install\n\n(all of install-commands here also have --user option,\nsee also `pip docs \"installing\" section`_)\n\nCurrent-git version can be installed like this::\n\n  % pip install 'git+https://github.com/mk-fg/pretty-yaml#egg=pyaml'\n\nNote that to install stuff to system-wide PATH and site-packages (without\n--user), elevated privileges (i.e. root and su/sudo) are often required.\n\nUse \"...install --user\", `~/.pydistutils.cfg`_ or virtualenv_ to do unprivileged\ninstalls into custom paths.\n\nMore info on python packaging can be found at `packaging.python.org`_.\n\n.. _ruamel.yaml: https://bitbucket.org/ruamel/yaml/\n.. _PyYAML: http://pyyaml.org/\n.. _unidecode: http://pypi.python.org/pypi/Unidecode\n.. _pip: http://pip-installer.org/\n.. _pip docs \"installing\" section: http://www.pip-installer.org/en/latest/installing.html\n.. _~/.pydistutils.cfg: http://docs.python.org/install/index.html#distutils-configuration-files\n.. _virtualenv: http://pypi.python.org/pypi/virtualenv\n.. _packaging.python.org: https://packaging.python.org/installing/\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/mk-fg/pretty-yaml",
            "keywords": "yaml serialization pretty print format human readable readability",
            "license": "WTFPL",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyaml",
            "package_url": "https://pypi.org/project/pyaml/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyaml/",
            "project_urls": {
               "Homepage": "https://github.com/mk-fg/pretty-yaml"
            },
            "release_url": "https://pypi.org/project/pyaml/20.4.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "PyYAML-based module to produce pretty and readable YAML-serialized data",
            "version": "20.4.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "haogege",
            "author_email": "1394168335@qq.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# pyyml\nUse python in yaml\n## 基本使用\n在python中使用：\n```python\nfrom pyyml import load\n\nwith open('conf.yml') as f:\n    raw_conf = f.read()\nconfig = load(raw_conf)\nprint(config)\n```\n在yaml中 `${...}` 中的内容将会被python执行：\n\nyaml内容\n```yaml\nsum: ${1 + 1}\n```\n实际解析内容\n```python\n{'sum': 2}\n```\n通过在文件开头第一行注释来导入所需的包：\n\n```yaml\n# libs:['os', 'os.path:path', 'this']\n```\n通过 [包名]:[别名] 取别名导入包\n\n`'os.path:path' 等同于 python 中的 from os import path`\n\n例如yaml文件内容\n```yaml\n# libs:['os', 'os.path:path', 'this']\nos_name: ${os.name}\nbase_dir: ${path.abspath(path.dirname(__file__))}\n```\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/q1394168335/pyyml",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyyml",
            "package_url": "https://pypi.org/project/pyyml/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyyml/",
            "project_urls": {
               "Homepage": "https://github.com/q1394168335/pyyml"
            },
            "release_url": "https://pypi.org/project/pyyml/0.0.2/",
            "requires_dist": [
               "pyyaml (>=3.13)"
            ],
            "requires_python": "",
            "summary": "Use python in yaml",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Michael Foord",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "rs",
            "package_url": "https://pypi.org/project/rs/",
            "platform": "",
            "project_url": "https://pypi.org/project/rs/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/rs/0.0/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "",
            "version": "0.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Ramses",
            "author_email": "hello@ramses.tech",
            "bugtrack_url": null,
            "classifiers": [
               "Framework :: Pyramid",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.4",
               "Programming Language :: Python :: 3.5",
               "Topic :: Internet :: WWW/HTTP",
               "Topic :: Internet :: WWW/HTTP :: WSGI :: Application"
            ],
            "description": "# `Ra`\n[![Build Status](https://travis-ci.org/ramses-tech/ra.svg?branch=master)](https://travis-ci.org/ramses-tech/ra)\n[![Documentation](https://readthedocs.org/projects/ra/badge/?version=stable)](http://ra.readthedocs.org)\n\nRa is a test suite generator and helper library for testing APIs described\nin [RAML](http://raml.org/).\n\nOut of the box, Ra provides a basic, automated test suite to test the routes\ndeclared in the RAML document. It provides test helpers for augmenting these\nwith custom tests to test application-specific logic, side effects, etc.\n\nRa is primarily designed to provide testing support for\n[ramses](http://github.com/ramses-tech/ramses) and\n[nefertari](http://github.com/ramses-tech/nefertari) applications, but can\nbe used with any WSGI-conformant, RAML-described API.\n\nIt currently depends on pytest but may be adapted for other test frameworks\nin the future. It works best using WebTest but doesn't require it.\n\n## Name\n\nRa was the god of the sun, the most important god in ancient Egypt.\n\n\n## Try it (dev)\n\nRun the test suite:\n\n```bash\n    $ pip install -r requirements.txt\n    $ py.test\n```\n\nCheck out the example:\n\n```bash\n    $ cd examples/ramses-test\n    $ pip install -r requirements.txt\n    $ py.test\n```\n\nThe example RAML at `examples/ramses-test/api.raml` and the test file\n`examples/ramses-test/tests/test_api.py` should be helpful to reference.\n\nSee the docs in `docs/`, and the `api.raml` and `tests/test_api.py` in\n`tests/apps/ramses_test`",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/ramses-tech/ra",
            "keywords": "web raml",
            "license": "UNKNOWN",
            "maintainer": null,
            "maintainer_email": null,
            "name": "ra",
            "package_url": "https://pypi.org/project/ra/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/ra/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/ramses-tech/ra"
            },
            "release_url": "https://pypi.org/project/ra/0.2.0/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Test RAML API definition",
            "version": "0.2.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Shoumik Palkar",
            "author_email": "shoumik@cs.stanford.edu",
            "bugtrack_url": null,
            "classifiers": [
               "License :: OSI Approved :: BSD License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 3"
            ],
            "description": "## split annotations\n\nThis package contains the Python implementation of [split annotations](), a system for optimizing applications\nthat combine many data-intensive library functions. See some useful links below.\n\n* [Documentation for this package](https://www.weld.rs/split-annotations/docs/)\n* [GitHub repository](https://www.github.com/weld-project/split-annotations)\n* [SOSP 2019 Paper describing the system](https://shoumik.xyz/static/papers/mozart-sosp19final.pdf)\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://www.github.com/weld-project/split-annotations",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "sa",
            "package_url": "https://pypi.org/project/sa/",
            "platform": "",
            "project_url": "https://pypi.org/project/sa/",
            "project_urls": {
               "Homepage": "https://www.github.com/weld-project/split-annotations"
            },
            "release_url": "https://pypi.org/project/sa/0.0.4/",
            "requires_dist": [
               "numpy",
               "pandas",
               "scipy",
               "sharedmem"
            ],
            "requires_python": ">=3.6",
            "summary": "Python split annotations package",
            "version": "0.0.4",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Mitch Garnaat",
            "author_email": "mitch@garnaat.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.6",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.3",
               "Programming Language :: Python :: 3.4",
               "Topic :: Internet"
            ],
            "description": "####\nboto\n####\nboto 2.49.0\n\nReleased: 11-July-2018\n\n.. image:: https://travis-ci.org/boto/boto.svg?branch=develop\n        :target: https://travis-ci.org/boto/boto\n\n.. image:: https://pypip.in/d/boto/badge.svg\n        :target: https://pypi.python.org/pypi/boto/\n\n******\nBoto 3\n******\n\n`Boto3 <https://github.com/boto/boto3>`__, the next version of Boto, is now\nstable and recommended for general use.  It can be used side-by-side with Boto\nin the same project, so it is easy to start using Boto3 in your existing\nprojects as well as new projects. Going forward, API updates and all new\nfeature work will be focused on Boto3.\n\nTo assist users who still depend on Boto and cannot immediately switch over, we\nwill be triaging and addressing critical issues and PRs in Boto in the short\nterm. As more users make the switch to Boto3, we expect to reduce our\nmaintenance involvement over time. If we decide on a cutoff date or any\nsignificant changes to our maintenance plan, we will make pre-announcements\nwell ahead of schedule to allow ample time for our users to adapt/migrate.\n\n\n************\nIntroduction\n************\n\nBoto is a Python package that provides interfaces to Amazon Web Services.\nCurrently, all features work with Python 2.6 and 2.7. Work is under way to\nsupport Python 3.3+ in the same codebase. Modules are being ported one at\na time with the help of the open source community, so please check below\nfor compatibility with Python 3.3+.\n\nTo port a module to Python 3.3+, please view our `Contributing Guidelines`_\nand the `Porting Guide`_. If you would like, you can open an issue to let\nothers know about your work in progress. Tests **must** pass on Python\n2.6, 2.7, 3.3, and 3.4 for pull requests to be accepted.\n\n\n********\nServices\n********\n\nAt the moment, boto supports:\n\n* Compute\n\n  * Amazon Elastic Compute Cloud (EC2) (Python 3)\n  * Amazon Elastic Map Reduce (EMR) (Python 3)\n  * AutoScaling (Python 3)\n  * Amazon Kinesis (Python 3)\n  * AWS Lambda (Python 3)\n  * Amazon EC2 Container Service (Python 3)\n\n* Content Delivery\n\n  * Amazon CloudFront (Python 3)\n\n* Database\n\n  * Amazon Relational Data Service (RDS)\n  * Amazon DynamoDB (Python 3)\n  * Amazon SimpleDB (Python 3)\n  * Amazon ElastiCache (Python 3)\n  * Amazon Redshift (Python 3)\n\n* Deployment and Management\n\n  * AWS Elastic Beanstalk (Python 3)\n  * AWS CloudFormation (Python 3)\n  * AWS Data Pipeline (Python 3)\n  * AWS Opsworks (Python 3)\n  * AWS CloudTrail (Python 3)\n  * AWS CodeDeploy (Python 3)\n\n* Administration & Security\n\n  * AWS Identity and Access Management (IAM) (Python 3)\n  * AWS Key Management Service (KMS) (Python 3)\n  * AWS Config (Python 3)\n  * AWS CloudHSM (Python 3)\n\n* Application Services\n\n  * Amazon CloudSearch (Python 3)\n  * Amazon CloudSearch Domain (Python 3)\n  * Amazon Elastic Transcoder (Python 3)\n  * Amazon Simple Workflow Service (SWF) (Python 3)\n  * Amazon Simple Queue Service (SQS) (Python 3)\n  * Amazon Simple Notification Server (SNS) (Python 3)\n  * Amazon Simple Email Service (SES) (Python 3)\n  * Amazon Cognito Identity (Python 3)\n  * Amazon Cognito Sync (Python 3)\n  * Amazon Machine Learning (Python 3)\n\n* Monitoring\n\n  * Amazon CloudWatch (EC2 Only) (Python 3)\n  * Amazon CloudWatch Logs (Python 3)\n\n* Networking\n\n  * Amazon Route53 (Python 3)\n  * Amazon Route 53 Domains (Python 3)\n  * Amazon Virtual Private Cloud (VPC) (Python 3)\n  * Elastic Load Balancing (ELB) (Python 3)\n  * AWS Direct Connect (Python 3)\n\n* Payments and Billing\n\n  * Amazon Flexible Payment Service (FPS)\n\n* Storage\n\n  * Amazon Simple Storage Service (S3) (Python 3)\n  * Amazon Glacier (Python 3)\n  * Amazon Elastic Block Store (EBS)\n  * Google Cloud Storage\n\n* Workforce\n\n  * Amazon Mechanical Turk\n\n* Other\n\n  * Marketplace Web Services (Python 3)\n  * AWS Support (Python 3)\n\nThe goal of boto is to support the full breadth and depth of Amazon\nWeb Services.  In addition, boto provides support for other public\nservices such as Google Storage in addition to private cloud systems\nlike Eucalyptus, OpenStack and Open Nebula.\n\nBoto is developed mainly using Python 2.6.6 and Python 2.7.3 on Mac OSX\nand Ubuntu Maverick.  It is known to work on other Linux distributions\nand on Windows.  Most of Boto requires no additional libraries or packages\nother than those that are distributed with Python.  Efforts are made\nto keep boto compatible with Python 2.5.x but no guarantees are made.\n\n************\nInstallation\n************\n\nInstall via `pip`_:\n\n::\n\n    $ pip install boto\n\nInstall from source:\n\n::\n\n    $ git clone git://github.com/boto/boto.git\n    $ cd boto\n    $ python setup.py install\n\n**********\nChangeLogs\n**********\n\nTo see what has changed over time in boto, you can check out the\nrelease notes at `http://docs.pythonboto.org/en/latest/#release-notes`\n\n***************************\nFinding Out More About Boto\n***************************\n\nThe main source code repository for boto can be found on `github.com`_.\nThe boto project uses the `gitflow`_ model for branching.\n\n`Online documentation`_ is also available. The online documentation includes\nfull API documentation as well as Getting Started Guides for many of the boto\nmodules.\n\nBoto releases can be found on the `Python Cheese Shop`_.\n\nJoin our IRC channel `#boto` on FreeNode.\nWebchat IRC channel: http://webchat.freenode.net/?channels=boto\n\nJoin the `boto-users Google Group`_.\n\n*************************\nGetting Started with Boto\n*************************\n\nYour credentials can be passed into the methods that create\nconnections.  Alternatively, boto will check for the existence of the\nfollowing environment variables to ascertain your credentials:\n\n**AWS_ACCESS_KEY_ID** - Your AWS Access Key ID\n\n**AWS_SECRET_ACCESS_KEY** - Your AWS Secret Access Key\n\nCredentials and other boto-related settings can also be stored in a\nboto config file.  See `this`_ for details.\n\n.. _Contributing Guidelines: https://github.com/boto/boto/blob/develop/CONTRIBUTING\n.. _Porting Guide: http://boto.readthedocs.org/en/latest/porting_guide.html\n.. _pip: http://www.pip-installer.org/\n.. _release notes: https://github.com/boto/boto/wiki\n.. _github.com: http://github.com/boto/boto\n.. _Online documentation: http://docs.pythonboto.org\n.. _Python Cheese Shop: http://pypi.python.org/pypi/boto\n.. _this: http://docs.pythonboto.org/en/latest/boto_config_tut.html\n.. _gitflow: http://nvie.com/posts/a-successful-git-branching-model/\n.. _neo: https://github.com/boto/boto/tree/neo\n.. _boto-users Google Group: https://groups.google.com/forum/?fromgroups#!forum/boto-users\n\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/boto/boto/",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "boto",
            "package_url": "https://pypi.org/project/boto/",
            "platform": "Posix; MacOS X; Windows",
            "project_url": "https://pypi.org/project/boto/",
            "project_urls": {
               "Homepage": "https://github.com/boto/boto/"
            },
            "release_url": "https://pypi.org/project/boto/2.49.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Amazon Web Services Library",
            "version": "2.49.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Hadi Asghari",
            "author_email": "hd.asghari@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 3",
               "Topic :: Software Development :: Libraries :: Python Modules",
               "Topic :: System :: Networking"
            ],
            "description": "pyasn\n=====\n\n.. image:: https://pypip.in/v/pyasn/badge.png\n   :target: https://pypi.python.org/pypi/pyasn\n\n.. image:: https://pypip.in/d/pyasn/badge.png\n   :target: https://pypi.python.org/pypi/pyasn\n\n\n**pyasn** is a Python extension module that enables very fast IP address to Autonomous System Number lookups.\nCurrent state and Historical lookups can be done, based on the MRT/RIB BGP archive used as input.\n\n*pyasn* is different from other ASN lookup tools in that it provides **offline** and **historical** lookups.\nIt provides utility scripts for users to build their own lookup databases based on any MRT/RIB archive.\nThis makes *pyasn* much faster than online dig/whois/json lookups.\n\nThe module is written in C and Python, and cross-compiles on Linux and Windows. Underneath, it uses a radix tree\ndata structure for storage of IP addresses. In the current version, it borrows code from *py-radix* to support\nboth IPV4 and IPV6 network prefixes. The current release is a beta. Compared to the previous version, it provides\nsupport for Python 2 and 3; adds new functionality, performance improvements, and unit-tests.\n\n*pyasn* is developed and maintained by researchers at the Economics of Cybersecurity research group at Delft\nUniversity of Technology (http://econsec.tbm.tudlft.nl). The package is used on an almost daily basis and bugs\nare fixed pretty quickly.  The package is largely developed and maintained by Hadi Asghari and Arman Noroozian.\nPlease report any bugs via GitHub (https://github.com/hadiasghari/pyasn) or email the developers.\n\n\nInstallation\n============\nInstallation is a breeze via pip: ::\n\n    pip install pyasn --pre\n\nOr with the standard Python: ::\n\n    python setup.py build\n    python setup.py install --record log\n\nYou will need to have pip, setuptools and build essentials installed if you build the package manually. On\nUbuntu/Debian you can get them using the following command: ::\n\n    sudo apt-get install python-pip python-dev build-essential\n\nBuilding the C module on Windows, using either pip or from source, requires Microsoft Visual C++ to be installed.\npyasn has been tested using Visual C++ Express 2010, available freely from Microsoft's website, on both the\nofficial Python 3.4 release and Miniconda3. Other versions of Python, Visual Studio, and Cygwin could also work\nwith minor modifications.\n\nWe plan to release *pyasn* packages to major Linux repositories once it is out of beta.\n\n\nUsage\n=====\nA simple example that demonstrates most of the features: ::\n\n    import pyasn\n\n    # Initialize module and load IP to ASN database\n    # the sample database can be downloaded or built - see below\n    asndb = pyasn.pyasn('ipasn_20140513.dat')\n\n    asndb.lookup('8.8.8.8')\n    # should return: (15169, '8.8.8.0/24'), the origin AS, and the BGP prefix it matches\n\n    asndb.get_as_prefixes(1128)\n    # returns ['130.161.0.0/16', '131.180.0.0/16', '145.94.0.0/16'], TU-Delft prefixes\n\n\nIPASN Data Files\n================\nIPASN data files are a long list of prefixes used to lookup AS number for IPs. An excerpt from such a file looks\nlike this: ::\n\n    ; IP-ASN32-DAT file\n    ; Original file : <Path to a rib file>\n    ; Converted on  : Tue May 13 22:03:05 2014\n    ; CIDRs         : 512490\n    ;\n    1.0.0.0/24  15169\n    1.0.128.0/17        9737\n    1.0.128.0/18        9737\n    1.0.128.0/19        9737\n    1.0.129.0/24        23969\n    ...\n\nIPASN data files can be created by downloading MRT/RIB BGP archives from Routeviews (or similar sources),\nand parsing them using provided scripts that tail the BGP AS-Path. This can be done simply as follows: ::\n\n    pyasn_util_download.py --latest\n    pyasn_util_convert.py --single <Downloaded RIB File> <ipasn_db_file_name>\n\n\n**NOTE:** These scripts are by default installed to ``/usr/local/bin`` and can be executed directly. If you installed\nthe package to a user directory, these scripts will not be on the path and you will have to invoke them by navigating\nto the folder in which they have been copied (e.g. ``~/.local/bin``).\n\nWe also provide download links to a large number of previously generated IPASN data files. These are based on\nweekly  snapshots of the Routeviews data from 2005-2015, accessible here:\nhttp://data.3tu.nl/repository/uuid:d4d23b8e-2077-4592-8b47-cb476ad16e12\n\n**New in v1.6:** To save disk space, you can gzip IPASN data files. The load time will be slighlty longer.\n\n\nPerformance Tip\n===============\nInitial loading of a IPASN data file is the most heavy operation of the package. For fast lookups using multiple\nIPASN data files, for instance for historical lookups on multiple dates, we recommend caching of loaded data files\nfor better performance.\n\n\nUninstalling pyasn\n==================\nYou can remove *pyasn* as follows: ::\n\n    pip uninstall pyasn\n\nIf you built and installed the package your self use the recorded log to remove the installed files.\n\n**Removing PyASN version 1.2**: *pyasn* v1.5/1.6 and v1.2 can be installed side by side (due to lower-cased package\nname). To avoid mistakes, you can uninstall the old **PyASN** by deleting the following files from your Python\ninstallation: ::\n\n    PYTHONDIR/dist-packages/PyASN.so\n    PYTHONDIR/dist-packages/PyASN-1.2.egg-info\n\n\nPackage Structure\n=================\nThe main portions of the directory tree are as follows: ::\n\n    .\n    ├── pyasn/__init__.py       # Python code of the main pyasn module\n    ├── pyasn/pyasn_radix.c     # C extension code (Python RADIX module with bulk load)\n    ├── pyasn/_radix/*          # C extension code (Based on original RADIX code from MRTd)\n    ├── pyasn/mrtx.py           # python module used to convert MRT files to pyasn DB files\n    ├── pyasn-utils/*.py        # Scripts to download & convert BGP MRT dumps to IPASN databases\n    ├── data/                   # Test Resources and some sample DBs to use\n    ├── tests/                  # Tests\n    └── setup.py                # Standard setup.py for installation/testing/etc.\n\n\n\nTesting pyasn Sources\n=====================\nA limited number of unit tests are provided in the ``tests/`` directory when downlading the sources. They can be\nrun with the following command: ::\n\n    python setup.py test\n\nThis beta release has been tested under python version 2.6, 2.7, 3.3, 3.4 and 3.5. We appreciate contributions towards\ntesting *pyasn*!\n\n**New in v1.6:** pyasn_util_convert.py offers a '--dump-screen' option which shows the MRT/RIB archive contents and\nthe chosen origin-AS.\n\n\nLicense & Acknowledgments\n=========================\n*pyasn* is licensed under the MIT license.\n\nIt extends code from py-radix (Michael J. Schultz and Damien Miller),  and improves upon it in several ways, for\ninstance in lowering memory usage and adding bulk prefix/origin load. The underlying radix tree implementation is\ntaken (and modified) from MRTd. These are all subject to their respective licenses.  Please see the LICENSE file\nfor details.\n\nThanks to Dr. Chris Lee (of Shadowserver) for proposing the use of radix trees.\n\nA handful of GitHub developers have contributed features and bug fixes to the latest releases.\nMany thanks to all of them.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": null,
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/hadiasghari/pyasn",
            "keywords": "ip asn autonomous system bgp whois prefix radix python routing networking",
            "license": "MIT",
            "maintainer": null,
            "maintainer_email": null,
            "name": "pyasn",
            "package_url": "https://pypi.org/project/pyasn/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/pyasn/",
            "project_urls": {
               "Homepage": "https://github.com/hadiasghari/pyasn"
            },
            "release_url": "https://pypi.org/project/pyasn/1.6.0b1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Offline IP address to Autonomous System Number lookup module.",
            "version": "1.6.0b1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Perdix Software",
            "author_email": "ssmith@perdixsw.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 2 - Pre-Alpha",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.4",
               "Programming Language :: Python :: 3.5",
               "Programming Language :: Python :: 3.6",
               "Topic :: Office/Business :: Financial",
               "Topic :: Scientific/Engineering :: Mathematics"
            ],
            "description": "UNKNOWN",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "https://www.github.com/perdixsw/umpy/tarball/0.1.0",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://www.github.com/perdixsw/umpy",
            "keywords": "units,measure,measurement,conversion,converter",
            "license": "MIT",
            "maintainer": null,
            "maintainer_email": null,
            "name": "umpy",
            "package_url": "https://pypi.org/project/umpy/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/umpy/",
            "project_urls": {
               "Download": "https://www.github.com/perdixsw/umpy/tarball/0.1.0",
               "Homepage": "https://www.github.com/perdixsw/umpy"
            },
            "release_url": "https://pypi.org/project/umpy/0.1.0/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Simple unit of measure conversion for python, optimized for manufacturing contexts.",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Jay Marcyes",
            "author_email": "jay@marcyes.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Environment :: Console",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Topic :: Software Development :: Testing"
            ],
            "description": "Pyt\n===\n\nPyt is a lightweight wrapper around `Python’s unittest\nmodule <https://docs.python.org/3/library/unittest.html>`__ that adds\nsome nice features and enhancements over the stock ``unittest`` module.\n\nQuickstart\n~~~~~~~~~~\n\nPyt overrides unittest’s built-in pathfinding to be smarter and less\nverbose, so you can match tests using prefix matching which makes\nrunning a test like:\n\n::\n\n   $ python -m unittest tests.foo_test.BarTestCase.test_che\n\nas simple as:\n\n::\n\n   $ pyt foo.Bar.che\n\nBut it’s even less verbose if you want it to be, pyt can reach into the\nmodules and classes to do its matching, so you don’t even need to\nspecify the module and class if you don’t want to:\n\n::\n\n   $ pyt che\n\nMore examples\n^^^^^^^^^^^^^\n\nTo run all the ``Happy`` tests:\n\n::\n\n   $ pyt Happy\n\nTo run all the ``newmodule`` tests:\n\n::\n\n   $ pyt newmodule\n\nTo run more than one test:\n\n::\n\n   $ pyt test1 test2 ...\n\nTo run every test ``pyt`` can find:\n\n::\n\n   $ pyt\n\nAnd the way I like to run all tests in the current directory:\n\n::\n\n   $ pyt -vb\n\nWhich can also be written:\n\n::\n\n   $ pyt --verbose --buffer\n\nFlags\n~~~~~\n\nTo see everything pyt can do\n\n::\n\n   $ pyt --help\n\n–warnings\n^^^^^^^^^\n\nThis will convert warnings into errors.\n\n::\n\n   $ pyt --warnings\n\n–rerun\n^^^^^^\n\nIf your last testrun had failing tests this will rerun only the tests\nthat failed.\n\n::\n\n   $pyt --rerun\n\nThings to be aware of\n~~~~~~~~~~~~~~~~~~~~~\n\npyt uses Python’s PEP 8 style conventions\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n``pyt`` uses `Python’s code styling\nconventions <http://www.python.org/dev/peps/pep-0008/>`__ to decide what\nis the module and class, so, given input like this:\n\n::\n\n   $ pyt foo.bar.Baz.che\n\n``pyt`` will consider ``foo.bar`` to be the module, ``Baz`` to be a\nclass (because it starts with a capital letter), and ``che`` to be a\nmethod (since it comes after the class).\n\nLikewise, ``pyt`` uses unittest conventions, so a test module should end\nwith ``_test`` (eg, ``foo.bar_test``) or start with test (eg,\n``test_foo.py``) and a TestCase class should extend\n``unittest.TestCase``, and test methods should start with ``test_`` (eg,\n``test_che``).\n\nVague input can cause pyt to run more tests than you expect\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSo if you have something like this:\n\n::\n\n   project/\n     __init__.py\n     user.py\n     foo/\n       __init__.py\n       user.py\n     tests/\n       __init__.py\n       user_test.py\n       foo/\n         __init__.py\n         user_test.py\n\nAnd you want to run tests for ``foo.user`` and you run:\n\n::\n\n   $ pyt user\n\nit will run both ``tests/user_test`` and ``tests.foo.user_test``, the\nsolution is to just be more verbose when you have to be:\n\n::\n\n   $ pyt foo.user\n\nEnvironment Variables\n^^^^^^^^^^^^^^^^^^^^^\n\nIf you are running the tests within pyt, you might notice there is an\nenvironment variable ``PYT_TEST_COUNT`` that contains the count of how\nmany tests pyt found to run.\n\nInstallation\n------------\n\nUse ``pip``:\n\n::\n\n   $ pip install pyt\n\nYou can also get it directly from the repo:\n\n::\n\n   $ pip install --upgrade git+https://github.com/Jaymon/pyt#egg=pyt\n\nIf you install pyt using Python 3 it can also be invoked using the\n``pyt3`` command:\n\n::\n\n   $ pyt3 --help\n\nLikewise, Python 2 installs a ``pyt2`` command:\n\n::\n\n   $ pyt2 --help\n\nTesting\n-------\n\nTesting in 2.7 on most systems:\n\n::\n\n   $ python -m unittest pyt_test\n\nTesting in 3.5 on MacOS:\n\n::\n\n   $ python3.5 -m unittest pyt_test\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "http://github.com/Jaymon/pyt",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyt",
            "package_url": "https://pypi.org/project/pyt/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyt/",
            "project_urls": {
               "Homepage": "http://github.com/Jaymon/pyt"
            },
            "release_url": "https://pypi.org/project/pyt/1.0.5/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "easily run python unit tests",
            "version": "1.0.5",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Bradley Odell",
            "author_email": "btodell@hotmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Environment :: Console",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
               "Natural Language :: English",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 2.6",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Topic :: Software Development :: Build Tools"
            ],
            "description": "pyz\n===\n\n*Packages all source code and dependencies into a single Python zip application.*\n\nSummary\n-------\n\nDeploying a Python application any larger than a single file is\ncumbersome - this library aims to solve that problem.\n\nPython has been able to run code from within a zip file since version\n2.6. Python 3.5 introduced the `zipapp <https://docs.python.org/3/library/zipapp.html>`__ module\nwhich aims to simplify the process of creating a zip application.\nHowever, **zipapp** isn't a complete solution to the problem - it\ndoesn't handle dependencies and it doesn't include certain extra\nfeatures that this library provides.\n\nThis library allows you to bundle all of your Python code **AND** your\ndependencies into a single Python zip application file.\n\nNote: The dependency bundling feature is not implemented yet, but it is\nin the works!\n\nFeatures\n--------\n\n1. Bundle all Python source code with fine-grained control over included files.\n2. Ability to \"unixify\" the output application by prepending a customizable\n   `shebang <https://en.wikipedia.org/wiki/Shebang_(Unix)>`__.\n3. Python interpreter version check - display a friendly notice instead\n   of a Python exception if the user runs your application using an\n   unsupported Python version.\n\nPlanned\n-------\n\n1. Automatically identify dependencies and package them accordingly.\n",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "https://github.com/BTOdell/pyz/archive/0.4.3.tar.gz",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/BTOdell/pyz",
            "keywords": "pyz zip app zipapp bundle dependencies library",
            "license": "GPLv3",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyz",
            "package_url": "https://pypi.org/project/pyz/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyz/",
            "project_urls": {
               "Download": "https://github.com/BTOdell/pyz/archive/0.4.3.tar.gz",
               "Homepage": "https://github.com/BTOdell/pyz"
            },
            "release_url": "https://pypi.org/project/pyz/0.4.3/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Packages all source code and dependencies into a single Python zip application.",
            "version": "0.4.3",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Val Neekman",
            "author_email": "info@neekware.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 3 - Alpha",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Operating System :: POSIX",
               "Programming Language :: Python",
               "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description": "AWSLI\n====================\n\n**Amazon Web Services Line Interpreter**\n\n**Author:** Val Neekman [ info@neekware.com, @vneekman ]\n\nOverview\n========\n\nA Line Interpreter for Amazon Web Services.\n\nHow to install\n==================\n\n    1. easy_install awsli\n    2. pip install awsli\n    3. git clone http://github.com/un33k/awsli\n        a. cd awsli\n        b. run python setup.py\n    4. wget https://github.com/un33k/awsli/zipball/master\n        a. unzip the downloaded file\n        b. cd into awsli-* directory\n        c. run python setup.py\n\nHow to use\n=================\n\n``Usage``\n\n``Note:``\n\nRunning the tests\n=================\n\nTo run the tests against the current environment:\n\n    python test.py\n\nChangelog\n=========\n\n0.1\n-----\n\n* Initial release\n\n\nLicense\n=======\n\nCopyright (c) 2012, Val Neekman\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without \nmodification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this \nlist of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this \nlist of conditions and the following disclaimer in the documentation and/or \nother materials provided with the distribution.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND \nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED \nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE \nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE \nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL \nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR \nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, \nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE \nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/un33k/awsli",
            "keywords": null,
            "license": "BSD",
            "maintainer": null,
            "maintainer_email": null,
            "name": "awsli",
            "package_url": "https://pypi.org/project/awsli/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/awsli/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/un33k/awsli"
            },
            "release_url": "https://pypi.org/project/awsli/0.0.1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "A Line Interpreter for Amazon Web Services",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Armin Ronacher",
            "author_email": "armin.ronacher@active-4.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Environment :: Web Environment",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
               "Topic :: Software Development :: Libraries :: Python Modules",
               "Topic :: Text Processing :: Markup :: HTML"
            ],
            "description": "jinja\n~~~~~\n\nJinja is a `sandboxed`_ template engine written in pure Python. It\nprovides a `Django`_ like non-XML syntax and compiles templates into\nexecutable python code. It's basically a combination of Django templates\nand python code.\n\nNutshell\n--------\n\nHere a small example of a Jinja template::\n\n    {% extends 'base.html' %}\n    {% block title %}Memberlist{% endblock %}\n    {% block content %}\n      <ul>\n      {% for user in users %}\n        <li><a href=\"{{ user.url|e }}\">{{ user.username|e }}</a></li>\n      {% endfor %}\n      </ul>\n    {% endblock %}\n\nPhilosophy\n----------\n\nApplication logic is for the controller but don't try to make the life\nfor the template designer too hard by giving him too few functionality.\n\nFor more informations visit the new `jinja webpage`_ and `documentation`_.\n\nNote\n----\n\nThis is the Jinja 1.0 release which is completely incompatible with the\nold \"pre 1.0\" branch. The old branch will still receive security updates\nand bugfixes but the 1.0 branch will be the only version that receives\nsupport.\n\nIf you have an application that uses Jinja 0.9 and won't be updated in\nthe near future the best idea is to ship a Jinja 0.9 checkout together\nwith the application.\n\nThe `Jinja tip`_ is installable via `easy_install` with ``easy_install\nJinja==dev``.\n\n.. _sandboxed: http://en.wikipedia.org/wiki/Sandbox_(computer_security)\n.. _Django: http://www.djangoproject.com/\n.. _jinja webpage: http://jinja.pocoo.org/\n.. _documentation: http://jinja.pocoo.org/documentation/index.html\n.. _Jinja tip: http://dev.pocoo.org/hg/jinja-main/archive/tip.tar.gz#egg=Jinja-dev\n\n\n:copyright: 2007 by Armin Ronacher.\n:license: BSD, see LICENSE for more details.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "http://jinja.pocoo.org/",
            "keywords": "python.templating.engines",
            "license": "BSD",
            "maintainer": null,
            "maintainer_email": null,
            "name": "Jinja",
            "package_url": "https://pypi.org/project/Jinja/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/Jinja/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "http://jinja.pocoo.org/"
            },
            "release_url": "https://pypi.org/project/Jinja/1.2/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "A small but fast and easy to use stand-alone template engine written in pure python.",
            "version": "1.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Hsiaoming Yang",
            "author_email": "me@lepture.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Environment :: Console",
               "Environment :: Web Environment",
               "Framework :: Django",
               "Framework :: Flask",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.5",
               "Programming Language :: Python :: 3.6",
               "Programming Language :: Python :: 3.7",
               "Programming Language :: Python :: 3.8",
               "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
               "Topic :: Internet :: WWW/HTTP :: WSGI :: Application",
               "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description": "Authlib\n=======\n\nThe ultimate Python library in building OAuth and OpenID Connect servers.\nJWS, JWK, JWA, JWT are included.\n\nUseful Links\n------------\n\n1. Homepage: https://authlib.org/\n2. Documentation: https://docs.authlib.org/\n3. Purchase Commercial License: https://authlib.org/plans\n4. Blog: https://blog.authlib.org/\n5. More Repositories: https://github.com/authlib\n6. Twitter: https://twitter.com/authlib\n7. Donate: https://www.patreon.com/lepture\n\nSpecifications\n--------------\n\n- RFC5849: The OAuth 1.0 Protocol\n- RFC6749: The OAuth 2.0 Authorization Framework\n- RFC6750: The OAuth 2.0 Authorization Framework: Bearer Token Usage\n- RFC7009: OAuth 2.0 Token Revocation\n- RFC7515: JSON Web Signature\n- RFC7516: JSON Web Encryption\n- RFC7517: JSON Web Key\n- RFC7518: JSON Web Algorithms\n- RFC7519: JSON Web Token\n- RFC7521: Assertion Framework for OAuth 2.0 Client Authentication and Authorization Grants\n- RFC7523: JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants\n- RFC7591: OAuth 2.0 Dynamic Client Registration Protocol\n- RFC7662: OAuth 2.0 Token Introspection\n- RFC8414: OAuth 2.0 Authorization Server Metadata\n- RFC8628: OAuth 2.0 Device Authorization Grant\n- OpenID Connect 1.0\n- OpenID Connect Discovery 1.0\n\nImplementations\n---------------\n\n- Requests OAuth 1 Session\n- Requests OAuth 2 Session\n- Requests Assertion Session\n- Flask OAuth 1/2 Client\n- Django OAuth 1/2 Client\n- Flask OAuth 1.0 Server\n- Flask OAuth 2.0 Server\n- Flask OpenID Connect 1.0\n- Django OAuth 1.0 Server\n- Django OAuth 2.0 Server\n- Django OpenID Connect 1.0\n\nLicense\n-------\n\nAuthlib is licensed under BSD. Please see LICENSE for licensing details.\n\nIf this license does not fit your company, consider to purchase a commercial\nlicense. Find more information on `Authlib Plans`_.\n\n.. _`Authlib Plans`: https://authlib.org/plans\n\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://authlib.org/",
            "keywords": "",
            "license": "BSD-3-Clause",
            "maintainer": "",
            "maintainer_email": "",
            "name": "Authlib",
            "package_url": "https://pypi.org/project/Authlib/",
            "platform": "any",
            "project_url": "https://pypi.org/project/Authlib/",
            "project_urls": {
               "Blog": "https://blog.authlib.org/",
               "Bug Tracker": "https://github.com/lepture/authlib/issues",
               "Commercial License": "https://authlib.org/plans",
               "Documentation": "https://docs.authlib.org/",
               "Donate": "https://lepture.com/donate",
               "Homepage": "https://authlib.org/",
               "Source Code": "https://github.com/lepture/authlib"
            },
            "release_url": "https://pypi.org/project/Authlib/0.14.3/",
            "requires_dist": [
               "cryptography",
               "requests ; extra == 'client'"
            ],
            "requires_python": "",
            "summary": "The ultimate Python library in building OAuth and OpenID Connect servers.",
            "version": "0.14.3",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Julien Bigot",
            "author_email": "julien.bigot@cea.fr",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Environment :: Console",
               "License :: OSI Approved :: MIT License"
            ],
            "description": "# zpp\n\nThis is zpp, the Z Pre-Processor.\n\nZpp transforms bash in a pre-processor for F90 source files.\nIt offers a set of functions specifically tailored to build clean Fortran90\ninterfaces by generating code for all types, kinds, and array ranks supported by\na given compiler.\n\n## Syntax\n\nZpp files are typically named `*.F90.zpp`.\n\nIn these files, the lines that start with `!$SH` are interpreted as bash lines. \nOther lines are copied as-is, except that variable substitution is operated as\nin a double-quoted string, including bash commands `${VAR}` or `$(command)`.\nIf inside a bash control block (`if`, `for`, etc.), the output generation obeys\nthe control statement.\n\nFor example, this code:\n```\n!$SH for GREETED in world universe multiverse ; do\nprint *, \"Hello ${GREETED}\"\n!$SH done\n```\n\nWould produce the following result:\n```\nprint *, \"Hello world\"\nprint *, \"Hello universe\"\nprint *, \"Hello multiverse\"\n```\n\n### Support functions\n\nPredefined bash functions, variable and code can be provided in `.zpp.sh` files\nthat can be included with `#!SH source <filename>.zpp.sh`.\n\n**Beware**: a file NEEDs to have the `.zpp.sh` extension to be included from\nzpp.\n\nZpp provides a standard library of functions tailored to build clean Fortran90\ninterfaces by generating code for all types, kinds, and array ranks supported by\na given compiler.\n\n#### zpp_str_repeat\n\nFound in `base.zpp.sh`\n\nOutputs a string multiple times.\n\nParameters:\n1. the string to Repeat\n2. the lower bound of the iterations (inclusive)\n3. the upper bound of the iterations (inclusive)\n4. the string separator\n5. the string starter\n6. the string ender\n\nRepeats string `$1` (`$3`-`$2`+1) times, separated by string `$4` inside `$5`\n`$6`.\n* If the number of repetitions is negative, the result is empty.\n* If `$1` contains the '@N' substring, it will be replaced by the iteration\n  number (from `$2` to `$3`).\n\nexample:\n```\n#!SH source base.zpp.sh\nzpp_str_repeat v@N 5 7 '...' '<<' '>>'\nzpp_str_repeat w@N 1 1 '...' '<<' '>>'\nzpp_str_repeat x@N 1 0 '...' '<<' '>>'\n```\noutput:\n```\n<<v5...v6...v7>>\n<<w1>>\n```\n\n#### zpp_str_repeat_reverse\n\nFound in `base.zpp.sh`\n\nOutputs a string multiple times in reverse order.\n\nParameters:\n1. the string to Repeat\n2. the upper bound of the iterations (inclusive)\n3. the lower bound of the iterations (inclusive)\n4. the string separator\n5. the string starter\n6. the string ender\n\nRepeats string `$1` (`$2`-`$3`+1) times, separated by string `$4` inside `$5`\n`$6`.\n* If the number of repetitions is negative, the result is empty.\n* If `$1` contains the '@N' substring, it will be replaced by the iteration\n  number (from `$2` to `$3`, i.e. upper to lower).\n\nexample:\n```\n#!SH source base.zpp.sh\nzpp_str_repeat_reverse v@N 5 7 '...' '<<' '>>'\nzpp_str_repeat_reverse w@N 1 1 '...' '<<' '>>'\nzpp_str_repeat_reverse x@N 1 0 '...' '<<' '>>'\n```\noutput:\n```\n<<v7...v6...v5>>\n<<w1>>\n```\n\n#### ZPP_FORT_TYPES\n\nFound in `fortran.zpp.sh`\n\nThe list of types supported by the fortran compiler as zpp:typeIDs.\n\nThe compiler ID should be provided in `ZPP_CONFIG` as `config.<ID>`.\nThe supported predefined IDs are: `Gnu`, `Intel`, `PGI` and `XL`.\nYou can also provide definitions for an additional compiler by defining\n`ZPP_FORT_TYPES` in a file named `config.<ID>.zpp.sh`.\n\nIf you use cmake, it will automatically generate such a file for your compiler\nand define  `ZPP_CONFIG` so you don't have to handle it.\n\n### zpp_fort_array_desc\n\nFound in `fortran.zpp.sh`\n\nOutputs an assumed shaped array descriptor of the provided size.\n\nParameters:\n1. the size of the assumed shaped array\n\nexample:\n```\n#!SH source fortran.zpp.sh\ninteger:: scalar$(zpp_fort_array_desc 0)\ninteger:: array1d$(zpp_fort_array_desc 1)\ninteger:: array2d$(zpp_fort_array_desc 2)\n```\noutput:\n```\ninteger:: scalar\ninteger:: array1d(:)\ninteger:: array2d(:,:)\n```\n\n### zpp_fort_ptype\n\nFound in `fortran.zpp.sh`\n\nOutputs the type associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\nexample:\n```\n#!SH source fortran.zpp.sh\n!$SH for T in ${ZPP_FORT_TYPES} ; do\n$(zpp_fort_ptype $1)\n!$SH done\n```\nexample output:\n```\nCHARACTER\nCOMPLEX\nCOMPLEX\nINTEGER\nINTEGER\nINTEGER\nINTEGER\nLOGICAL\nREAL\nREAL\n```\n\n### zpp_fort_kind\n\nFound in `fortran.zpp.sh`\n\nOutputs the kind associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\nexample:\n```\n#!SH source fortran.zpp.sh\n!$SH for T in ${ZPP_FORT_TYPES} ; do\n$(zpp_fort_kind $1)\n!$SH done\n```\nexample output:\n```\n1\n4\n8\n1\n2\n4\n8\n1\n4\n8\n```\n\n### zpp_fort_type\n\nFound in `fortran.zpp.sh`\n\nOutputs the full type (with kind included) associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n2. additional attributes for the type\n\nexample:\n```\n#!SH source fortran.zpp.sh\n!$SH for T in ${MY_CHAR_TYPES} ; do\n$(zpp_fort_type $1)\n$(zpp_fort_type $1 \"len=5\")\n!$SH done\n```\nexample output:\n```\nCHARACTER(KIND=1)\nCHARACTER(KIND=1,len=5)\n```\n\n### zpp_fort_sizeof\n\nFound in `fortran.zpp.sh`\n\nOutputs the size in bits associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\n### zpp_fort_io_format\n\nFound in `fortran.zpp.sh`\n\nOutputs an IO descriptor suitable for a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\n### ZPP_HDF5F_TYPES\n\nFound in `hdf5_fortran.zpp.sh`\n\nA list of zpp:typeIDs supported by HDF5.\n\n### hdf5_constant\n\nFound in `hdf5_fortran.zpp.sh`\n\nOutputs the HDF5 type constant associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\nexample:\n```\n#!SH source hdf5_fortran.zpp.sh\n!$SH for T in ${ZPP_HDF5F_TYPES} ; do\n$(hdf5_constant $1)\n!$SH done\n```\nexample output:\n```\nH5T_NATIVE_INTEGER\nH5T_NATIVE_REAL\nH5T_NATIVE_REAL\nH5T_NATIVE_CHARACTER\n```\n\n\n## Command-line interface\n\nZpp basic usage is as follow:\n```\nUsage: zpp [Options...] <source> [<destination>]\n  use `zpp -h' for more info\n\nPreprocesses BASH in-line commands in a source file\n\nOptions:\n  --version        show program's version number and exit\n  -h, --help       show this help message and exit\n  -I DIR           Add DIR to search list for source directives\n  -o FILE          Place the preprocessed code in file FILE.\n  -D OPTION=VALUE  Set the value of OPTION to VALUE\n```\n\n## CMake interface\n\nSupport is provided for using zpp from CMake based projects, but you can use\nit from plain Makefiles too.\n\nThere are two ways you can use zpp from your CMake project:\n* with `add_subdirectory`: include zpp in your project and use it directly from\n  there,\n* with `find_package`: install zpp and use it as an external dependency of your\n  project.\n\n#### CMake subdirectory usage\n\nUsing zpp with `add_subdirectory` is very simple.\nJust copy the `zpp` directory in your source and point to it with\n`add_subdirectory(zpp)`.\nThe `zpp_preprocess` then becomes available to process zpp files.\n\nThis is demonstrated in `example/cmake_subdirectory`.\n\n#### CMake find usage\n\nUsing zpp with `find_package` is no more complex.\nIf zpp is installed, just add a `find_package(zpp REQUIRED)`.\nThe `zpp_preprocess` then becomes available to process zpp files.\n\nThis is demonstrated in `example/cmake_find`.\n\n## GMake usage\n\nUsing zpp from a GNU Makefile is slightly less powerful than from CMake.\nThe types and kinds supported by the Fortran compiler will not be automatically\ndetected.\nPredefined lists of supported types for well known compilers are provided\ninstead.\n\nTo use zpp from a Makefile, include the `share/zpp/zpp.mk` file (either from an\ninstalled location or from a subdirectory in your project).\nYou can then set the `zpp_COMPILER_ID` variable to the compiler you use and\n`.F90` files will be automatically generated from their `.F90.zpp` equivalent.\nThe `zppFLAGS` variable is automatically passed to zpp similarly to `CFLAGS` or\n`CXXFLAGS` for `cc` and `cxx`.\n\nThis is demonstrated in `example/cmake_makefile`.\n\n## Installation\n\nZpp can be installed using the usual python way with `setup.py`.\n```\n./setup.py --help\n```\n\nThe cmake approach is deprecated.\n\n## FAQ\n\nQ. Isn't zpp redundant with assumed type parameters?\n\nA.\nThe assumed type parameters functionality allows to implement part of what can\nbe done with zpp (support for all kinds of a type). However as of 2013 it was\nnot correctly supported on most compilers installed on the supercomputers.\n\nIn addition, many things can be done with zpp but not with assumed type\nparameters, such as support for variable array rank or small variations of the\ncode depending on the kind.\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "bash Fortran pre-processor",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "zpp",
            "package_url": "https://pypi.org/project/zpp/",
            "platform": "",
            "project_url": "https://pypi.org/project/zpp/",
            "project_urls": {
               "Source Code": "https://github.com/pdidev/zpp/"
            },
            "release_url": "https://pypi.org/project/zpp/1.0.4/",
            "requires_dist": [
               "setuptools"
            ],
            "requires_python": "",
            "summary": "a Bash Pre-Processor for Fortran. ZPP is useful in order to build clean Fortran90 interfaces. It allows to generate Fortran code for all types, kinds, and array ranks supported by the compiler.",
            "version": "1.0.4",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Dheepak Krishnamurthy",
            "author_email": "kdheepak89@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# zip [![](https://travis-ci.org/kdheepak/zip.svg?branch=master)](https://travis-ci.org/kdheepak/zip/branches)\n\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/kdheepak/zip",
            "keywords": "",
            "license": "Revised BSD License",
            "maintainer": "",
            "maintainer_email": "",
            "name": "zip",
            "package_url": "https://pypi.org/project/zip/",
            "platform": "",
            "project_url": "https://pypi.org/project/zip/",
            "project_urls": {
               "Homepage": "https://github.com/kdheepak/zip"
            },
            "release_url": "https://pypi.org/project/zip/0.0.2/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Intel Corporation",
            "author_email": "scripting@intel.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "Intended Audience :: Education",
               "Intended Audience :: Other Audience",
               "Intended Audience :: Science/Research",
               "Intended Audience :: System Administrators",
               "License :: Other/Proprietary License",
               "Operating System :: MacOS",
               "Operating System :: Microsoft :: Windows",
               "Operating System :: POSIX",
               "Operating System :: Unix",
               "Topic :: Software Development :: Libraries"
            ],
            "description": "Intel(R) Performance Primitives provides developers with high-quality, production-ready, low-level building blocks for image processing, signal processing, and data processing (data compression and decompression, and cryptography) applications.\n\nOne of many Intel(R) accelerated Python packages and performance library runtimes available on [PyPI](https://software.intel.com/en-us/articles/installing-the-intel-distribution-for-python-and-intel-performance-libraries-with-pip-and), and as part of [Intel(R) Distribution for Python](https://software.intel.com/en-us/distribution-for-python).\n\nFor latest release updates and security notifications, please [subscribe](https://software.intel.com/en-us/forums/intel-distribution-for-python) to the Intel(R) Distribution for Python Community forum.\n\nFree to use and redistribute pursuant to the [Intel Simplified Software License](https://software.intel.com/en-us/license/intel-simplified-software-license).\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://software.intel.com/en-us/articles/empowering-science-with-high-performance-python",
            "keywords": "",
            "license": "Proprietary - Intel",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ipp",
            "package_url": "https://pypi.org/project/ipp/",
            "platform": "",
            "project_url": "https://pypi.org/project/ipp/",
            "project_urls": {
               "Homepage": "https://software.intel.com/en-us/articles/empowering-science-with-high-performance-python"
            },
            "release_url": "https://pypi.org/project/ipp/2019.4.243/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Intel(R) Performance Primitives",
            "version": "2019.4.243",
            "yanked": false,
            "yanked_reason": null
         }
      ],
      "jinja2": [
         {
            "author": "Gabriel Alves",
            "author_email": "gabriel.alves@pickcells.bio",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# sx\n#### Framework to manage gRPC-based microservices application",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "https://github.com/itsmealves/sx/releases/download/0.6.0/sx-0.6.0.tar.gz",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/itsmealves/sx",
            "keywords": "sx microservices rpc grpc Framework",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "sx",
            "package_url": "https://pypi.org/project/sx/",
            "platform": "",
            "project_url": "https://pypi.org/project/sx/",
            "project_urls": {
               "Download": "https://github.com/itsmealves/sx/releases/download/0.6.0/sx-0.6.0.tar.gz",
               "Homepage": "https://github.com/itsmealves/sx"
            },
            "release_url": "https://pypi.org/project/sx/0.6.0/",
            "requires_dist": null,
            "requires_python": ">=3.5",
            "summary": "Framework to manage gRPC-based microservices application",
            "version": "0.6.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "chrysn",
            "author_email": "chrysn@fsfe.org",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 3 - Alpha",
               "Intended Audience :: Education",
               "Intended Audience :: Science/Research",
               "License :: OSI Approved :: GNU General Public License (GPL)"
            ],
            "description": "UNKNOWN",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "UNKNOWN",
            "keywords": null,
            "license": "GPL",
            "maintainer": null,
            "maintainer_email": null,
            "name": "si",
            "package_url": "https://pypi.org/project/si/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/si/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "UNKNOWN"
            },
            "release_url": "https://pypi.org/project/si/0.1.1-1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Module to represent SI units",
            "version": "0.1.1-1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "leesoar",
            "author_email": "secure@tom.com",
            "bugtrack_url": null,
            "classifiers": [
               "License :: OSI Approved :: MIT License",
               "Programming Language :: Python :: 3.5",
               "Programming Language :: Python :: 3.6",
               "Programming Language :: Python :: 3.7",
               "Programming Language :: Python :: Implementation :: CPython",
               "Programming Language :: Python :: Implementation :: PyPy"
            ],
            "description": "\nDevelop soon\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://leesoar.com",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ida",
            "package_url": "https://pypi.org/project/ida/",
            "platform": "",
            "project_url": "https://pypi.org/project/ida/",
            "project_urls": {
               "Homepage": "https://leesoar.com"
            },
            "release_url": "https://pypi.org/project/ida/0.0.1/",
            "requires_dist": null,
            "requires_python": ">=3.3.0",
            "summary": "Develop soon",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Xavier Bruhiere",
            "author_email": "xavier.bruhiere@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 2 - Pre-Alpha",
               "Intended Audience :: Science/Research",
               "License :: OSI Approved :: Apache Software License",
               "Natural Language :: English",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2.7",
               "Topic :: Software Development",
               "Topic :: System :: Shells"
            ],
            "description": "python library DNA\n==================\n\n[![Coverage Status](https://coveralls.io/repos/hivetech/dna/badge.png)](https://coveralls.io/r/hivetech/dna)\n\n> Generic python utilities\n\nInstallation\n------------\n\n```console\npip install dna\n```\n\nExample\n-----\n\n```python\nimport dna.utils as utils\nimport dna.logger as logger\n\nlog_setup = logger.setup(level='info', filename='app.log')\nlog = logger.logger(__name__)\nwith log_setup.applicationbound():\n\n    log.info('hello', where='world')\n\n    useless_id = utils.generate_unique_id()\n    useless_name = utils.generate_random_name()\n\n    if utils.docker_check() and utils.is_running('ipyhon'):\n\n        print utils.Version('0.4.1')\n\n        module = utils.dynamic_import('dna.settings', 'LOG')\n        print utils.emphasis(module, align=False)\n\n        print utils.self_ip()\n```",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/hivetech/dna",
            "keywords": null,
            "license": "Apache 2.0",
            "maintainer": null,
            "maintainer_email": null,
            "name": "dna",
            "package_url": "https://pypi.org/project/dna/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/dna/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/hivetech/dna"
            },
            "release_url": "https://pypi.org/project/dna/0.0.7/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Generic python utilities",
            "version": "0.0.7",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Christopher Brown",
            "author_email": "io@henrian.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 2 - Pre-Alpha",
               "License :: OSI Approved :: MIT License",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.6",
               "Programming Language :: Python :: 2.7",
               "Topic :: Software Development :: Libraries :: Python Modules",
               "Topic :: System :: Archiving :: Packaging",
               "Topic :: System :: Filesystems"
            ],
            "description": "Python (package) installation\n-----------------------------\n\nGetting started from `PyPI <https://pypi.python.org/pypi/pi/>`__:\n\n::\n\n    easy_install pi\n\n`Whence easy\\_install? <#setuptools>`__\n\nCommands\n--------\n\n-  Uninstall package named \"pip\":\n\n   ::\n\n       pi uninstall pip\n\n-  Install package named \"filesequence\":\n\n   ::\n\n       pi install filesequence\n\n-  List paths that Python searches for imported modules:\n\n   ::\n\n       pi paths\n\n-  List installed packages:\n\n   ::\n\n       pi list\n\nTesting\n-------\n\nContinuous integration:\n\n|Travis CI Build Status|\n\nOr run tests locally:\n\n::\n\n    nosetests --with-doctest\n\nRelated\n~~~~~~~\n\n-  http://guide.python-distribute.org/creation.html\n-  `distribute/pkg\\_resources\n   docs <http://pythonhosted.org/distribute/pkg_resources.html>`__\n-  standard library\n   ```site`` <http://docs.python.org/2/library/site.html>`__\n-  standard library `environment\n   variables <http://docs.python.org/2/using/cmdline.html#environment-variables>`__\n\nSetuptools\n~~~~~~~~~~\n\n``pi`` does not yet completely replace\n`setuptools <https://pypi.python.org/pypi/setuptools>`__. You may need\nto install it first:\n\n+----------+-----------------------------------------+\n| Distro   | Package manager command                 |\n+==========+=========================================+\n| Ubuntu   | ``apt-get install python-setuptools``   |\n+----------+-----------------------------------------+\n| Mac      | built-in                                |\n+----------+-----------------------------------------+\n| Arch     | ``pacman -S python-setuptools``         |\n+----------+-----------------------------------------+\n| CentOS   | ``yum install python-setuptools``       |\n+----------+-----------------------------------------+\n\nLicense\n-------\n\nCopyright (c) 2013 Christopher Brown. `MIT\nLicensed <https://raw.github.com/chbrown/pi/master/LICENSE>`__.\n\n.. |Travis CI Build Status| image:: https://travis-ci.org/chbrown/pi.png?branch=master\n   :target: https://travis-ci.org/chbrown/pi",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/chbrown/pi",
            "keywords": null,
            "license": "Copyright (c) 2013 Christopher Brown\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.",
            "maintainer": null,
            "maintainer_email": null,
            "name": "pi",
            "package_url": "https://pypi.org/project/pi/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/pi/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/chbrown/pi"
            },
            "release_url": "https://pypi.org/project/pi/0.1.2/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Simpler python package installation",
            "version": "0.1.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ip",
            "package_url": "https://pypi.org/project/ip/",
            "platform": "",
            "project_url": "https://pypi.org/project/ip/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/ip/0.0.1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Vitalii Vanovschi",
            "author_email": "support@parallelpython.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Natural Language :: English",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Topic :: Software Development",
               "Topic :: System :: Distributed Computing"
            ],
            "description": "Parallel Python module (PP) provides an easy and efficient way to create parallel-enabled applications for SMP computers and clusters. PP module features cross-platform portability and dynamic load balancing. Thus application written with PP will parallelize efficiently even on heterogeneous and multi-platform clusters (including clusters running other application with variable CPU loads). Visit http://www.parallelpython.com for further information.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "http://www.parallelpython.com/downloads/pp/pp-1.6.5.zip",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "http://www.parallelpython.com",
            "keywords": null,
            "license": "BSD-like",
            "maintainer": null,
            "maintainer_email": null,
            "name": "pp",
            "package_url": "https://pypi.org/project/pp/",
            "platform": "Windows,Linux,Unix",
            "project_url": "https://pypi.org/project/pp/",
            "project_urls": {
               "Download": "http://www.parallelpython.com/downloads/pp/pp-1.6.5.zip",
               "Homepage": "http://www.parallelpython.com"
            },
            "release_url": "https://pypi.org/project/pp/1.6.5/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Parallel and distributed programming for Python",
            "version": "1.6.5",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Marcus Donnelly",
            "author_email": "marcus.k.donnelly@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "Intended Audience :: Science/Research",
               "License :: OSI Approved :: BSD License",
               "Programming Language :: Python :: 3",
               "Topic :: Scientific/Engineering"
            ],
            "description": "",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "Oceanography,Utilities",
            "license": "BSD",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ocutils",
            "package_url": "https://pypi.org/project/ocutils/",
            "platform": "",
            "project_url": "https://pypi.org/project/ocutils/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/ocutils/1.1.1/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Utility functions for oceanography related work",
            "version": "1.1.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Kiana Alessandra V. Villaera",
            "author_email": "kiana.villaera@senti.com.ph",
            "bugtrack_url": null,
            "classifiers": [
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 3"
            ],
            "description": "Contains everything you might need to perform essential data center functions\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/K-Winkles/dcutils",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dcutils",
            "package_url": "https://pypi.org/project/dcutils/",
            "platform": "",
            "project_url": "https://pypi.org/project/dcutils/",
            "project_urls": {
               "Homepage": "https://github.com/K-Winkles/dcutils"
            },
            "release_url": "https://pypi.org/project/dcutils/0.6/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "A simple package for data center utilities",
            "version": "0.6",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Mike Kazantsev",
            "author_email": "mk.fraggod@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Intended Audience :: Developers",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3.5",
               "Topic :: Software Development",
               "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description": "pretty-yaml (or pyaml)\n======================\n\nPyYAML-based python module to produce pretty and readable YAML-serialized data.\n\nThis module is for serialization only, see `ruamel.yaml`_ module for literate\nYAML parsing (keeping track of comments, spacing, line/column numbers of values, etc).\n\n[note: to dump stuff parsed by ruamel.yaml with this module, use only ``YAML(typ='safe')`` there]\n\n.. contents::\n  :backlinks: none\n\n\nWarning\n-------\n\nPrime goal of this module is to produce human-readable output that can be easily\nmanipulated and re-used, but maybe with some occasional caveats.\n\nOne good example of such \"caveat\" is that e.g. ``{'foo': '123'}`` will serialize\nto ``foo: 123``, which for PyYAML would be a bug, as 123 will then be read back\nas an integer from that, but here it's a feature.\n\nSo please do not rely on the thing to produce output that can always be\ndeserialized exactly to what was exported, at least - use PyYAML (e.g. with\noptions from the next section) for that.\n\n\nWhat this module does and why\n-----------------------------\n\nYAML is generally nice and easy format to read *if* it was written by humans.\n\nPyYAML can a do fairly decent job of making stuff readable, and the best\ncombination of parameters for such output that I've seen so far is probably this one::\n\n  >>> m = [123, 45.67, {1: None, 2: False}, u'some text']\n  >>> data = dict(a=u'asldnsa\\nasldpáknsa\\n', b=u'whatever text', ma=m, mb=m)\n  >>> yaml.safe_dump(data, sys.stdout, allow_unicode=True, default_flow_style=False)\n  a: 'asldnsa\n\n    asldpáknsa\n\n    '\n  b: whatever text\n  ma: &id001\n  - 123\n  - 45.67\n  - 1: null\n    2: false\n  - some text\n  mb: *id001\n\npyaml tries to improve on that a bit, with the following tweaks:\n\n* Most human-friendly representation options in PyYAML (that I know of) get\n  picked as defaults.\n\n* Does not dump \"null\" values, if possible, replacing these with just empty\n  strings, which have the same meaning but reduce visual clutter and are easier\n  to edit.\n\n* Dicts, sets, OrderedDicts, defaultdicts, namedtuples, etc are representable\n  and get sorted on output (OrderedDicts and namedtuples keep their ordering),\n  so that output would be as diff-friendly as possible, and not arbitrarily\n  depend on python internals.\n\n  It appears that at least recent PyYAML versions also do such sorting for\n  python dicts.\n\n* List items get indented, as they should be.\n\n* bytestrings that can't be auto-converted to unicode raise error, as yaml has\n  no \"binary bytes\" (i.e. unix strings) type.\n\n* Attempt is made to pick more readable string representation styles, depending\n  on the value, e.g.::\n\n    >>> yaml.safe_dump(cert, sys.stdout)\n    cert: '-----BEGIN CERTIFICATE-----\n\n      MIIH3jCCBcagAwIBAgIJAJi7AjQ4Z87OMA0GCSqGSIb3DQEBCwUAMIHBMRcwFQYD\n\n      VQQKFA52YWxlcm9uLm5vX2lzcDEeMBwGA1UECxMVQ2VydGlmaWNhdGUgQXV0aG9y\n    ...\n\n    >>> pyaml.p(cert):\n    cert: |\n      -----BEGIN CERTIFICATE-----\n      MIIH3jCCBcagAwIBAgIJAJi7AjQ4Z87OMA0GCSqGSIb3DQEBCwUAMIHBMRcwFQYD\n      VQQKFA52YWxlcm9uLm5vX2lzcDEeMBwGA1UECxMVQ2VydGlmaWNhdGUgQXV0aG9y\n    ...\n\n* \"force_embed\" option to avoid having &id stuff scattered all over the output\n  (which might be beneficial in some cases, hence the option).\n\n* \"&id\" anchors, if used, get labels from the keys they get attached to,\n  not just use meaningless enumerators.\n\n* \"string_val_style\" option to only apply to strings that are values, not keys,\n  i.e::\n\n    >>> pyaml.p(data, string_val_style='\"')\n    key: \"value\\nasldpáknsa\\n\"\n    >>> yaml.safe_dump(data, sys.stdout, allow_unicode=True, default_style='\"')\n    \"key\": \"value\\nasldpáknsa\\n\"\n\n* \"sort_dicts=False\" option to leave dict item ordering to python, and not\n  force-sort them in yaml output, which can be important for python 3.6+ where\n  they retain ordering info.\n\n* Has an option to add vertical spacing (empty lines) between keys on different\n  depths, to make output much more seekable.\n\nResult for the (rather meaningless) example above (without any additional\ntweaks)::\n\n  >>> pyaml.p(data)\n  a: |\n    asldnsa\n    asldpáknsa\n  b: 'whatever text'\n  ma: &ma\n    - 123\n    - 45.67\n    - 1:\n      2: false\n    - 'some text'\n  mb: *ma\n\n----------\n\nExtended example::\n\n  >>> pyaml.dump(conf, sys.stdout, vspacing=[2, 1]):\n  destination:\n\n    encoding:\n      xz:\n        enabled: true\n        min_size: 5120\n        options:\n        path_filter:\n          - \\.(gz|bz2|t[gb]z2?|xz|lzma|7z|zip|rar)$\n          - \\.(rpm|deb|iso)$\n          - \\.(jpe?g|gif|png|mov|avi|ogg|mkv|webm|mp[34g]|flv|flac|ape|pdf|djvu)$\n          - \\.(sqlite3?|fossil|fsl)$\n          - \\.git/objects/[0-9a-f]+/[0-9a-f]+$\n\n    result:\n      append_to_file:\n      append_to_lafs_dir:\n      print_to_stdout: true\n\n    url: http://localhost:3456/uri\n\n\n  filter:\n    - /(CVS|RCS|SCCS|_darcs|\\{arch\\})/$\n    - /\\.(git|hg|bzr|svn|cvs)(/|ignore|attributes|tags)?$\n    - /=(RELEASE-ID|meta-update|update)$\n\n\n  http:\n\n    ca_certs_files: /etc/ssl/certs/ca-certificates.crt\n\n    debug_requests: false\n\n    request_pool_options:\n      cachedConnectionTimeout: 600\n      maxPersistentPerHost: 10\n      retryAutomatically: true\n\n\n  logging:\n\n    formatters:\n      basic:\n        datefmt: '%Y-%m-%d %H:%M:%S'\n        format: '%(asctime)s :: %(name)s :: %(levelname)s: %(message)s'\n\n    handlers:\n      console:\n        class: logging.StreamHandler\n        formatter: basic\n        level: custom\n        stream: ext://sys.stderr\n\n    loggers:\n      twisted:\n        handlers:\n          - console\n        level: 0\n\n    root:\n      handlers:\n        - console\n      level: custom\n\nNote that unless there are many moderately wide and deep trees of data, which\nare expected to be read and edited by people, it might be preferrable to\ndirectly use PyYAML regardless, as it won't introduce another (rather pointless\nin that case) dependency and a point of failure.\n\n\nSome Tricks\n-----------\n\n* Pretty-print any yaml or json (yaml subset) file from the shell::\n\n    % python -m pyaml /path/to/some/file.yaml\n    % curl -s https://www.githubstatus.com/api/v2/summary.json | python -m pyaml\n\n* Process and replace json/yaml file in-place::\n\n    % python -m pyaml -r file-with-json.data\n\n* Easier \"debug printf\" for more complex data (all funcs below are aliases to\n  same thing)::\n\n    pyaml.p(stuff)\n    pyaml.pprint(my_data)\n    pyaml.pprint('----- HOW DOES THAT BREAKS!?!?', input_data, some_var, more_stuff)\n    pyaml.print(data, file=sys.stderr) # needs \"from __future__ import print_function\"\n\n* Force all string values to a certain style (see info on these in\n  `PyYAML docs`_)::\n\n    pyaml.dump(many_weird_strings, string_val_style='|')\n    pyaml.dump(multiline_words, string_val_style='>')\n    pyaml.dump(no_want_quotes, string_val_style='plain')\n\n  Using ``pyaml.add_representer()`` (note \\*p\\*yaml) as suggested in\n  `this SO thread`_ (or `github-issue-7`_) should also work.\n\n* Control indent and width of the results::\n\n    pyaml.dump(wide_and_deep, indent=4, width=120)\n\n  These are actually keywords for PyYAML Emitter (passed to it from Dumper),\n  see more info on these in `PyYAML docs`_.\n\n* Dump multiple yaml documents into a file: ``pyaml.dump_all([data1, data2, data3], dst_file)``\n\n  explicit_start=True is implied, unless explicit_start=False is passed.\n\n.. _PyYAML docs: http://pyyaml.org/wiki/PyYAMLDocumentation#Scalars\n.. _this SO thread: http://stackoverflow.com/a/7445560\n.. _github-issue-7: https://github.com/mk-fg/pretty-yaml/issues/7\n\n\nInstallation\n------------\n\nIt's a regular package for Python (3.x or 2.x).\n\nModule uses PyYAML_ for processing of the actual YAML files and should pull it\nin as a dependency.\n\nDependency on unidecode_ module is optional and should only be necessary if\nsame-id objects or recursion is used within serialized data.\n\nBe sure to use python3/python2, pip3/pip2, easy_install-... binaries below,\nbased on which python version you want to install the module for, if you have\nseveral on the system (as is norm these days for py2-py3 transition).\n\nUsing pip_ is the best way::\n\n  % pip install pyaml\n\n(add --user option to install into $HOME for current user only)\n\nOr, if you don't have \"pip\" command::\n\n  % python -m ensurepip\n  % python -m pip install --upgrade pip\n  % python -m pip install pyaml\n\n(same suggestion wrt \"install --user\" as above)\n\nOn a very old systems, one of these might work::\n\n  % curl https://bootstrap.pypa.io/get-pip.py | python\n  % pip install pyaml\n\n  % easy_install pyaml\n\n  % git clone --depth=1 https://github.com/mk-fg/pretty-yaml\n  % cd pretty-yaml\n  % python setup.py install\n\n(all of install-commands here also have --user option,\nsee also `pip docs \"installing\" section`_)\n\nCurrent-git version can be installed like this::\n\n  % pip install 'git+https://github.com/mk-fg/pretty-yaml#egg=pyaml'\n\nNote that to install stuff to system-wide PATH and site-packages (without\n--user), elevated privileges (i.e. root and su/sudo) are often required.\n\nUse \"...install --user\", `~/.pydistutils.cfg`_ or virtualenv_ to do unprivileged\ninstalls into custom paths.\n\nMore info on python packaging can be found at `packaging.python.org`_.\n\n.. _ruamel.yaml: https://bitbucket.org/ruamel/yaml/\n.. _PyYAML: http://pyyaml.org/\n.. _unidecode: http://pypi.python.org/pypi/Unidecode\n.. _pip: http://pip-installer.org/\n.. _pip docs \"installing\" section: http://www.pip-installer.org/en/latest/installing.html\n.. _~/.pydistutils.cfg: http://docs.python.org/install/index.html#distutils-configuration-files\n.. _virtualenv: http://pypi.python.org/pypi/virtualenv\n.. _packaging.python.org: https://packaging.python.org/installing/\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/mk-fg/pretty-yaml",
            "keywords": "yaml serialization pretty print format human readable readability",
            "license": "WTFPL",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyaml",
            "package_url": "https://pypi.org/project/pyaml/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyaml/",
            "project_urls": {
               "Homepage": "https://github.com/mk-fg/pretty-yaml"
            },
            "release_url": "https://pypi.org/project/pyaml/20.4.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "PyYAML-based module to produce pretty and readable YAML-serialized data",
            "version": "20.4.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "haogege",
            "author_email": "1394168335@qq.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# pyyml\nUse python in yaml\n## 基本使用\n在python中使用：\n```python\nfrom pyyml import load\n\nwith open('conf.yml') as f:\n    raw_conf = f.read()\nconfig = load(raw_conf)\nprint(config)\n```\n在yaml中 `${...}` 中的内容将会被python执行：\n\nyaml内容\n```yaml\nsum: ${1 + 1}\n```\n实际解析内容\n```python\n{'sum': 2}\n```\n通过在文件开头第一行注释来导入所需的包：\n\n```yaml\n# libs:['os', 'os.path:path', 'this']\n```\n通过 [包名]:[别名] 取别名导入包\n\n`'os.path:path' 等同于 python 中的 from os import path`\n\n例如yaml文件内容\n```yaml\n# libs:['os', 'os.path:path', 'this']\nos_name: ${os.name}\nbase_dir: ${path.abspath(path.dirname(__file__))}\n```\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/q1394168335/pyyml",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyyml",
            "package_url": "https://pypi.org/project/pyyml/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyyml/",
            "project_urls": {
               "Homepage": "https://github.com/q1394168335/pyyml"
            },
            "release_url": "https://pypi.org/project/pyyml/0.0.2/",
            "requires_dist": [
               "pyyaml (>=3.13)"
            ],
            "requires_python": "",
            "summary": "Use python in yaml",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Michael Foord",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "rs",
            "package_url": "https://pypi.org/project/rs/",
            "platform": "",
            "project_url": "https://pypi.org/project/rs/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/rs/0.0/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "",
            "version": "0.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Ramses",
            "author_email": "hello@ramses.tech",
            "bugtrack_url": null,
            "classifiers": [
               "Framework :: Pyramid",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.4",
               "Programming Language :: Python :: 3.5",
               "Topic :: Internet :: WWW/HTTP",
               "Topic :: Internet :: WWW/HTTP :: WSGI :: Application"
            ],
            "description": "# `Ra`\n[![Build Status](https://travis-ci.org/ramses-tech/ra.svg?branch=master)](https://travis-ci.org/ramses-tech/ra)\n[![Documentation](https://readthedocs.org/projects/ra/badge/?version=stable)](http://ra.readthedocs.org)\n\nRa is a test suite generator and helper library for testing APIs described\nin [RAML](http://raml.org/).\n\nOut of the box, Ra provides a basic, automated test suite to test the routes\ndeclared in the RAML document. It provides test helpers for augmenting these\nwith custom tests to test application-specific logic, side effects, etc.\n\nRa is primarily designed to provide testing support for\n[ramses](http://github.com/ramses-tech/ramses) and\n[nefertari](http://github.com/ramses-tech/nefertari) applications, but can\nbe used with any WSGI-conformant, RAML-described API.\n\nIt currently depends on pytest but may be adapted for other test frameworks\nin the future. It works best using WebTest but doesn't require it.\n\n## Name\n\nRa was the god of the sun, the most important god in ancient Egypt.\n\n\n## Try it (dev)\n\nRun the test suite:\n\n```bash\n    $ pip install -r requirements.txt\n    $ py.test\n```\n\nCheck out the example:\n\n```bash\n    $ cd examples/ramses-test\n    $ pip install -r requirements.txt\n    $ py.test\n```\n\nThe example RAML at `examples/ramses-test/api.raml` and the test file\n`examples/ramses-test/tests/test_api.py` should be helpful to reference.\n\nSee the docs in `docs/`, and the `api.raml` and `tests/test_api.py` in\n`tests/apps/ramses_test`",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/ramses-tech/ra",
            "keywords": "web raml",
            "license": "UNKNOWN",
            "maintainer": null,
            "maintainer_email": null,
            "name": "ra",
            "package_url": "https://pypi.org/project/ra/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/ra/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/ramses-tech/ra"
            },
            "release_url": "https://pypi.org/project/ra/0.2.0/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Test RAML API definition",
            "version": "0.2.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Shoumik Palkar",
            "author_email": "shoumik@cs.stanford.edu",
            "bugtrack_url": null,
            "classifiers": [
               "License :: OSI Approved :: BSD License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 3"
            ],
            "description": "## split annotations\n\nThis package contains the Python implementation of [split annotations](), a system for optimizing applications\nthat combine many data-intensive library functions. See some useful links below.\n\n* [Documentation for this package](https://www.weld.rs/split-annotations/docs/)\n* [GitHub repository](https://www.github.com/weld-project/split-annotations)\n* [SOSP 2019 Paper describing the system](https://shoumik.xyz/static/papers/mozart-sosp19final.pdf)\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://www.github.com/weld-project/split-annotations",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "sa",
            "package_url": "https://pypi.org/project/sa/",
            "platform": "",
            "project_url": "https://pypi.org/project/sa/",
            "project_urls": {
               "Homepage": "https://www.github.com/weld-project/split-annotations"
            },
            "release_url": "https://pypi.org/project/sa/0.0.4/",
            "requires_dist": [
               "numpy",
               "pandas",
               "scipy",
               "sharedmem"
            ],
            "requires_python": ">=3.6",
            "summary": "Python split annotations package",
            "version": "0.0.4",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Mitch Garnaat",
            "author_email": "mitch@garnaat.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.6",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.3",
               "Programming Language :: Python :: 3.4",
               "Topic :: Internet"
            ],
            "description": "####\nboto\n####\nboto 2.49.0\n\nReleased: 11-July-2018\n\n.. image:: https://travis-ci.org/boto/boto.svg?branch=develop\n        :target: https://travis-ci.org/boto/boto\n\n.. image:: https://pypip.in/d/boto/badge.svg\n        :target: https://pypi.python.org/pypi/boto/\n\n******\nBoto 3\n******\n\n`Boto3 <https://github.com/boto/boto3>`__, the next version of Boto, is now\nstable and recommended for general use.  It can be used side-by-side with Boto\nin the same project, so it is easy to start using Boto3 in your existing\nprojects as well as new projects. Going forward, API updates and all new\nfeature work will be focused on Boto3.\n\nTo assist users who still depend on Boto and cannot immediately switch over, we\nwill be triaging and addressing critical issues and PRs in Boto in the short\nterm. As more users make the switch to Boto3, we expect to reduce our\nmaintenance involvement over time. If we decide on a cutoff date or any\nsignificant changes to our maintenance plan, we will make pre-announcements\nwell ahead of schedule to allow ample time for our users to adapt/migrate.\n\n\n************\nIntroduction\n************\n\nBoto is a Python package that provides interfaces to Amazon Web Services.\nCurrently, all features work with Python 2.6 and 2.7. Work is under way to\nsupport Python 3.3+ in the same codebase. Modules are being ported one at\na time with the help of the open source community, so please check below\nfor compatibility with Python 3.3+.\n\nTo port a module to Python 3.3+, please view our `Contributing Guidelines`_\nand the `Porting Guide`_. If you would like, you can open an issue to let\nothers know about your work in progress. Tests **must** pass on Python\n2.6, 2.7, 3.3, and 3.4 for pull requests to be accepted.\n\n\n********\nServices\n********\n\nAt the moment, boto supports:\n\n* Compute\n\n  * Amazon Elastic Compute Cloud (EC2) (Python 3)\n  * Amazon Elastic Map Reduce (EMR) (Python 3)\n  * AutoScaling (Python 3)\n  * Amazon Kinesis (Python 3)\n  * AWS Lambda (Python 3)\n  * Amazon EC2 Container Service (Python 3)\n\n* Content Delivery\n\n  * Amazon CloudFront (Python 3)\n\n* Database\n\n  * Amazon Relational Data Service (RDS)\n  * Amazon DynamoDB (Python 3)\n  * Amazon SimpleDB (Python 3)\n  * Amazon ElastiCache (Python 3)\n  * Amazon Redshift (Python 3)\n\n* Deployment and Management\n\n  * AWS Elastic Beanstalk (Python 3)\n  * AWS CloudFormation (Python 3)\n  * AWS Data Pipeline (Python 3)\n  * AWS Opsworks (Python 3)\n  * AWS CloudTrail (Python 3)\n  * AWS CodeDeploy (Python 3)\n\n* Administration & Security\n\n  * AWS Identity and Access Management (IAM) (Python 3)\n  * AWS Key Management Service (KMS) (Python 3)\n  * AWS Config (Python 3)\n  * AWS CloudHSM (Python 3)\n\n* Application Services\n\n  * Amazon CloudSearch (Python 3)\n  * Amazon CloudSearch Domain (Python 3)\n  * Amazon Elastic Transcoder (Python 3)\n  * Amazon Simple Workflow Service (SWF) (Python 3)\n  * Amazon Simple Queue Service (SQS) (Python 3)\n  * Amazon Simple Notification Server (SNS) (Python 3)\n  * Amazon Simple Email Service (SES) (Python 3)\n  * Amazon Cognito Identity (Python 3)\n  * Amazon Cognito Sync (Python 3)\n  * Amazon Machine Learning (Python 3)\n\n* Monitoring\n\n  * Amazon CloudWatch (EC2 Only) (Python 3)\n  * Amazon CloudWatch Logs (Python 3)\n\n* Networking\n\n  * Amazon Route53 (Python 3)\n  * Amazon Route 53 Domains (Python 3)\n  * Amazon Virtual Private Cloud (VPC) (Python 3)\n  * Elastic Load Balancing (ELB) (Python 3)\n  * AWS Direct Connect (Python 3)\n\n* Payments and Billing\n\n  * Amazon Flexible Payment Service (FPS)\n\n* Storage\n\n  * Amazon Simple Storage Service (S3) (Python 3)\n  * Amazon Glacier (Python 3)\n  * Amazon Elastic Block Store (EBS)\n  * Google Cloud Storage\n\n* Workforce\n\n  * Amazon Mechanical Turk\n\n* Other\n\n  * Marketplace Web Services (Python 3)\n  * AWS Support (Python 3)\n\nThe goal of boto is to support the full breadth and depth of Amazon\nWeb Services.  In addition, boto provides support for other public\nservices such as Google Storage in addition to private cloud systems\nlike Eucalyptus, OpenStack and Open Nebula.\n\nBoto is developed mainly using Python 2.6.6 and Python 2.7.3 on Mac OSX\nand Ubuntu Maverick.  It is known to work on other Linux distributions\nand on Windows.  Most of Boto requires no additional libraries or packages\nother than those that are distributed with Python.  Efforts are made\nto keep boto compatible with Python 2.5.x but no guarantees are made.\n\n************\nInstallation\n************\n\nInstall via `pip`_:\n\n::\n\n    $ pip install boto\n\nInstall from source:\n\n::\n\n    $ git clone git://github.com/boto/boto.git\n    $ cd boto\n    $ python setup.py install\n\n**********\nChangeLogs\n**********\n\nTo see what has changed over time in boto, you can check out the\nrelease notes at `http://docs.pythonboto.org/en/latest/#release-notes`\n\n***************************\nFinding Out More About Boto\n***************************\n\nThe main source code repository for boto can be found on `github.com`_.\nThe boto project uses the `gitflow`_ model for branching.\n\n`Online documentation`_ is also available. The online documentation includes\nfull API documentation as well as Getting Started Guides for many of the boto\nmodules.\n\nBoto releases can be found on the `Python Cheese Shop`_.\n\nJoin our IRC channel `#boto` on FreeNode.\nWebchat IRC channel: http://webchat.freenode.net/?channels=boto\n\nJoin the `boto-users Google Group`_.\n\n*************************\nGetting Started with Boto\n*************************\n\nYour credentials can be passed into the methods that create\nconnections.  Alternatively, boto will check for the existence of the\nfollowing environment variables to ascertain your credentials:\n\n**AWS_ACCESS_KEY_ID** - Your AWS Access Key ID\n\n**AWS_SECRET_ACCESS_KEY** - Your AWS Secret Access Key\n\nCredentials and other boto-related settings can also be stored in a\nboto config file.  See `this`_ for details.\n\n.. _Contributing Guidelines: https://github.com/boto/boto/blob/develop/CONTRIBUTING\n.. _Porting Guide: http://boto.readthedocs.org/en/latest/porting_guide.html\n.. _pip: http://www.pip-installer.org/\n.. _release notes: https://github.com/boto/boto/wiki\n.. _github.com: http://github.com/boto/boto\n.. _Online documentation: http://docs.pythonboto.org\n.. _Python Cheese Shop: http://pypi.python.org/pypi/boto\n.. _this: http://docs.pythonboto.org/en/latest/boto_config_tut.html\n.. _gitflow: http://nvie.com/posts/a-successful-git-branching-model/\n.. _neo: https://github.com/boto/boto/tree/neo\n.. _boto-users Google Group: https://groups.google.com/forum/?fromgroups#!forum/boto-users\n\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/boto/boto/",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "boto",
            "package_url": "https://pypi.org/project/boto/",
            "platform": "Posix; MacOS X; Windows",
            "project_url": "https://pypi.org/project/boto/",
            "project_urls": {
               "Homepage": "https://github.com/boto/boto/"
            },
            "release_url": "https://pypi.org/project/boto/2.49.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Amazon Web Services Library",
            "version": "2.49.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Hadi Asghari",
            "author_email": "hd.asghari@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 3",
               "Topic :: Software Development :: Libraries :: Python Modules",
               "Topic :: System :: Networking"
            ],
            "description": "pyasn\n=====\n\n.. image:: https://pypip.in/v/pyasn/badge.png\n   :target: https://pypi.python.org/pypi/pyasn\n\n.. image:: https://pypip.in/d/pyasn/badge.png\n   :target: https://pypi.python.org/pypi/pyasn\n\n\n**pyasn** is a Python extension module that enables very fast IP address to Autonomous System Number lookups.\nCurrent state and Historical lookups can be done, based on the MRT/RIB BGP archive used as input.\n\n*pyasn* is different from other ASN lookup tools in that it provides **offline** and **historical** lookups.\nIt provides utility scripts for users to build their own lookup databases based on any MRT/RIB archive.\nThis makes *pyasn* much faster than online dig/whois/json lookups.\n\nThe module is written in C and Python, and cross-compiles on Linux and Windows. Underneath, it uses a radix tree\ndata structure for storage of IP addresses. In the current version, it borrows code from *py-radix* to support\nboth IPV4 and IPV6 network prefixes. The current release is a beta. Compared to the previous version, it provides\nsupport for Python 2 and 3; adds new functionality, performance improvements, and unit-tests.\n\n*pyasn* is developed and maintained by researchers at the Economics of Cybersecurity research group at Delft\nUniversity of Technology (http://econsec.tbm.tudlft.nl). The package is used on an almost daily basis and bugs\nare fixed pretty quickly.  The package is largely developed and maintained by Hadi Asghari and Arman Noroozian.\nPlease report any bugs via GitHub (https://github.com/hadiasghari/pyasn) or email the developers.\n\n\nInstallation\n============\nInstallation is a breeze via pip: ::\n\n    pip install pyasn --pre\n\nOr with the standard Python: ::\n\n    python setup.py build\n    python setup.py install --record log\n\nYou will need to have pip, setuptools and build essentials installed if you build the package manually. On\nUbuntu/Debian you can get them using the following command: ::\n\n    sudo apt-get install python-pip python-dev build-essential\n\nBuilding the C module on Windows, using either pip or from source, requires Microsoft Visual C++ to be installed.\npyasn has been tested using Visual C++ Express 2010, available freely from Microsoft's website, on both the\nofficial Python 3.4 release and Miniconda3. Other versions of Python, Visual Studio, and Cygwin could also work\nwith minor modifications.\n\nWe plan to release *pyasn* packages to major Linux repositories once it is out of beta.\n\n\nUsage\n=====\nA simple example that demonstrates most of the features: ::\n\n    import pyasn\n\n    # Initialize module and load IP to ASN database\n    # the sample database can be downloaded or built - see below\n    asndb = pyasn.pyasn('ipasn_20140513.dat')\n\n    asndb.lookup('8.8.8.8')\n    # should return: (15169, '8.8.8.0/24'), the origin AS, and the BGP prefix it matches\n\n    asndb.get_as_prefixes(1128)\n    # returns ['130.161.0.0/16', '131.180.0.0/16', '145.94.0.0/16'], TU-Delft prefixes\n\n\nIPASN Data Files\n================\nIPASN data files are a long list of prefixes used to lookup AS number for IPs. An excerpt from such a file looks\nlike this: ::\n\n    ; IP-ASN32-DAT file\n    ; Original file : <Path to a rib file>\n    ; Converted on  : Tue May 13 22:03:05 2014\n    ; CIDRs         : 512490\n    ;\n    1.0.0.0/24  15169\n    1.0.128.0/17        9737\n    1.0.128.0/18        9737\n    1.0.128.0/19        9737\n    1.0.129.0/24        23969\n    ...\n\nIPASN data files can be created by downloading MRT/RIB BGP archives from Routeviews (or similar sources),\nand parsing them using provided scripts that tail the BGP AS-Path. This can be done simply as follows: ::\n\n    pyasn_util_download.py --latest\n    pyasn_util_convert.py --single <Downloaded RIB File> <ipasn_db_file_name>\n\n\n**NOTE:** These scripts are by default installed to ``/usr/local/bin`` and can be executed directly. If you installed\nthe package to a user directory, these scripts will not be on the path and you will have to invoke them by navigating\nto the folder in which they have been copied (e.g. ``~/.local/bin``).\n\nWe also provide download links to a large number of previously generated IPASN data files. These are based on\nweekly  snapshots of the Routeviews data from 2005-2015, accessible here:\nhttp://data.3tu.nl/repository/uuid:d4d23b8e-2077-4592-8b47-cb476ad16e12\n\n**New in v1.6:** To save disk space, you can gzip IPASN data files. The load time will be slighlty longer.\n\n\nPerformance Tip\n===============\nInitial loading of a IPASN data file is the most heavy operation of the package. For fast lookups using multiple\nIPASN data files, for instance for historical lookups on multiple dates, we recommend caching of loaded data files\nfor better performance.\n\n\nUninstalling pyasn\n==================\nYou can remove *pyasn* as follows: ::\n\n    pip uninstall pyasn\n\nIf you built and installed the package your self use the recorded log to remove the installed files.\n\n**Removing PyASN version 1.2**: *pyasn* v1.5/1.6 and v1.2 can be installed side by side (due to lower-cased package\nname). To avoid mistakes, you can uninstall the old **PyASN** by deleting the following files from your Python\ninstallation: ::\n\n    PYTHONDIR/dist-packages/PyASN.so\n    PYTHONDIR/dist-packages/PyASN-1.2.egg-info\n\n\nPackage Structure\n=================\nThe main portions of the directory tree are as follows: ::\n\n    .\n    ├── pyasn/__init__.py       # Python code of the main pyasn module\n    ├── pyasn/pyasn_radix.c     # C extension code (Python RADIX module with bulk load)\n    ├── pyasn/_radix/*          # C extension code (Based on original RADIX code from MRTd)\n    ├── pyasn/mrtx.py           # python module used to convert MRT files to pyasn DB files\n    ├── pyasn-utils/*.py        # Scripts to download & convert BGP MRT dumps to IPASN databases\n    ├── data/                   # Test Resources and some sample DBs to use\n    ├── tests/                  # Tests\n    └── setup.py                # Standard setup.py for installation/testing/etc.\n\n\n\nTesting pyasn Sources\n=====================\nA limited number of unit tests are provided in the ``tests/`` directory when downlading the sources. They can be\nrun with the following command: ::\n\n    python setup.py test\n\nThis beta release has been tested under python version 2.6, 2.7, 3.3, 3.4 and 3.5. We appreciate contributions towards\ntesting *pyasn*!\n\n**New in v1.6:** pyasn_util_convert.py offers a '--dump-screen' option which shows the MRT/RIB archive contents and\nthe chosen origin-AS.\n\n\nLicense & Acknowledgments\n=========================\n*pyasn* is licensed under the MIT license.\n\nIt extends code from py-radix (Michael J. Schultz and Damien Miller),  and improves upon it in several ways, for\ninstance in lowering memory usage and adding bulk prefix/origin load. The underlying radix tree implementation is\ntaken (and modified) from MRTd. These are all subject to their respective licenses.  Please see the LICENSE file\nfor details.\n\nThanks to Dr. Chris Lee (of Shadowserver) for proposing the use of radix trees.\n\nA handful of GitHub developers have contributed features and bug fixes to the latest releases.\nMany thanks to all of them.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": null,
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/hadiasghari/pyasn",
            "keywords": "ip asn autonomous system bgp whois prefix radix python routing networking",
            "license": "MIT",
            "maintainer": null,
            "maintainer_email": null,
            "name": "pyasn",
            "package_url": "https://pypi.org/project/pyasn/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/pyasn/",
            "project_urls": {
               "Homepage": "https://github.com/hadiasghari/pyasn"
            },
            "release_url": "https://pypi.org/project/pyasn/1.6.0b1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Offline IP address to Autonomous System Number lookup module.",
            "version": "1.6.0b1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Perdix Software",
            "author_email": "ssmith@perdixsw.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 2 - Pre-Alpha",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.4",
               "Programming Language :: Python :: 3.5",
               "Programming Language :: Python :: 3.6",
               "Topic :: Office/Business :: Financial",
               "Topic :: Scientific/Engineering :: Mathematics"
            ],
            "description": "UNKNOWN",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "https://www.github.com/perdixsw/umpy/tarball/0.1.0",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://www.github.com/perdixsw/umpy",
            "keywords": "units,measure,measurement,conversion,converter",
            "license": "MIT",
            "maintainer": null,
            "maintainer_email": null,
            "name": "umpy",
            "package_url": "https://pypi.org/project/umpy/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/umpy/",
            "project_urls": {
               "Download": "https://www.github.com/perdixsw/umpy/tarball/0.1.0",
               "Homepage": "https://www.github.com/perdixsw/umpy"
            },
            "release_url": "https://pypi.org/project/umpy/0.1.0/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Simple unit of measure conversion for python, optimized for manufacturing contexts.",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Jay Marcyes",
            "author_email": "jay@marcyes.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Environment :: Console",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Topic :: Software Development :: Testing"
            ],
            "description": "Pyt\n===\n\nPyt is a lightweight wrapper around `Python’s unittest\nmodule <https://docs.python.org/3/library/unittest.html>`__ that adds\nsome nice features and enhancements over the stock ``unittest`` module.\n\nQuickstart\n~~~~~~~~~~\n\nPyt overrides unittest’s built-in pathfinding to be smarter and less\nverbose, so you can match tests using prefix matching which makes\nrunning a test like:\n\n::\n\n   $ python -m unittest tests.foo_test.BarTestCase.test_che\n\nas simple as:\n\n::\n\n   $ pyt foo.Bar.che\n\nBut it’s even less verbose if you want it to be, pyt can reach into the\nmodules and classes to do its matching, so you don’t even need to\nspecify the module and class if you don’t want to:\n\n::\n\n   $ pyt che\n\nMore examples\n^^^^^^^^^^^^^\n\nTo run all the ``Happy`` tests:\n\n::\n\n   $ pyt Happy\n\nTo run all the ``newmodule`` tests:\n\n::\n\n   $ pyt newmodule\n\nTo run more than one test:\n\n::\n\n   $ pyt test1 test2 ...\n\nTo run every test ``pyt`` can find:\n\n::\n\n   $ pyt\n\nAnd the way I like to run all tests in the current directory:\n\n::\n\n   $ pyt -vb\n\nWhich can also be written:\n\n::\n\n   $ pyt --verbose --buffer\n\nFlags\n~~~~~\n\nTo see everything pyt can do\n\n::\n\n   $ pyt --help\n\n–warnings\n^^^^^^^^^\n\nThis will convert warnings into errors.\n\n::\n\n   $ pyt --warnings\n\n–rerun\n^^^^^^\n\nIf your last testrun had failing tests this will rerun only the tests\nthat failed.\n\n::\n\n   $pyt --rerun\n\nThings to be aware of\n~~~~~~~~~~~~~~~~~~~~~\n\npyt uses Python’s PEP 8 style conventions\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n``pyt`` uses `Python’s code styling\nconventions <http://www.python.org/dev/peps/pep-0008/>`__ to decide what\nis the module and class, so, given input like this:\n\n::\n\n   $ pyt foo.bar.Baz.che\n\n``pyt`` will consider ``foo.bar`` to be the module, ``Baz`` to be a\nclass (because it starts with a capital letter), and ``che`` to be a\nmethod (since it comes after the class).\n\nLikewise, ``pyt`` uses unittest conventions, so a test module should end\nwith ``_test`` (eg, ``foo.bar_test``) or start with test (eg,\n``test_foo.py``) and a TestCase class should extend\n``unittest.TestCase``, and test methods should start with ``test_`` (eg,\n``test_che``).\n\nVague input can cause pyt to run more tests than you expect\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSo if you have something like this:\n\n::\n\n   project/\n     __init__.py\n     user.py\n     foo/\n       __init__.py\n       user.py\n     tests/\n       __init__.py\n       user_test.py\n       foo/\n         __init__.py\n         user_test.py\n\nAnd you want to run tests for ``foo.user`` and you run:\n\n::\n\n   $ pyt user\n\nit will run both ``tests/user_test`` and ``tests.foo.user_test``, the\nsolution is to just be more verbose when you have to be:\n\n::\n\n   $ pyt foo.user\n\nEnvironment Variables\n^^^^^^^^^^^^^^^^^^^^^\n\nIf you are running the tests within pyt, you might notice there is an\nenvironment variable ``PYT_TEST_COUNT`` that contains the count of how\nmany tests pyt found to run.\n\nInstallation\n------------\n\nUse ``pip``:\n\n::\n\n   $ pip install pyt\n\nYou can also get it directly from the repo:\n\n::\n\n   $ pip install --upgrade git+https://github.com/Jaymon/pyt#egg=pyt\n\nIf you install pyt using Python 3 it can also be invoked using the\n``pyt3`` command:\n\n::\n\n   $ pyt3 --help\n\nLikewise, Python 2 installs a ``pyt2`` command:\n\n::\n\n   $ pyt2 --help\n\nTesting\n-------\n\nTesting in 2.7 on most systems:\n\n::\n\n   $ python -m unittest pyt_test\n\nTesting in 3.5 on MacOS:\n\n::\n\n   $ python3.5 -m unittest pyt_test\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "http://github.com/Jaymon/pyt",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyt",
            "package_url": "https://pypi.org/project/pyt/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyt/",
            "project_urls": {
               "Homepage": "http://github.com/Jaymon/pyt"
            },
            "release_url": "https://pypi.org/project/pyt/1.0.5/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "easily run python unit tests",
            "version": "1.0.5",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Bradley Odell",
            "author_email": "btodell@hotmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Environment :: Console",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
               "Natural Language :: English",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 2.6",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Topic :: Software Development :: Build Tools"
            ],
            "description": "pyz\n===\n\n*Packages all source code and dependencies into a single Python zip application.*\n\nSummary\n-------\n\nDeploying a Python application any larger than a single file is\ncumbersome - this library aims to solve that problem.\n\nPython has been able to run code from within a zip file since version\n2.6. Python 3.5 introduced the `zipapp <https://docs.python.org/3/library/zipapp.html>`__ module\nwhich aims to simplify the process of creating a zip application.\nHowever, **zipapp** isn't a complete solution to the problem - it\ndoesn't handle dependencies and it doesn't include certain extra\nfeatures that this library provides.\n\nThis library allows you to bundle all of your Python code **AND** your\ndependencies into a single Python zip application file.\n\nNote: The dependency bundling feature is not implemented yet, but it is\nin the works!\n\nFeatures\n--------\n\n1. Bundle all Python source code with fine-grained control over included files.\n2. Ability to \"unixify\" the output application by prepending a customizable\n   `shebang <https://en.wikipedia.org/wiki/Shebang_(Unix)>`__.\n3. Python interpreter version check - display a friendly notice instead\n   of a Python exception if the user runs your application using an\n   unsupported Python version.\n\nPlanned\n-------\n\n1. Automatically identify dependencies and package them accordingly.\n",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "https://github.com/BTOdell/pyz/archive/0.4.3.tar.gz",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/BTOdell/pyz",
            "keywords": "pyz zip app zipapp bundle dependencies library",
            "license": "GPLv3",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyz",
            "package_url": "https://pypi.org/project/pyz/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyz/",
            "project_urls": {
               "Download": "https://github.com/BTOdell/pyz/archive/0.4.3.tar.gz",
               "Homepage": "https://github.com/BTOdell/pyz"
            },
            "release_url": "https://pypi.org/project/pyz/0.4.3/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Packages all source code and dependencies into a single Python zip application.",
            "version": "0.4.3",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Val Neekman",
            "author_email": "info@neekware.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 3 - Alpha",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Operating System :: POSIX",
               "Programming Language :: Python",
               "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description": "AWSLI\n====================\n\n**Amazon Web Services Line Interpreter**\n\n**Author:** Val Neekman [ info@neekware.com, @vneekman ]\n\nOverview\n========\n\nA Line Interpreter for Amazon Web Services.\n\nHow to install\n==================\n\n    1. easy_install awsli\n    2. pip install awsli\n    3. git clone http://github.com/un33k/awsli\n        a. cd awsli\n        b. run python setup.py\n    4. wget https://github.com/un33k/awsli/zipball/master\n        a. unzip the downloaded file\n        b. cd into awsli-* directory\n        c. run python setup.py\n\nHow to use\n=================\n\n``Usage``\n\n``Note:``\n\nRunning the tests\n=================\n\nTo run the tests against the current environment:\n\n    python test.py\n\nChangelog\n=========\n\n0.1\n-----\n\n* Initial release\n\n\nLicense\n=======\n\nCopyright (c) 2012, Val Neekman\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without \nmodification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this \nlist of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this \nlist of conditions and the following disclaimer in the documentation and/or \nother materials provided with the distribution.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND \nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED \nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE \nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE \nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL \nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR \nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, \nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE \nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/un33k/awsli",
            "keywords": null,
            "license": "BSD",
            "maintainer": null,
            "maintainer_email": null,
            "name": "awsli",
            "package_url": "https://pypi.org/project/awsli/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/awsli/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/un33k/awsli"
            },
            "release_url": "https://pypi.org/project/awsli/0.0.1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "A Line Interpreter for Amazon Web Services",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Armin Ronacher",
            "author_email": "armin.ronacher@active-4.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Environment :: Web Environment",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
               "Topic :: Software Development :: Libraries :: Python Modules",
               "Topic :: Text Processing :: Markup :: HTML"
            ],
            "description": "jinja\n~~~~~\n\nJinja is a `sandboxed`_ template engine written in pure Python. It\nprovides a `Django`_ like non-XML syntax and compiles templates into\nexecutable python code. It's basically a combination of Django templates\nand python code.\n\nNutshell\n--------\n\nHere a small example of a Jinja template::\n\n    {% extends 'base.html' %}\n    {% block title %}Memberlist{% endblock %}\n    {% block content %}\n      <ul>\n      {% for user in users %}\n        <li><a href=\"{{ user.url|e }}\">{{ user.username|e }}</a></li>\n      {% endfor %}\n      </ul>\n    {% endblock %}\n\nPhilosophy\n----------\n\nApplication logic is for the controller but don't try to make the life\nfor the template designer too hard by giving him too few functionality.\n\nFor more informations visit the new `jinja webpage`_ and `documentation`_.\n\nNote\n----\n\nThis is the Jinja 1.0 release which is completely incompatible with the\nold \"pre 1.0\" branch. The old branch will still receive security updates\nand bugfixes but the 1.0 branch will be the only version that receives\nsupport.\n\nIf you have an application that uses Jinja 0.9 and won't be updated in\nthe near future the best idea is to ship a Jinja 0.9 checkout together\nwith the application.\n\nThe `Jinja tip`_ is installable via `easy_install` with ``easy_install\nJinja==dev``.\n\n.. _sandboxed: http://en.wikipedia.org/wiki/Sandbox_(computer_security)\n.. _Django: http://www.djangoproject.com/\n.. _jinja webpage: http://jinja.pocoo.org/\n.. _documentation: http://jinja.pocoo.org/documentation/index.html\n.. _Jinja tip: http://dev.pocoo.org/hg/jinja-main/archive/tip.tar.gz#egg=Jinja-dev\n\n\n:copyright: 2007 by Armin Ronacher.\n:license: BSD, see LICENSE for more details.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "http://jinja.pocoo.org/",
            "keywords": "python.templating.engines",
            "license": "BSD",
            "maintainer": null,
            "maintainer_email": null,
            "name": "Jinja",
            "package_url": "https://pypi.org/project/Jinja/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/Jinja/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "http://jinja.pocoo.org/"
            },
            "release_url": "https://pypi.org/project/Jinja/1.2/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "A small but fast and easy to use stand-alone template engine written in pure python.",
            "version": "1.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Hsiaoming Yang",
            "author_email": "me@lepture.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Environment :: Console",
               "Environment :: Web Environment",
               "Framework :: Django",
               "Framework :: Flask",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.5",
               "Programming Language :: Python :: 3.6",
               "Programming Language :: Python :: 3.7",
               "Programming Language :: Python :: 3.8",
               "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
               "Topic :: Internet :: WWW/HTTP :: WSGI :: Application",
               "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description": "Authlib\n=======\n\nThe ultimate Python library in building OAuth and OpenID Connect servers.\nJWS, JWK, JWA, JWT are included.\n\nUseful Links\n------------\n\n1. Homepage: https://authlib.org/\n2. Documentation: https://docs.authlib.org/\n3. Purchase Commercial License: https://authlib.org/plans\n4. Blog: https://blog.authlib.org/\n5. More Repositories: https://github.com/authlib\n6. Twitter: https://twitter.com/authlib\n7. Donate: https://www.patreon.com/lepture\n\nSpecifications\n--------------\n\n- RFC5849: The OAuth 1.0 Protocol\n- RFC6749: The OAuth 2.0 Authorization Framework\n- RFC6750: The OAuth 2.0 Authorization Framework: Bearer Token Usage\n- RFC7009: OAuth 2.0 Token Revocation\n- RFC7515: JSON Web Signature\n- RFC7516: JSON Web Encryption\n- RFC7517: JSON Web Key\n- RFC7518: JSON Web Algorithms\n- RFC7519: JSON Web Token\n- RFC7521: Assertion Framework for OAuth 2.0 Client Authentication and Authorization Grants\n- RFC7523: JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants\n- RFC7591: OAuth 2.0 Dynamic Client Registration Protocol\n- RFC7662: OAuth 2.0 Token Introspection\n- RFC8414: OAuth 2.0 Authorization Server Metadata\n- RFC8628: OAuth 2.0 Device Authorization Grant\n- OpenID Connect 1.0\n- OpenID Connect Discovery 1.0\n\nImplementations\n---------------\n\n- Requests OAuth 1 Session\n- Requests OAuth 2 Session\n- Requests Assertion Session\n- Flask OAuth 1/2 Client\n- Django OAuth 1/2 Client\n- Flask OAuth 1.0 Server\n- Flask OAuth 2.0 Server\n- Flask OpenID Connect 1.0\n- Django OAuth 1.0 Server\n- Django OAuth 2.0 Server\n- Django OpenID Connect 1.0\n\nLicense\n-------\n\nAuthlib is licensed under BSD. Please see LICENSE for licensing details.\n\nIf this license does not fit your company, consider to purchase a commercial\nlicense. Find more information on `Authlib Plans`_.\n\n.. _`Authlib Plans`: https://authlib.org/plans\n\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://authlib.org/",
            "keywords": "",
            "license": "BSD-3-Clause",
            "maintainer": "",
            "maintainer_email": "",
            "name": "Authlib",
            "package_url": "https://pypi.org/project/Authlib/",
            "platform": "any",
            "project_url": "https://pypi.org/project/Authlib/",
            "project_urls": {
               "Blog": "https://blog.authlib.org/",
               "Bug Tracker": "https://github.com/lepture/authlib/issues",
               "Commercial License": "https://authlib.org/plans",
               "Documentation": "https://docs.authlib.org/",
               "Donate": "https://lepture.com/donate",
               "Homepage": "https://authlib.org/",
               "Source Code": "https://github.com/lepture/authlib"
            },
            "release_url": "https://pypi.org/project/Authlib/0.14.3/",
            "requires_dist": [
               "cryptography",
               "requests ; extra == 'client'"
            ],
            "requires_python": "",
            "summary": "The ultimate Python library in building OAuth and OpenID Connect servers.",
            "version": "0.14.3",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Julien Bigot",
            "author_email": "julien.bigot@cea.fr",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Environment :: Console",
               "License :: OSI Approved :: MIT License"
            ],
            "description": "# zpp\n\nThis is zpp, the Z Pre-Processor.\n\nZpp transforms bash in a pre-processor for F90 source files.\nIt offers a set of functions specifically tailored to build clean Fortran90\ninterfaces by generating code for all types, kinds, and array ranks supported by\na given compiler.\n\n## Syntax\n\nZpp files are typically named `*.F90.zpp`.\n\nIn these files, the lines that start with `!$SH` are interpreted as bash lines. \nOther lines are copied as-is, except that variable substitution is operated as\nin a double-quoted string, including bash commands `${VAR}` or `$(command)`.\nIf inside a bash control block (`if`, `for`, etc.), the output generation obeys\nthe control statement.\n\nFor example, this code:\n```\n!$SH for GREETED in world universe multiverse ; do\nprint *, \"Hello ${GREETED}\"\n!$SH done\n```\n\nWould produce the following result:\n```\nprint *, \"Hello world\"\nprint *, \"Hello universe\"\nprint *, \"Hello multiverse\"\n```\n\n### Support functions\n\nPredefined bash functions, variable and code can be provided in `.zpp.sh` files\nthat can be included with `#!SH source <filename>.zpp.sh`.\n\n**Beware**: a file NEEDs to have the `.zpp.sh` extension to be included from\nzpp.\n\nZpp provides a standard library of functions tailored to build clean Fortran90\ninterfaces by generating code for all types, kinds, and array ranks supported by\na given compiler.\n\n#### zpp_str_repeat\n\nFound in `base.zpp.sh`\n\nOutputs a string multiple times.\n\nParameters:\n1. the string to Repeat\n2. the lower bound of the iterations (inclusive)\n3. the upper bound of the iterations (inclusive)\n4. the string separator\n5. the string starter\n6. the string ender\n\nRepeats string `$1` (`$3`-`$2`+1) times, separated by string `$4` inside `$5`\n`$6`.\n* If the number of repetitions is negative, the result is empty.\n* If `$1` contains the '@N' substring, it will be replaced by the iteration\n  number (from `$2` to `$3`).\n\nexample:\n```\n#!SH source base.zpp.sh\nzpp_str_repeat v@N 5 7 '...' '<<' '>>'\nzpp_str_repeat w@N 1 1 '...' '<<' '>>'\nzpp_str_repeat x@N 1 0 '...' '<<' '>>'\n```\noutput:\n```\n<<v5...v6...v7>>\n<<w1>>\n```\n\n#### zpp_str_repeat_reverse\n\nFound in `base.zpp.sh`\n\nOutputs a string multiple times in reverse order.\n\nParameters:\n1. the string to Repeat\n2. the upper bound of the iterations (inclusive)\n3. the lower bound of the iterations (inclusive)\n4. the string separator\n5. the string starter\n6. the string ender\n\nRepeats string `$1` (`$2`-`$3`+1) times, separated by string `$4` inside `$5`\n`$6`.\n* If the number of repetitions is negative, the result is empty.\n* If `$1` contains the '@N' substring, it will be replaced by the iteration\n  number (from `$2` to `$3`, i.e. upper to lower).\n\nexample:\n```\n#!SH source base.zpp.sh\nzpp_str_repeat_reverse v@N 5 7 '...' '<<' '>>'\nzpp_str_repeat_reverse w@N 1 1 '...' '<<' '>>'\nzpp_str_repeat_reverse x@N 1 0 '...' '<<' '>>'\n```\noutput:\n```\n<<v7...v6...v5>>\n<<w1>>\n```\n\n#### ZPP_FORT_TYPES\n\nFound in `fortran.zpp.sh`\n\nThe list of types supported by the fortran compiler as zpp:typeIDs.\n\nThe compiler ID should be provided in `ZPP_CONFIG` as `config.<ID>`.\nThe supported predefined IDs are: `Gnu`, `Intel`, `PGI` and `XL`.\nYou can also provide definitions for an additional compiler by defining\n`ZPP_FORT_TYPES` in a file named `config.<ID>.zpp.sh`.\n\nIf you use cmake, it will automatically generate such a file for your compiler\nand define  `ZPP_CONFIG` so you don't have to handle it.\n\n### zpp_fort_array_desc\n\nFound in `fortran.zpp.sh`\n\nOutputs an assumed shaped array descriptor of the provided size.\n\nParameters:\n1. the size of the assumed shaped array\n\nexample:\n```\n#!SH source fortran.zpp.sh\ninteger:: scalar$(zpp_fort_array_desc 0)\ninteger:: array1d$(zpp_fort_array_desc 1)\ninteger:: array2d$(zpp_fort_array_desc 2)\n```\noutput:\n```\ninteger:: scalar\ninteger:: array1d(:)\ninteger:: array2d(:,:)\n```\n\n### zpp_fort_ptype\n\nFound in `fortran.zpp.sh`\n\nOutputs the type associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\nexample:\n```\n#!SH source fortran.zpp.sh\n!$SH for T in ${ZPP_FORT_TYPES} ; do\n$(zpp_fort_ptype $1)\n!$SH done\n```\nexample output:\n```\nCHARACTER\nCOMPLEX\nCOMPLEX\nINTEGER\nINTEGER\nINTEGER\nINTEGER\nLOGICAL\nREAL\nREAL\n```\n\n### zpp_fort_kind\n\nFound in `fortran.zpp.sh`\n\nOutputs the kind associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\nexample:\n```\n#!SH source fortran.zpp.sh\n!$SH for T in ${ZPP_FORT_TYPES} ; do\n$(zpp_fort_kind $1)\n!$SH done\n```\nexample output:\n```\n1\n4\n8\n1\n2\n4\n8\n1\n4\n8\n```\n\n### zpp_fort_type\n\nFound in `fortran.zpp.sh`\n\nOutputs the full type (with kind included) associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n2. additional attributes for the type\n\nexample:\n```\n#!SH source fortran.zpp.sh\n!$SH for T in ${MY_CHAR_TYPES} ; do\n$(zpp_fort_type $1)\n$(zpp_fort_type $1 \"len=5\")\n!$SH done\n```\nexample output:\n```\nCHARACTER(KIND=1)\nCHARACTER(KIND=1,len=5)\n```\n\n### zpp_fort_sizeof\n\nFound in `fortran.zpp.sh`\n\nOutputs the size in bits associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\n### zpp_fort_io_format\n\nFound in `fortran.zpp.sh`\n\nOutputs an IO descriptor suitable for a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\n### ZPP_HDF5F_TYPES\n\nFound in `hdf5_fortran.zpp.sh`\n\nA list of zpp:typeIDs supported by HDF5.\n\n### hdf5_constant\n\nFound in `hdf5_fortran.zpp.sh`\n\nOutputs the HDF5 type constant associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\nexample:\n```\n#!SH source hdf5_fortran.zpp.sh\n!$SH for T in ${ZPP_HDF5F_TYPES} ; do\n$(hdf5_constant $1)\n!$SH done\n```\nexample output:\n```\nH5T_NATIVE_INTEGER\nH5T_NATIVE_REAL\nH5T_NATIVE_REAL\nH5T_NATIVE_CHARACTER\n```\n\n\n## Command-line interface\n\nZpp basic usage is as follow:\n```\nUsage: zpp [Options...] <source> [<destination>]\n  use `zpp -h' for more info\n\nPreprocesses BASH in-line commands in a source file\n\nOptions:\n  --version        show program's version number and exit\n  -h, --help       show this help message and exit\n  -I DIR           Add DIR to search list for source directives\n  -o FILE          Place the preprocessed code in file FILE.\n  -D OPTION=VALUE  Set the value of OPTION to VALUE\n```\n\n## CMake interface\n\nSupport is provided for using zpp from CMake based projects, but you can use\nit from plain Makefiles too.\n\nThere are two ways you can use zpp from your CMake project:\n* with `add_subdirectory`: include zpp in your project and use it directly from\n  there,\n* with `find_package`: install zpp and use it as an external dependency of your\n  project.\n\n#### CMake subdirectory usage\n\nUsing zpp with `add_subdirectory` is very simple.\nJust copy the `zpp` directory in your source and point to it with\n`add_subdirectory(zpp)`.\nThe `zpp_preprocess` then becomes available to process zpp files.\n\nThis is demonstrated in `example/cmake_subdirectory`.\n\n#### CMake find usage\n\nUsing zpp with `find_package` is no more complex.\nIf zpp is installed, just add a `find_package(zpp REQUIRED)`.\nThe `zpp_preprocess` then becomes available to process zpp files.\n\nThis is demonstrated in `example/cmake_find`.\n\n## GMake usage\n\nUsing zpp from a GNU Makefile is slightly less powerful than from CMake.\nThe types and kinds supported by the Fortran compiler will not be automatically\ndetected.\nPredefined lists of supported types for well known compilers are provided\ninstead.\n\nTo use zpp from a Makefile, include the `share/zpp/zpp.mk` file (either from an\ninstalled location or from a subdirectory in your project).\nYou can then set the `zpp_COMPILER_ID` variable to the compiler you use and\n`.F90` files will be automatically generated from their `.F90.zpp` equivalent.\nThe `zppFLAGS` variable is automatically passed to zpp similarly to `CFLAGS` or\n`CXXFLAGS` for `cc` and `cxx`.\n\nThis is demonstrated in `example/cmake_makefile`.\n\n## Installation\n\nZpp can be installed using the usual python way with `setup.py`.\n```\n./setup.py --help\n```\n\nThe cmake approach is deprecated.\n\n## FAQ\n\nQ. Isn't zpp redundant with assumed type parameters?\n\nA.\nThe assumed type parameters functionality allows to implement part of what can\nbe done with zpp (support for all kinds of a type). However as of 2013 it was\nnot correctly supported on most compilers installed on the supercomputers.\n\nIn addition, many things can be done with zpp but not with assumed type\nparameters, such as support for variable array rank or small variations of the\ncode depending on the kind.\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "bash Fortran pre-processor",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "zpp",
            "package_url": "https://pypi.org/project/zpp/",
            "platform": "",
            "project_url": "https://pypi.org/project/zpp/",
            "project_urls": {
               "Source Code": "https://github.com/pdidev/zpp/"
            },
            "release_url": "https://pypi.org/project/zpp/1.0.4/",
            "requires_dist": [
               "setuptools"
            ],
            "requires_python": "",
            "summary": "a Bash Pre-Processor for Fortran. ZPP is useful in order to build clean Fortran90 interfaces. It allows to generate Fortran code for all types, kinds, and array ranks supported by the compiler.",
            "version": "1.0.4",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Dheepak Krishnamurthy",
            "author_email": "kdheepak89@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# zip [![](https://travis-ci.org/kdheepak/zip.svg?branch=master)](https://travis-ci.org/kdheepak/zip/branches)\n\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/kdheepak/zip",
            "keywords": "",
            "license": "Revised BSD License",
            "maintainer": "",
            "maintainer_email": "",
            "name": "zip",
            "package_url": "https://pypi.org/project/zip/",
            "platform": "",
            "project_url": "https://pypi.org/project/zip/",
            "project_urls": {
               "Homepage": "https://github.com/kdheepak/zip"
            },
            "release_url": "https://pypi.org/project/zip/0.0.2/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Intel Corporation",
            "author_email": "scripting@intel.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "Intended Audience :: Education",
               "Intended Audience :: Other Audience",
               "Intended Audience :: Science/Research",
               "Intended Audience :: System Administrators",
               "License :: Other/Proprietary License",
               "Operating System :: MacOS",
               "Operating System :: Microsoft :: Windows",
               "Operating System :: POSIX",
               "Operating System :: Unix",
               "Topic :: Software Development :: Libraries"
            ],
            "description": "Intel(R) Performance Primitives provides developers with high-quality, production-ready, low-level building blocks for image processing, signal processing, and data processing (data compression and decompression, and cryptography) applications.\n\nOne of many Intel(R) accelerated Python packages and performance library runtimes available on [PyPI](https://software.intel.com/en-us/articles/installing-the-intel-distribution-for-python-and-intel-performance-libraries-with-pip-and), and as part of [Intel(R) Distribution for Python](https://software.intel.com/en-us/distribution-for-python).\n\nFor latest release updates and security notifications, please [subscribe](https://software.intel.com/en-us/forums/intel-distribution-for-python) to the Intel(R) Distribution for Python Community forum.\n\nFree to use and redistribute pursuant to the [Intel Simplified Software License](https://software.intel.com/en-us/license/intel-simplified-software-license).\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://software.intel.com/en-us/articles/empowering-science-with-high-performance-python",
            "keywords": "",
            "license": "Proprietary - Intel",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ipp",
            "package_url": "https://pypi.org/project/ipp/",
            "platform": "",
            "project_url": "https://pypi.org/project/ipp/",
            "project_urls": {
               "Homepage": "https://software.intel.com/en-us/articles/empowering-science-with-high-performance-python"
            },
            "release_url": "https://pypi.org/project/ipp/2019.4.243/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Intel(R) Performance Primitives",
            "version": "2019.4.243",
            "yanked": false,
            "yanked_reason": null
         }
      ],
      "oauthlib": [
         {
            "author": "Gabriel Alves",
            "author_email": "gabriel.alves@pickcells.bio",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# sx\n#### Framework to manage gRPC-based microservices application",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "https://github.com/itsmealves/sx/releases/download/0.6.0/sx-0.6.0.tar.gz",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/itsmealves/sx",
            "keywords": "sx microservices rpc grpc Framework",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "sx",
            "package_url": "https://pypi.org/project/sx/",
            "platform": "",
            "project_url": "https://pypi.org/project/sx/",
            "project_urls": {
               "Download": "https://github.com/itsmealves/sx/releases/download/0.6.0/sx-0.6.0.tar.gz",
               "Homepage": "https://github.com/itsmealves/sx"
            },
            "release_url": "https://pypi.org/project/sx/0.6.0/",
            "requires_dist": null,
            "requires_python": ">=3.5",
            "summary": "Framework to manage gRPC-based microservices application",
            "version": "0.6.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "chrysn",
            "author_email": "chrysn@fsfe.org",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 3 - Alpha",
               "Intended Audience :: Education",
               "Intended Audience :: Science/Research",
               "License :: OSI Approved :: GNU General Public License (GPL)"
            ],
            "description": "UNKNOWN",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "UNKNOWN",
            "keywords": null,
            "license": "GPL",
            "maintainer": null,
            "maintainer_email": null,
            "name": "si",
            "package_url": "https://pypi.org/project/si/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/si/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "UNKNOWN"
            },
            "release_url": "https://pypi.org/project/si/0.1.1-1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Module to represent SI units",
            "version": "0.1.1-1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "leesoar",
            "author_email": "secure@tom.com",
            "bugtrack_url": null,
            "classifiers": [
               "License :: OSI Approved :: MIT License",
               "Programming Language :: Python :: 3.5",
               "Programming Language :: Python :: 3.6",
               "Programming Language :: Python :: 3.7",
               "Programming Language :: Python :: Implementation :: CPython",
               "Programming Language :: Python :: Implementation :: PyPy"
            ],
            "description": "\nDevelop soon\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://leesoar.com",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ida",
            "package_url": "https://pypi.org/project/ida/",
            "platform": "",
            "project_url": "https://pypi.org/project/ida/",
            "project_urls": {
               "Homepage": "https://leesoar.com"
            },
            "release_url": "https://pypi.org/project/ida/0.0.1/",
            "requires_dist": null,
            "requires_python": ">=3.3.0",
            "summary": "Develop soon",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Xavier Bruhiere",
            "author_email": "xavier.bruhiere@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 2 - Pre-Alpha",
               "Intended Audience :: Science/Research",
               "License :: OSI Approved :: Apache Software License",
               "Natural Language :: English",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2.7",
               "Topic :: Software Development",
               "Topic :: System :: Shells"
            ],
            "description": "python library DNA\n==================\n\n[![Coverage Status](https://coveralls.io/repos/hivetech/dna/badge.png)](https://coveralls.io/r/hivetech/dna)\n\n> Generic python utilities\n\nInstallation\n------------\n\n```console\npip install dna\n```\n\nExample\n-----\n\n```python\nimport dna.utils as utils\nimport dna.logger as logger\n\nlog_setup = logger.setup(level='info', filename='app.log')\nlog = logger.logger(__name__)\nwith log_setup.applicationbound():\n\n    log.info('hello', where='world')\n\n    useless_id = utils.generate_unique_id()\n    useless_name = utils.generate_random_name()\n\n    if utils.docker_check() and utils.is_running('ipyhon'):\n\n        print utils.Version('0.4.1')\n\n        module = utils.dynamic_import('dna.settings', 'LOG')\n        print utils.emphasis(module, align=False)\n\n        print utils.self_ip()\n```",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/hivetech/dna",
            "keywords": null,
            "license": "Apache 2.0",
            "maintainer": null,
            "maintainer_email": null,
            "name": "dna",
            "package_url": "https://pypi.org/project/dna/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/dna/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/hivetech/dna"
            },
            "release_url": "https://pypi.org/project/dna/0.0.7/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Generic python utilities",
            "version": "0.0.7",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Christopher Brown",
            "author_email": "io@henrian.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 2 - Pre-Alpha",
               "License :: OSI Approved :: MIT License",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.6",
               "Programming Language :: Python :: 2.7",
               "Topic :: Software Development :: Libraries :: Python Modules",
               "Topic :: System :: Archiving :: Packaging",
               "Topic :: System :: Filesystems"
            ],
            "description": "Python (package) installation\n-----------------------------\n\nGetting started from `PyPI <https://pypi.python.org/pypi/pi/>`__:\n\n::\n\n    easy_install pi\n\n`Whence easy\\_install? <#setuptools>`__\n\nCommands\n--------\n\n-  Uninstall package named \"pip\":\n\n   ::\n\n       pi uninstall pip\n\n-  Install package named \"filesequence\":\n\n   ::\n\n       pi install filesequence\n\n-  List paths that Python searches for imported modules:\n\n   ::\n\n       pi paths\n\n-  List installed packages:\n\n   ::\n\n       pi list\n\nTesting\n-------\n\nContinuous integration:\n\n|Travis CI Build Status|\n\nOr run tests locally:\n\n::\n\n    nosetests --with-doctest\n\nRelated\n~~~~~~~\n\n-  http://guide.python-distribute.org/creation.html\n-  `distribute/pkg\\_resources\n   docs <http://pythonhosted.org/distribute/pkg_resources.html>`__\n-  standard library\n   ```site`` <http://docs.python.org/2/library/site.html>`__\n-  standard library `environment\n   variables <http://docs.python.org/2/using/cmdline.html#environment-variables>`__\n\nSetuptools\n~~~~~~~~~~\n\n``pi`` does not yet completely replace\n`setuptools <https://pypi.python.org/pypi/setuptools>`__. You may need\nto install it first:\n\n+----------+-----------------------------------------+\n| Distro   | Package manager command                 |\n+==========+=========================================+\n| Ubuntu   | ``apt-get install python-setuptools``   |\n+----------+-----------------------------------------+\n| Mac      | built-in                                |\n+----------+-----------------------------------------+\n| Arch     | ``pacman -S python-setuptools``         |\n+----------+-----------------------------------------+\n| CentOS   | ``yum install python-setuptools``       |\n+----------+-----------------------------------------+\n\nLicense\n-------\n\nCopyright (c) 2013 Christopher Brown. `MIT\nLicensed <https://raw.github.com/chbrown/pi/master/LICENSE>`__.\n\n.. |Travis CI Build Status| image:: https://travis-ci.org/chbrown/pi.png?branch=master\n   :target: https://travis-ci.org/chbrown/pi",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/chbrown/pi",
            "keywords": null,
            "license": "Copyright (c) 2013 Christopher Brown\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.",
            "maintainer": null,
            "maintainer_email": null,
            "name": "pi",
            "package_url": "https://pypi.org/project/pi/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/pi/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/chbrown/pi"
            },
            "release_url": "https://pypi.org/project/pi/0.1.2/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Simpler python package installation",
            "version": "0.1.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ip",
            "package_url": "https://pypi.org/project/ip/",
            "platform": "",
            "project_url": "https://pypi.org/project/ip/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/ip/0.0.1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Vitalii Vanovschi",
            "author_email": "support@parallelpython.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Natural Language :: English",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Topic :: Software Development",
               "Topic :: System :: Distributed Computing"
            ],
            "description": "Parallel Python module (PP) provides an easy and efficient way to create parallel-enabled applications for SMP computers and clusters. PP module features cross-platform portability and dynamic load balancing. Thus application written with PP will parallelize efficiently even on heterogeneous and multi-platform clusters (including clusters running other application with variable CPU loads). Visit http://www.parallelpython.com for further information.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "http://www.parallelpython.com/downloads/pp/pp-1.6.5.zip",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "http://www.parallelpython.com",
            "keywords": null,
            "license": "BSD-like",
            "maintainer": null,
            "maintainer_email": null,
            "name": "pp",
            "package_url": "https://pypi.org/project/pp/",
            "platform": "Windows,Linux,Unix",
            "project_url": "https://pypi.org/project/pp/",
            "project_urls": {
               "Download": "http://www.parallelpython.com/downloads/pp/pp-1.6.5.zip",
               "Homepage": "http://www.parallelpython.com"
            },
            "release_url": "https://pypi.org/project/pp/1.6.5/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Parallel and distributed programming for Python",
            "version": "1.6.5",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Marcus Donnelly",
            "author_email": "marcus.k.donnelly@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "Intended Audience :: Science/Research",
               "License :: OSI Approved :: BSD License",
               "Programming Language :: Python :: 3",
               "Topic :: Scientific/Engineering"
            ],
            "description": "",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "Oceanography,Utilities",
            "license": "BSD",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ocutils",
            "package_url": "https://pypi.org/project/ocutils/",
            "platform": "",
            "project_url": "https://pypi.org/project/ocutils/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/ocutils/1.1.1/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Utility functions for oceanography related work",
            "version": "1.1.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Kiana Alessandra V. Villaera",
            "author_email": "kiana.villaera@senti.com.ph",
            "bugtrack_url": null,
            "classifiers": [
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 3"
            ],
            "description": "Contains everything you might need to perform essential data center functions\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/K-Winkles/dcutils",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dcutils",
            "package_url": "https://pypi.org/project/dcutils/",
            "platform": "",
            "project_url": "https://pypi.org/project/dcutils/",
            "project_urls": {
               "Homepage": "https://github.com/K-Winkles/dcutils"
            },
            "release_url": "https://pypi.org/project/dcutils/0.6/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "A simple package for data center utilities",
            "version": "0.6",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Mike Kazantsev",
            "author_email": "mk.fraggod@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Intended Audience :: Developers",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3.5",
               "Topic :: Software Development",
               "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description": "pretty-yaml (or pyaml)\n======================\n\nPyYAML-based python module to produce pretty and readable YAML-serialized data.\n\nThis module is for serialization only, see `ruamel.yaml`_ module for literate\nYAML parsing (keeping track of comments, spacing, line/column numbers of values, etc).\n\n[note: to dump stuff parsed by ruamel.yaml with this module, use only ``YAML(typ='safe')`` there]\n\n.. contents::\n  :backlinks: none\n\n\nWarning\n-------\n\nPrime goal of this module is to produce human-readable output that can be easily\nmanipulated and re-used, but maybe with some occasional caveats.\n\nOne good example of such \"caveat\" is that e.g. ``{'foo': '123'}`` will serialize\nto ``foo: 123``, which for PyYAML would be a bug, as 123 will then be read back\nas an integer from that, but here it's a feature.\n\nSo please do not rely on the thing to produce output that can always be\ndeserialized exactly to what was exported, at least - use PyYAML (e.g. with\noptions from the next section) for that.\n\n\nWhat this module does and why\n-----------------------------\n\nYAML is generally nice and easy format to read *if* it was written by humans.\n\nPyYAML can a do fairly decent job of making stuff readable, and the best\ncombination of parameters for such output that I've seen so far is probably this one::\n\n  >>> m = [123, 45.67, {1: None, 2: False}, u'some text']\n  >>> data = dict(a=u'asldnsa\\nasldpáknsa\\n', b=u'whatever text', ma=m, mb=m)\n  >>> yaml.safe_dump(data, sys.stdout, allow_unicode=True, default_flow_style=False)\n  a: 'asldnsa\n\n    asldpáknsa\n\n    '\n  b: whatever text\n  ma: &id001\n  - 123\n  - 45.67\n  - 1: null\n    2: false\n  - some text\n  mb: *id001\n\npyaml tries to improve on that a bit, with the following tweaks:\n\n* Most human-friendly representation options in PyYAML (that I know of) get\n  picked as defaults.\n\n* Does not dump \"null\" values, if possible, replacing these with just empty\n  strings, which have the same meaning but reduce visual clutter and are easier\n  to edit.\n\n* Dicts, sets, OrderedDicts, defaultdicts, namedtuples, etc are representable\n  and get sorted on output (OrderedDicts and namedtuples keep their ordering),\n  so that output would be as diff-friendly as possible, and not arbitrarily\n  depend on python internals.\n\n  It appears that at least recent PyYAML versions also do such sorting for\n  python dicts.\n\n* List items get indented, as they should be.\n\n* bytestrings that can't be auto-converted to unicode raise error, as yaml has\n  no \"binary bytes\" (i.e. unix strings) type.\n\n* Attempt is made to pick more readable string representation styles, depending\n  on the value, e.g.::\n\n    >>> yaml.safe_dump(cert, sys.stdout)\n    cert: '-----BEGIN CERTIFICATE-----\n\n      MIIH3jCCBcagAwIBAgIJAJi7AjQ4Z87OMA0GCSqGSIb3DQEBCwUAMIHBMRcwFQYD\n\n      VQQKFA52YWxlcm9uLm5vX2lzcDEeMBwGA1UECxMVQ2VydGlmaWNhdGUgQXV0aG9y\n    ...\n\n    >>> pyaml.p(cert):\n    cert: |\n      -----BEGIN CERTIFICATE-----\n      MIIH3jCCBcagAwIBAgIJAJi7AjQ4Z87OMA0GCSqGSIb3DQEBCwUAMIHBMRcwFQYD\n      VQQKFA52YWxlcm9uLm5vX2lzcDEeMBwGA1UECxMVQ2VydGlmaWNhdGUgQXV0aG9y\n    ...\n\n* \"force_embed\" option to avoid having &id stuff scattered all over the output\n  (which might be beneficial in some cases, hence the option).\n\n* \"&id\" anchors, if used, get labels from the keys they get attached to,\n  not just use meaningless enumerators.\n\n* \"string_val_style\" option to only apply to strings that are values, not keys,\n  i.e::\n\n    >>> pyaml.p(data, string_val_style='\"')\n    key: \"value\\nasldpáknsa\\n\"\n    >>> yaml.safe_dump(data, sys.stdout, allow_unicode=True, default_style='\"')\n    \"key\": \"value\\nasldpáknsa\\n\"\n\n* \"sort_dicts=False\" option to leave dict item ordering to python, and not\n  force-sort them in yaml output, which can be important for python 3.6+ where\n  they retain ordering info.\n\n* Has an option to add vertical spacing (empty lines) between keys on different\n  depths, to make output much more seekable.\n\nResult for the (rather meaningless) example above (without any additional\ntweaks)::\n\n  >>> pyaml.p(data)\n  a: |\n    asldnsa\n    asldpáknsa\n  b: 'whatever text'\n  ma: &ma\n    - 123\n    - 45.67\n    - 1:\n      2: false\n    - 'some text'\n  mb: *ma\n\n----------\n\nExtended example::\n\n  >>> pyaml.dump(conf, sys.stdout, vspacing=[2, 1]):\n  destination:\n\n    encoding:\n      xz:\n        enabled: true\n        min_size: 5120\n        options:\n        path_filter:\n          - \\.(gz|bz2|t[gb]z2?|xz|lzma|7z|zip|rar)$\n          - \\.(rpm|deb|iso)$\n          - \\.(jpe?g|gif|png|mov|avi|ogg|mkv|webm|mp[34g]|flv|flac|ape|pdf|djvu)$\n          - \\.(sqlite3?|fossil|fsl)$\n          - \\.git/objects/[0-9a-f]+/[0-9a-f]+$\n\n    result:\n      append_to_file:\n      append_to_lafs_dir:\n      print_to_stdout: true\n\n    url: http://localhost:3456/uri\n\n\n  filter:\n    - /(CVS|RCS|SCCS|_darcs|\\{arch\\})/$\n    - /\\.(git|hg|bzr|svn|cvs)(/|ignore|attributes|tags)?$\n    - /=(RELEASE-ID|meta-update|update)$\n\n\n  http:\n\n    ca_certs_files: /etc/ssl/certs/ca-certificates.crt\n\n    debug_requests: false\n\n    request_pool_options:\n      cachedConnectionTimeout: 600\n      maxPersistentPerHost: 10\n      retryAutomatically: true\n\n\n  logging:\n\n    formatters:\n      basic:\n        datefmt: '%Y-%m-%d %H:%M:%S'\n        format: '%(asctime)s :: %(name)s :: %(levelname)s: %(message)s'\n\n    handlers:\n      console:\n        class: logging.StreamHandler\n        formatter: basic\n        level: custom\n        stream: ext://sys.stderr\n\n    loggers:\n      twisted:\n        handlers:\n          - console\n        level: 0\n\n    root:\n      handlers:\n        - console\n      level: custom\n\nNote that unless there are many moderately wide and deep trees of data, which\nare expected to be read and edited by people, it might be preferrable to\ndirectly use PyYAML regardless, as it won't introduce another (rather pointless\nin that case) dependency and a point of failure.\n\n\nSome Tricks\n-----------\n\n* Pretty-print any yaml or json (yaml subset) file from the shell::\n\n    % python -m pyaml /path/to/some/file.yaml\n    % curl -s https://www.githubstatus.com/api/v2/summary.json | python -m pyaml\n\n* Process and replace json/yaml file in-place::\n\n    % python -m pyaml -r file-with-json.data\n\n* Easier \"debug printf\" for more complex data (all funcs below are aliases to\n  same thing)::\n\n    pyaml.p(stuff)\n    pyaml.pprint(my_data)\n    pyaml.pprint('----- HOW DOES THAT BREAKS!?!?', input_data, some_var, more_stuff)\n    pyaml.print(data, file=sys.stderr) # needs \"from __future__ import print_function\"\n\n* Force all string values to a certain style (see info on these in\n  `PyYAML docs`_)::\n\n    pyaml.dump(many_weird_strings, string_val_style='|')\n    pyaml.dump(multiline_words, string_val_style='>')\n    pyaml.dump(no_want_quotes, string_val_style='plain')\n\n  Using ``pyaml.add_representer()`` (note \\*p\\*yaml) as suggested in\n  `this SO thread`_ (or `github-issue-7`_) should also work.\n\n* Control indent and width of the results::\n\n    pyaml.dump(wide_and_deep, indent=4, width=120)\n\n  These are actually keywords for PyYAML Emitter (passed to it from Dumper),\n  see more info on these in `PyYAML docs`_.\n\n* Dump multiple yaml documents into a file: ``pyaml.dump_all([data1, data2, data3], dst_file)``\n\n  explicit_start=True is implied, unless explicit_start=False is passed.\n\n.. _PyYAML docs: http://pyyaml.org/wiki/PyYAMLDocumentation#Scalars\n.. _this SO thread: http://stackoverflow.com/a/7445560\n.. _github-issue-7: https://github.com/mk-fg/pretty-yaml/issues/7\n\n\nInstallation\n------------\n\nIt's a regular package for Python (3.x or 2.x).\n\nModule uses PyYAML_ for processing of the actual YAML files and should pull it\nin as a dependency.\n\nDependency on unidecode_ module is optional and should only be necessary if\nsame-id objects or recursion is used within serialized data.\n\nBe sure to use python3/python2, pip3/pip2, easy_install-... binaries below,\nbased on which python version you want to install the module for, if you have\nseveral on the system (as is norm these days for py2-py3 transition).\n\nUsing pip_ is the best way::\n\n  % pip install pyaml\n\n(add --user option to install into $HOME for current user only)\n\nOr, if you don't have \"pip\" command::\n\n  % python -m ensurepip\n  % python -m pip install --upgrade pip\n  % python -m pip install pyaml\n\n(same suggestion wrt \"install --user\" as above)\n\nOn a very old systems, one of these might work::\n\n  % curl https://bootstrap.pypa.io/get-pip.py | python\n  % pip install pyaml\n\n  % easy_install pyaml\n\n  % git clone --depth=1 https://github.com/mk-fg/pretty-yaml\n  % cd pretty-yaml\n  % python setup.py install\n\n(all of install-commands here also have --user option,\nsee also `pip docs \"installing\" section`_)\n\nCurrent-git version can be installed like this::\n\n  % pip install 'git+https://github.com/mk-fg/pretty-yaml#egg=pyaml'\n\nNote that to install stuff to system-wide PATH and site-packages (without\n--user), elevated privileges (i.e. root and su/sudo) are often required.\n\nUse \"...install --user\", `~/.pydistutils.cfg`_ or virtualenv_ to do unprivileged\ninstalls into custom paths.\n\nMore info on python packaging can be found at `packaging.python.org`_.\n\n.. _ruamel.yaml: https://bitbucket.org/ruamel/yaml/\n.. _PyYAML: http://pyyaml.org/\n.. _unidecode: http://pypi.python.org/pypi/Unidecode\n.. _pip: http://pip-installer.org/\n.. _pip docs \"installing\" section: http://www.pip-installer.org/en/latest/installing.html\n.. _~/.pydistutils.cfg: http://docs.python.org/install/index.html#distutils-configuration-files\n.. _virtualenv: http://pypi.python.org/pypi/virtualenv\n.. _packaging.python.org: https://packaging.python.org/installing/\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/mk-fg/pretty-yaml",
            "keywords": "yaml serialization pretty print format human readable readability",
            "license": "WTFPL",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyaml",
            "package_url": "https://pypi.org/project/pyaml/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyaml/",
            "project_urls": {
               "Homepage": "https://github.com/mk-fg/pretty-yaml"
            },
            "release_url": "https://pypi.org/project/pyaml/20.4.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "PyYAML-based module to produce pretty and readable YAML-serialized data",
            "version": "20.4.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "haogege",
            "author_email": "1394168335@qq.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# pyyml\nUse python in yaml\n## 基本使用\n在python中使用：\n```python\nfrom pyyml import load\n\nwith open('conf.yml') as f:\n    raw_conf = f.read()\nconfig = load(raw_conf)\nprint(config)\n```\n在yaml中 `${...}` 中的内容将会被python执行：\n\nyaml内容\n```yaml\nsum: ${1 + 1}\n```\n实际解析内容\n```python\n{'sum': 2}\n```\n通过在文件开头第一行注释来导入所需的包：\n\n```yaml\n# libs:['os', 'os.path:path', 'this']\n```\n通过 [包名]:[别名] 取别名导入包\n\n`'os.path:path' 等同于 python 中的 from os import path`\n\n例如yaml文件内容\n```yaml\n# libs:['os', 'os.path:path', 'this']\nos_name: ${os.name}\nbase_dir: ${path.abspath(path.dirname(__file__))}\n```\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/q1394168335/pyyml",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyyml",
            "package_url": "https://pypi.org/project/pyyml/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyyml/",
            "project_urls": {
               "Homepage": "https://github.com/q1394168335/pyyml"
            },
            "release_url": "https://pypi.org/project/pyyml/0.0.2/",
            "requires_dist": [
               "pyyaml (>=3.13)"
            ],
            "requires_python": "",
            "summary": "Use python in yaml",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Michael Foord",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "rs",
            "package_url": "https://pypi.org/project/rs/",
            "platform": "",
            "project_url": "https://pypi.org/project/rs/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/rs/0.0/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "",
            "version": "0.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Ramses",
            "author_email": "hello@ramses.tech",
            "bugtrack_url": null,
            "classifiers": [
               "Framework :: Pyramid",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.4",
               "Programming Language :: Python :: 3.5",
               "Topic :: Internet :: WWW/HTTP",
               "Topic :: Internet :: WWW/HTTP :: WSGI :: Application"
            ],
            "description": "# `Ra`\n[![Build Status](https://travis-ci.org/ramses-tech/ra.svg?branch=master)](https://travis-ci.org/ramses-tech/ra)\n[![Documentation](https://readthedocs.org/projects/ra/badge/?version=stable)](http://ra.readthedocs.org)\n\nRa is a test suite generator and helper library for testing APIs described\nin [RAML](http://raml.org/).\n\nOut of the box, Ra provides a basic, automated test suite to test the routes\ndeclared in the RAML document. It provides test helpers for augmenting these\nwith custom tests to test application-specific logic, side effects, etc.\n\nRa is primarily designed to provide testing support for\n[ramses](http://github.com/ramses-tech/ramses) and\n[nefertari](http://github.com/ramses-tech/nefertari) applications, but can\nbe used with any WSGI-conformant, RAML-described API.\n\nIt currently depends on pytest but may be adapted for other test frameworks\nin the future. It works best using WebTest but doesn't require it.\n\n## Name\n\nRa was the god of the sun, the most important god in ancient Egypt.\n\n\n## Try it (dev)\n\nRun the test suite:\n\n```bash\n    $ pip install -r requirements.txt\n    $ py.test\n```\n\nCheck out the example:\n\n```bash\n    $ cd examples/ramses-test\n    $ pip install -r requirements.txt\n    $ py.test\n```\n\nThe example RAML at `examples/ramses-test/api.raml` and the test file\n`examples/ramses-test/tests/test_api.py` should be helpful to reference.\n\nSee the docs in `docs/`, and the `api.raml` and `tests/test_api.py` in\n`tests/apps/ramses_test`",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/ramses-tech/ra",
            "keywords": "web raml",
            "license": "UNKNOWN",
            "maintainer": null,
            "maintainer_email": null,
            "name": "ra",
            "package_url": "https://pypi.org/project/ra/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/ra/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/ramses-tech/ra"
            },
            "release_url": "https://pypi.org/project/ra/0.2.0/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Test RAML API definition",
            "version": "0.2.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Shoumik Palkar",
            "author_email": "shoumik@cs.stanford.edu",
            "bugtrack_url": null,
            "classifiers": [
               "License :: OSI Approved :: BSD License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 3"
            ],
            "description": "## split annotations\n\nThis package contains the Python implementation of [split annotations](), a system for optimizing applications\nthat combine many data-intensive library functions. See some useful links below.\n\n* [Documentation for this package](https://www.weld.rs/split-annotations/docs/)\n* [GitHub repository](https://www.github.com/weld-project/split-annotations)\n* [SOSP 2019 Paper describing the system](https://shoumik.xyz/static/papers/mozart-sosp19final.pdf)\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://www.github.com/weld-project/split-annotations",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "sa",
            "package_url": "https://pypi.org/project/sa/",
            "platform": "",
            "project_url": "https://pypi.org/project/sa/",
            "project_urls": {
               "Homepage": "https://www.github.com/weld-project/split-annotations"
            },
            "release_url": "https://pypi.org/project/sa/0.0.4/",
            "requires_dist": [
               "numpy",
               "pandas",
               "scipy",
               "sharedmem"
            ],
            "requires_python": ">=3.6",
            "summary": "Python split annotations package",
            "version": "0.0.4",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Mitch Garnaat",
            "author_email": "mitch@garnaat.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.6",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.3",
               "Programming Language :: Python :: 3.4",
               "Topic :: Internet"
            ],
            "description": "####\nboto\n####\nboto 2.49.0\n\nReleased: 11-July-2018\n\n.. image:: https://travis-ci.org/boto/boto.svg?branch=develop\n        :target: https://travis-ci.org/boto/boto\n\n.. image:: https://pypip.in/d/boto/badge.svg\n        :target: https://pypi.python.org/pypi/boto/\n\n******\nBoto 3\n******\n\n`Boto3 <https://github.com/boto/boto3>`__, the next version of Boto, is now\nstable and recommended for general use.  It can be used side-by-side with Boto\nin the same project, so it is easy to start using Boto3 in your existing\nprojects as well as new projects. Going forward, API updates and all new\nfeature work will be focused on Boto3.\n\nTo assist users who still depend on Boto and cannot immediately switch over, we\nwill be triaging and addressing critical issues and PRs in Boto in the short\nterm. As more users make the switch to Boto3, we expect to reduce our\nmaintenance involvement over time. If we decide on a cutoff date or any\nsignificant changes to our maintenance plan, we will make pre-announcements\nwell ahead of schedule to allow ample time for our users to adapt/migrate.\n\n\n************\nIntroduction\n************\n\nBoto is a Python package that provides interfaces to Amazon Web Services.\nCurrently, all features work with Python 2.6 and 2.7. Work is under way to\nsupport Python 3.3+ in the same codebase. Modules are being ported one at\na time with the help of the open source community, so please check below\nfor compatibility with Python 3.3+.\n\nTo port a module to Python 3.3+, please view our `Contributing Guidelines`_\nand the `Porting Guide`_. If you would like, you can open an issue to let\nothers know about your work in progress. Tests **must** pass on Python\n2.6, 2.7, 3.3, and 3.4 for pull requests to be accepted.\n\n\n********\nServices\n********\n\nAt the moment, boto supports:\n\n* Compute\n\n  * Amazon Elastic Compute Cloud (EC2) (Python 3)\n  * Amazon Elastic Map Reduce (EMR) (Python 3)\n  * AutoScaling (Python 3)\n  * Amazon Kinesis (Python 3)\n  * AWS Lambda (Python 3)\n  * Amazon EC2 Container Service (Python 3)\n\n* Content Delivery\n\n  * Amazon CloudFront (Python 3)\n\n* Database\n\n  * Amazon Relational Data Service (RDS)\n  * Amazon DynamoDB (Python 3)\n  * Amazon SimpleDB (Python 3)\n  * Amazon ElastiCache (Python 3)\n  * Amazon Redshift (Python 3)\n\n* Deployment and Management\n\n  * AWS Elastic Beanstalk (Python 3)\n  * AWS CloudFormation (Python 3)\n  * AWS Data Pipeline (Python 3)\n  * AWS Opsworks (Python 3)\n  * AWS CloudTrail (Python 3)\n  * AWS CodeDeploy (Python 3)\n\n* Administration & Security\n\n  * AWS Identity and Access Management (IAM) (Python 3)\n  * AWS Key Management Service (KMS) (Python 3)\n  * AWS Config (Python 3)\n  * AWS CloudHSM (Python 3)\n\n* Application Services\n\n  * Amazon CloudSearch (Python 3)\n  * Amazon CloudSearch Domain (Python 3)\n  * Amazon Elastic Transcoder (Python 3)\n  * Amazon Simple Workflow Service (SWF) (Python 3)\n  * Amazon Simple Queue Service (SQS) (Python 3)\n  * Amazon Simple Notification Server (SNS) (Python 3)\n  * Amazon Simple Email Service (SES) (Python 3)\n  * Amazon Cognito Identity (Python 3)\n  * Amazon Cognito Sync (Python 3)\n  * Amazon Machine Learning (Python 3)\n\n* Monitoring\n\n  * Amazon CloudWatch (EC2 Only) (Python 3)\n  * Amazon CloudWatch Logs (Python 3)\n\n* Networking\n\n  * Amazon Route53 (Python 3)\n  * Amazon Route 53 Domains (Python 3)\n  * Amazon Virtual Private Cloud (VPC) (Python 3)\n  * Elastic Load Balancing (ELB) (Python 3)\n  * AWS Direct Connect (Python 3)\n\n* Payments and Billing\n\n  * Amazon Flexible Payment Service (FPS)\n\n* Storage\n\n  * Amazon Simple Storage Service (S3) (Python 3)\n  * Amazon Glacier (Python 3)\n  * Amazon Elastic Block Store (EBS)\n  * Google Cloud Storage\n\n* Workforce\n\n  * Amazon Mechanical Turk\n\n* Other\n\n  * Marketplace Web Services (Python 3)\n  * AWS Support (Python 3)\n\nThe goal of boto is to support the full breadth and depth of Amazon\nWeb Services.  In addition, boto provides support for other public\nservices such as Google Storage in addition to private cloud systems\nlike Eucalyptus, OpenStack and Open Nebula.\n\nBoto is developed mainly using Python 2.6.6 and Python 2.7.3 on Mac OSX\nand Ubuntu Maverick.  It is known to work on other Linux distributions\nand on Windows.  Most of Boto requires no additional libraries or packages\nother than those that are distributed with Python.  Efforts are made\nto keep boto compatible with Python 2.5.x but no guarantees are made.\n\n************\nInstallation\n************\n\nInstall via `pip`_:\n\n::\n\n    $ pip install boto\n\nInstall from source:\n\n::\n\n    $ git clone git://github.com/boto/boto.git\n    $ cd boto\n    $ python setup.py install\n\n**********\nChangeLogs\n**********\n\nTo see what has changed over time in boto, you can check out the\nrelease notes at `http://docs.pythonboto.org/en/latest/#release-notes`\n\n***************************\nFinding Out More About Boto\n***************************\n\nThe main source code repository for boto can be found on `github.com`_.\nThe boto project uses the `gitflow`_ model for branching.\n\n`Online documentation`_ is also available. The online documentation includes\nfull API documentation as well as Getting Started Guides for many of the boto\nmodules.\n\nBoto releases can be found on the `Python Cheese Shop`_.\n\nJoin our IRC channel `#boto` on FreeNode.\nWebchat IRC channel: http://webchat.freenode.net/?channels=boto\n\nJoin the `boto-users Google Group`_.\n\n*************************\nGetting Started with Boto\n*************************\n\nYour credentials can be passed into the methods that create\nconnections.  Alternatively, boto will check for the existence of the\nfollowing environment variables to ascertain your credentials:\n\n**AWS_ACCESS_KEY_ID** - Your AWS Access Key ID\n\n**AWS_SECRET_ACCESS_KEY** - Your AWS Secret Access Key\n\nCredentials and other boto-related settings can also be stored in a\nboto config file.  See `this`_ for details.\n\n.. _Contributing Guidelines: https://github.com/boto/boto/blob/develop/CONTRIBUTING\n.. _Porting Guide: http://boto.readthedocs.org/en/latest/porting_guide.html\n.. _pip: http://www.pip-installer.org/\n.. _release notes: https://github.com/boto/boto/wiki\n.. _github.com: http://github.com/boto/boto\n.. _Online documentation: http://docs.pythonboto.org\n.. _Python Cheese Shop: http://pypi.python.org/pypi/boto\n.. _this: http://docs.pythonboto.org/en/latest/boto_config_tut.html\n.. _gitflow: http://nvie.com/posts/a-successful-git-branching-model/\n.. _neo: https://github.com/boto/boto/tree/neo\n.. _boto-users Google Group: https://groups.google.com/forum/?fromgroups#!forum/boto-users\n\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/boto/boto/",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "boto",
            "package_url": "https://pypi.org/project/boto/",
            "platform": "Posix; MacOS X; Windows",
            "project_url": "https://pypi.org/project/boto/",
            "project_urls": {
               "Homepage": "https://github.com/boto/boto/"
            },
            "release_url": "https://pypi.org/project/boto/2.49.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Amazon Web Services Library",
            "version": "2.49.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Hadi Asghari",
            "author_email": "hd.asghari@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 3",
               "Topic :: Software Development :: Libraries :: Python Modules",
               "Topic :: System :: Networking"
            ],
            "description": "pyasn\n=====\n\n.. image:: https://pypip.in/v/pyasn/badge.png\n   :target: https://pypi.python.org/pypi/pyasn\n\n.. image:: https://pypip.in/d/pyasn/badge.png\n   :target: https://pypi.python.org/pypi/pyasn\n\n\n**pyasn** is a Python extension module that enables very fast IP address to Autonomous System Number lookups.\nCurrent state and Historical lookups can be done, based on the MRT/RIB BGP archive used as input.\n\n*pyasn* is different from other ASN lookup tools in that it provides **offline** and **historical** lookups.\nIt provides utility scripts for users to build their own lookup databases based on any MRT/RIB archive.\nThis makes *pyasn* much faster than online dig/whois/json lookups.\n\nThe module is written in C and Python, and cross-compiles on Linux and Windows. Underneath, it uses a radix tree\ndata structure for storage of IP addresses. In the current version, it borrows code from *py-radix* to support\nboth IPV4 and IPV6 network prefixes. The current release is a beta. Compared to the previous version, it provides\nsupport for Python 2 and 3; adds new functionality, performance improvements, and unit-tests.\n\n*pyasn* is developed and maintained by researchers at the Economics of Cybersecurity research group at Delft\nUniversity of Technology (http://econsec.tbm.tudlft.nl). The package is used on an almost daily basis and bugs\nare fixed pretty quickly.  The package is largely developed and maintained by Hadi Asghari and Arman Noroozian.\nPlease report any bugs via GitHub (https://github.com/hadiasghari/pyasn) or email the developers.\n\n\nInstallation\n============\nInstallation is a breeze via pip: ::\n\n    pip install pyasn --pre\n\nOr with the standard Python: ::\n\n    python setup.py build\n    python setup.py install --record log\n\nYou will need to have pip, setuptools and build essentials installed if you build the package manually. On\nUbuntu/Debian you can get them using the following command: ::\n\n    sudo apt-get install python-pip python-dev build-essential\n\nBuilding the C module on Windows, using either pip or from source, requires Microsoft Visual C++ to be installed.\npyasn has been tested using Visual C++ Express 2010, available freely from Microsoft's website, on both the\nofficial Python 3.4 release and Miniconda3. Other versions of Python, Visual Studio, and Cygwin could also work\nwith minor modifications.\n\nWe plan to release *pyasn* packages to major Linux repositories once it is out of beta.\n\n\nUsage\n=====\nA simple example that demonstrates most of the features: ::\n\n    import pyasn\n\n    # Initialize module and load IP to ASN database\n    # the sample database can be downloaded or built - see below\n    asndb = pyasn.pyasn('ipasn_20140513.dat')\n\n    asndb.lookup('8.8.8.8')\n    # should return: (15169, '8.8.8.0/24'), the origin AS, and the BGP prefix it matches\n\n    asndb.get_as_prefixes(1128)\n    # returns ['130.161.0.0/16', '131.180.0.0/16', '145.94.0.0/16'], TU-Delft prefixes\n\n\nIPASN Data Files\n================\nIPASN data files are a long list of prefixes used to lookup AS number for IPs. An excerpt from such a file looks\nlike this: ::\n\n    ; IP-ASN32-DAT file\n    ; Original file : <Path to a rib file>\n    ; Converted on  : Tue May 13 22:03:05 2014\n    ; CIDRs         : 512490\n    ;\n    1.0.0.0/24  15169\n    1.0.128.0/17        9737\n    1.0.128.0/18        9737\n    1.0.128.0/19        9737\n    1.0.129.0/24        23969\n    ...\n\nIPASN data files can be created by downloading MRT/RIB BGP archives from Routeviews (or similar sources),\nand parsing them using provided scripts that tail the BGP AS-Path. This can be done simply as follows: ::\n\n    pyasn_util_download.py --latest\n    pyasn_util_convert.py --single <Downloaded RIB File> <ipasn_db_file_name>\n\n\n**NOTE:** These scripts are by default installed to ``/usr/local/bin`` and can be executed directly. If you installed\nthe package to a user directory, these scripts will not be on the path and you will have to invoke them by navigating\nto the folder in which they have been copied (e.g. ``~/.local/bin``).\n\nWe also provide download links to a large number of previously generated IPASN data files. These are based on\nweekly  snapshots of the Routeviews data from 2005-2015, accessible here:\nhttp://data.3tu.nl/repository/uuid:d4d23b8e-2077-4592-8b47-cb476ad16e12\n\n**New in v1.6:** To save disk space, you can gzip IPASN data files. The load time will be slighlty longer.\n\n\nPerformance Tip\n===============\nInitial loading of a IPASN data file is the most heavy operation of the package. For fast lookups using multiple\nIPASN data files, for instance for historical lookups on multiple dates, we recommend caching of loaded data files\nfor better performance.\n\n\nUninstalling pyasn\n==================\nYou can remove *pyasn* as follows: ::\n\n    pip uninstall pyasn\n\nIf you built and installed the package your self use the recorded log to remove the installed files.\n\n**Removing PyASN version 1.2**: *pyasn* v1.5/1.6 and v1.2 can be installed side by side (due to lower-cased package\nname). To avoid mistakes, you can uninstall the old **PyASN** by deleting the following files from your Python\ninstallation: ::\n\n    PYTHONDIR/dist-packages/PyASN.so\n    PYTHONDIR/dist-packages/PyASN-1.2.egg-info\n\n\nPackage Structure\n=================\nThe main portions of the directory tree are as follows: ::\n\n    .\n    ├── pyasn/__init__.py       # Python code of the main pyasn module\n    ├── pyasn/pyasn_radix.c     # C extension code (Python RADIX module with bulk load)\n    ├── pyasn/_radix/*          # C extension code (Based on original RADIX code from MRTd)\n    ├── pyasn/mrtx.py           # python module used to convert MRT files to pyasn DB files\n    ├── pyasn-utils/*.py        # Scripts to download & convert BGP MRT dumps to IPASN databases\n    ├── data/                   # Test Resources and some sample DBs to use\n    ├── tests/                  # Tests\n    └── setup.py                # Standard setup.py for installation/testing/etc.\n\n\n\nTesting pyasn Sources\n=====================\nA limited number of unit tests are provided in the ``tests/`` directory when downlading the sources. They can be\nrun with the following command: ::\n\n    python setup.py test\n\nThis beta release has been tested under python version 2.6, 2.7, 3.3, 3.4 and 3.5. We appreciate contributions towards\ntesting *pyasn*!\n\n**New in v1.6:** pyasn_util_convert.py offers a '--dump-screen' option which shows the MRT/RIB archive contents and\nthe chosen origin-AS.\n\n\nLicense & Acknowledgments\n=========================\n*pyasn* is licensed under the MIT license.\n\nIt extends code from py-radix (Michael J. Schultz and Damien Miller),  and improves upon it in several ways, for\ninstance in lowering memory usage and adding bulk prefix/origin load. The underlying radix tree implementation is\ntaken (and modified) from MRTd. These are all subject to their respective licenses.  Please see the LICENSE file\nfor details.\n\nThanks to Dr. Chris Lee (of Shadowserver) for proposing the use of radix trees.\n\nA handful of GitHub developers have contributed features and bug fixes to the latest releases.\nMany thanks to all of them.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": null,
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/hadiasghari/pyasn",
            "keywords": "ip asn autonomous system bgp whois prefix radix python routing networking",
            "license": "MIT",
            "maintainer": null,
            "maintainer_email": null,
            "name": "pyasn",
            "package_url": "https://pypi.org/project/pyasn/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/pyasn/",
            "project_urls": {
               "Homepage": "https://github.com/hadiasghari/pyasn"
            },
            "release_url": "https://pypi.org/project/pyasn/1.6.0b1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Offline IP address to Autonomous System Number lookup module.",
            "version": "1.6.0b1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Perdix Software",
            "author_email": "ssmith@perdixsw.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 2 - Pre-Alpha",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.4",
               "Programming Language :: Python :: 3.5",
               "Programming Language :: Python :: 3.6",
               "Topic :: Office/Business :: Financial",
               "Topic :: Scientific/Engineering :: Mathematics"
            ],
            "description": "UNKNOWN",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "https://www.github.com/perdixsw/umpy/tarball/0.1.0",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://www.github.com/perdixsw/umpy",
            "keywords": "units,measure,measurement,conversion,converter",
            "license": "MIT",
            "maintainer": null,
            "maintainer_email": null,
            "name": "umpy",
            "package_url": "https://pypi.org/project/umpy/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/umpy/",
            "project_urls": {
               "Download": "https://www.github.com/perdixsw/umpy/tarball/0.1.0",
               "Homepage": "https://www.github.com/perdixsw/umpy"
            },
            "release_url": "https://pypi.org/project/umpy/0.1.0/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Simple unit of measure conversion for python, optimized for manufacturing contexts.",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Jay Marcyes",
            "author_email": "jay@marcyes.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Environment :: Console",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Topic :: Software Development :: Testing"
            ],
            "description": "Pyt\n===\n\nPyt is a lightweight wrapper around `Python’s unittest\nmodule <https://docs.python.org/3/library/unittest.html>`__ that adds\nsome nice features and enhancements over the stock ``unittest`` module.\n\nQuickstart\n~~~~~~~~~~\n\nPyt overrides unittest’s built-in pathfinding to be smarter and less\nverbose, so you can match tests using prefix matching which makes\nrunning a test like:\n\n::\n\n   $ python -m unittest tests.foo_test.BarTestCase.test_che\n\nas simple as:\n\n::\n\n   $ pyt foo.Bar.che\n\nBut it’s even less verbose if you want it to be, pyt can reach into the\nmodules and classes to do its matching, so you don’t even need to\nspecify the module and class if you don’t want to:\n\n::\n\n   $ pyt che\n\nMore examples\n^^^^^^^^^^^^^\n\nTo run all the ``Happy`` tests:\n\n::\n\n   $ pyt Happy\n\nTo run all the ``newmodule`` tests:\n\n::\n\n   $ pyt newmodule\n\nTo run more than one test:\n\n::\n\n   $ pyt test1 test2 ...\n\nTo run every test ``pyt`` can find:\n\n::\n\n   $ pyt\n\nAnd the way I like to run all tests in the current directory:\n\n::\n\n   $ pyt -vb\n\nWhich can also be written:\n\n::\n\n   $ pyt --verbose --buffer\n\nFlags\n~~~~~\n\nTo see everything pyt can do\n\n::\n\n   $ pyt --help\n\n–warnings\n^^^^^^^^^\n\nThis will convert warnings into errors.\n\n::\n\n   $ pyt --warnings\n\n–rerun\n^^^^^^\n\nIf your last testrun had failing tests this will rerun only the tests\nthat failed.\n\n::\n\n   $pyt --rerun\n\nThings to be aware of\n~~~~~~~~~~~~~~~~~~~~~\n\npyt uses Python’s PEP 8 style conventions\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n``pyt`` uses `Python’s code styling\nconventions <http://www.python.org/dev/peps/pep-0008/>`__ to decide what\nis the module and class, so, given input like this:\n\n::\n\n   $ pyt foo.bar.Baz.che\n\n``pyt`` will consider ``foo.bar`` to be the module, ``Baz`` to be a\nclass (because it starts with a capital letter), and ``che`` to be a\nmethod (since it comes after the class).\n\nLikewise, ``pyt`` uses unittest conventions, so a test module should end\nwith ``_test`` (eg, ``foo.bar_test``) or start with test (eg,\n``test_foo.py``) and a TestCase class should extend\n``unittest.TestCase``, and test methods should start with ``test_`` (eg,\n``test_che``).\n\nVague input can cause pyt to run more tests than you expect\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSo if you have something like this:\n\n::\n\n   project/\n     __init__.py\n     user.py\n     foo/\n       __init__.py\n       user.py\n     tests/\n       __init__.py\n       user_test.py\n       foo/\n         __init__.py\n         user_test.py\n\nAnd you want to run tests for ``foo.user`` and you run:\n\n::\n\n   $ pyt user\n\nit will run both ``tests/user_test`` and ``tests.foo.user_test``, the\nsolution is to just be more verbose when you have to be:\n\n::\n\n   $ pyt foo.user\n\nEnvironment Variables\n^^^^^^^^^^^^^^^^^^^^^\n\nIf you are running the tests within pyt, you might notice there is an\nenvironment variable ``PYT_TEST_COUNT`` that contains the count of how\nmany tests pyt found to run.\n\nInstallation\n------------\n\nUse ``pip``:\n\n::\n\n   $ pip install pyt\n\nYou can also get it directly from the repo:\n\n::\n\n   $ pip install --upgrade git+https://github.com/Jaymon/pyt#egg=pyt\n\nIf you install pyt using Python 3 it can also be invoked using the\n``pyt3`` command:\n\n::\n\n   $ pyt3 --help\n\nLikewise, Python 2 installs a ``pyt2`` command:\n\n::\n\n   $ pyt2 --help\n\nTesting\n-------\n\nTesting in 2.7 on most systems:\n\n::\n\n   $ python -m unittest pyt_test\n\nTesting in 3.5 on MacOS:\n\n::\n\n   $ python3.5 -m unittest pyt_test\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "http://github.com/Jaymon/pyt",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyt",
            "package_url": "https://pypi.org/project/pyt/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyt/",
            "project_urls": {
               "Homepage": "http://github.com/Jaymon/pyt"
            },
            "release_url": "https://pypi.org/project/pyt/1.0.5/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "easily run python unit tests",
            "version": "1.0.5",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Bradley Odell",
            "author_email": "btodell@hotmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Environment :: Console",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
               "Natural Language :: English",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 2.6",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Topic :: Software Development :: Build Tools"
            ],
            "description": "pyz\n===\n\n*Packages all source code and dependencies into a single Python zip application.*\n\nSummary\n-------\n\nDeploying a Python application any larger than a single file is\ncumbersome - this library aims to solve that problem.\n\nPython has been able to run code from within a zip file since version\n2.6. Python 3.5 introduced the `zipapp <https://docs.python.org/3/library/zipapp.html>`__ module\nwhich aims to simplify the process of creating a zip application.\nHowever, **zipapp** isn't a complete solution to the problem - it\ndoesn't handle dependencies and it doesn't include certain extra\nfeatures that this library provides.\n\nThis library allows you to bundle all of your Python code **AND** your\ndependencies into a single Python zip application file.\n\nNote: The dependency bundling feature is not implemented yet, but it is\nin the works!\n\nFeatures\n--------\n\n1. Bundle all Python source code with fine-grained control over included files.\n2. Ability to \"unixify\" the output application by prepending a customizable\n   `shebang <https://en.wikipedia.org/wiki/Shebang_(Unix)>`__.\n3. Python interpreter version check - display a friendly notice instead\n   of a Python exception if the user runs your application using an\n   unsupported Python version.\n\nPlanned\n-------\n\n1. Automatically identify dependencies and package them accordingly.\n",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "https://github.com/BTOdell/pyz/archive/0.4.3.tar.gz",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/BTOdell/pyz",
            "keywords": "pyz zip app zipapp bundle dependencies library",
            "license": "GPLv3",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyz",
            "package_url": "https://pypi.org/project/pyz/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyz/",
            "project_urls": {
               "Download": "https://github.com/BTOdell/pyz/archive/0.4.3.tar.gz",
               "Homepage": "https://github.com/BTOdell/pyz"
            },
            "release_url": "https://pypi.org/project/pyz/0.4.3/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Packages all source code and dependencies into a single Python zip application.",
            "version": "0.4.3",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Val Neekman",
            "author_email": "info@neekware.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 3 - Alpha",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Operating System :: POSIX",
               "Programming Language :: Python",
               "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description": "AWSLI\n====================\n\n**Amazon Web Services Line Interpreter**\n\n**Author:** Val Neekman [ info@neekware.com, @vneekman ]\n\nOverview\n========\n\nA Line Interpreter for Amazon Web Services.\n\nHow to install\n==================\n\n    1. easy_install awsli\n    2. pip install awsli\n    3. git clone http://github.com/un33k/awsli\n        a. cd awsli\n        b. run python setup.py\n    4. wget https://github.com/un33k/awsli/zipball/master\n        a. unzip the downloaded file\n        b. cd into awsli-* directory\n        c. run python setup.py\n\nHow to use\n=================\n\n``Usage``\n\n``Note:``\n\nRunning the tests\n=================\n\nTo run the tests against the current environment:\n\n    python test.py\n\nChangelog\n=========\n\n0.1\n-----\n\n* Initial release\n\n\nLicense\n=======\n\nCopyright (c) 2012, Val Neekman\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without \nmodification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this \nlist of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this \nlist of conditions and the following disclaimer in the documentation and/or \nother materials provided with the distribution.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND \nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED \nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE \nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE \nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL \nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR \nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, \nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE \nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/un33k/awsli",
            "keywords": null,
            "license": "BSD",
            "maintainer": null,
            "maintainer_email": null,
            "name": "awsli",
            "package_url": "https://pypi.org/project/awsli/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/awsli/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/un33k/awsli"
            },
            "release_url": "https://pypi.org/project/awsli/0.0.1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "A Line Interpreter for Amazon Web Services",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Armin Ronacher",
            "author_email": "armin.ronacher@active-4.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Environment :: Web Environment",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
               "Topic :: Software Development :: Libraries :: Python Modules",
               "Topic :: Text Processing :: Markup :: HTML"
            ],
            "description": "jinja\n~~~~~\n\nJinja is a `sandboxed`_ template engine written in pure Python. It\nprovides a `Django`_ like non-XML syntax and compiles templates into\nexecutable python code. It's basically a combination of Django templates\nand python code.\n\nNutshell\n--------\n\nHere a small example of a Jinja template::\n\n    {% extends 'base.html' %}\n    {% block title %}Memberlist{% endblock %}\n    {% block content %}\n      <ul>\n      {% for user in users %}\n        <li><a href=\"{{ user.url|e }}\">{{ user.username|e }}</a></li>\n      {% endfor %}\n      </ul>\n    {% endblock %}\n\nPhilosophy\n----------\n\nApplication logic is for the controller but don't try to make the life\nfor the template designer too hard by giving him too few functionality.\n\nFor more informations visit the new `jinja webpage`_ and `documentation`_.\n\nNote\n----\n\nThis is the Jinja 1.0 release which is completely incompatible with the\nold \"pre 1.0\" branch. The old branch will still receive security updates\nand bugfixes but the 1.0 branch will be the only version that receives\nsupport.\n\nIf you have an application that uses Jinja 0.9 and won't be updated in\nthe near future the best idea is to ship a Jinja 0.9 checkout together\nwith the application.\n\nThe `Jinja tip`_ is installable via `easy_install` with ``easy_install\nJinja==dev``.\n\n.. _sandboxed: http://en.wikipedia.org/wiki/Sandbox_(computer_security)\n.. _Django: http://www.djangoproject.com/\n.. _jinja webpage: http://jinja.pocoo.org/\n.. _documentation: http://jinja.pocoo.org/documentation/index.html\n.. _Jinja tip: http://dev.pocoo.org/hg/jinja-main/archive/tip.tar.gz#egg=Jinja-dev\n\n\n:copyright: 2007 by Armin Ronacher.\n:license: BSD, see LICENSE for more details.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "http://jinja.pocoo.org/",
            "keywords": "python.templating.engines",
            "license": "BSD",
            "maintainer": null,
            "maintainer_email": null,
            "name": "Jinja",
            "package_url": "https://pypi.org/project/Jinja/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/Jinja/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "http://jinja.pocoo.org/"
            },
            "release_url": "https://pypi.org/project/Jinja/1.2/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "A small but fast and easy to use stand-alone template engine written in pure python.",
            "version": "1.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Hsiaoming Yang",
            "author_email": "me@lepture.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Environment :: Console",
               "Environment :: Web Environment",
               "Framework :: Django",
               "Framework :: Flask",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.5",
               "Programming Language :: Python :: 3.6",
               "Programming Language :: Python :: 3.7",
               "Programming Language :: Python :: 3.8",
               "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
               "Topic :: Internet :: WWW/HTTP :: WSGI :: Application",
               "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description": "Authlib\n=======\n\nThe ultimate Python library in building OAuth and OpenID Connect servers.\nJWS, JWK, JWA, JWT are included.\n\nUseful Links\n------------\n\n1. Homepage: https://authlib.org/\n2. Documentation: https://docs.authlib.org/\n3. Purchase Commercial License: https://authlib.org/plans\n4. Blog: https://blog.authlib.org/\n5. More Repositories: https://github.com/authlib\n6. Twitter: https://twitter.com/authlib\n7. Donate: https://www.patreon.com/lepture\n\nSpecifications\n--------------\n\n- RFC5849: The OAuth 1.0 Protocol\n- RFC6749: The OAuth 2.0 Authorization Framework\n- RFC6750: The OAuth 2.0 Authorization Framework: Bearer Token Usage\n- RFC7009: OAuth 2.0 Token Revocation\n- RFC7515: JSON Web Signature\n- RFC7516: JSON Web Encryption\n- RFC7517: JSON Web Key\n- RFC7518: JSON Web Algorithms\n- RFC7519: JSON Web Token\n- RFC7521: Assertion Framework for OAuth 2.0 Client Authentication and Authorization Grants\n- RFC7523: JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants\n- RFC7591: OAuth 2.0 Dynamic Client Registration Protocol\n- RFC7662: OAuth 2.0 Token Introspection\n- RFC8414: OAuth 2.0 Authorization Server Metadata\n- RFC8628: OAuth 2.0 Device Authorization Grant\n- OpenID Connect 1.0\n- OpenID Connect Discovery 1.0\n\nImplementations\n---------------\n\n- Requests OAuth 1 Session\n- Requests OAuth 2 Session\n- Requests Assertion Session\n- Flask OAuth 1/2 Client\n- Django OAuth 1/2 Client\n- Flask OAuth 1.0 Server\n- Flask OAuth 2.0 Server\n- Flask OpenID Connect 1.0\n- Django OAuth 1.0 Server\n- Django OAuth 2.0 Server\n- Django OpenID Connect 1.0\n\nLicense\n-------\n\nAuthlib is licensed under BSD. Please see LICENSE for licensing details.\n\nIf this license does not fit your company, consider to purchase a commercial\nlicense. Find more information on `Authlib Plans`_.\n\n.. _`Authlib Plans`: https://authlib.org/plans\n\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://authlib.org/",
            "keywords": "",
            "license": "BSD-3-Clause",
            "maintainer": "",
            "maintainer_email": "",
            "name": "Authlib",
            "package_url": "https://pypi.org/project/Authlib/",
            "platform": "any",
            "project_url": "https://pypi.org/project/Authlib/",
            "project_urls": {
               "Blog": "https://blog.authlib.org/",
               "Bug Tracker": "https://github.com/lepture/authlib/issues",
               "Commercial License": "https://authlib.org/plans",
               "Documentation": "https://docs.authlib.org/",
               "Donate": "https://lepture.com/donate",
               "Homepage": "https://authlib.org/",
               "Source Code": "https://github.com/lepture/authlib"
            },
            "release_url": "https://pypi.org/project/Authlib/0.14.3/",
            "requires_dist": [
               "cryptography",
               "requests ; extra == 'client'"
            ],
            "requires_python": "",
            "summary": "The ultimate Python library in building OAuth and OpenID Connect servers.",
            "version": "0.14.3",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Julien Bigot",
            "author_email": "julien.bigot@cea.fr",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Environment :: Console",
               "License :: OSI Approved :: MIT License"
            ],
            "description": "# zpp\n\nThis is zpp, the Z Pre-Processor.\n\nZpp transforms bash in a pre-processor for F90 source files.\nIt offers a set of functions specifically tailored to build clean Fortran90\ninterfaces by generating code for all types, kinds, and array ranks supported by\na given compiler.\n\n## Syntax\n\nZpp files are typically named `*.F90.zpp`.\n\nIn these files, the lines that start with `!$SH` are interpreted as bash lines. \nOther lines are copied as-is, except that variable substitution is operated as\nin a double-quoted string, including bash commands `${VAR}` or `$(command)`.\nIf inside a bash control block (`if`, `for`, etc.), the output generation obeys\nthe control statement.\n\nFor example, this code:\n```\n!$SH for GREETED in world universe multiverse ; do\nprint *, \"Hello ${GREETED}\"\n!$SH done\n```\n\nWould produce the following result:\n```\nprint *, \"Hello world\"\nprint *, \"Hello universe\"\nprint *, \"Hello multiverse\"\n```\n\n### Support functions\n\nPredefined bash functions, variable and code can be provided in `.zpp.sh` files\nthat can be included with `#!SH source <filename>.zpp.sh`.\n\n**Beware**: a file NEEDs to have the `.zpp.sh` extension to be included from\nzpp.\n\nZpp provides a standard library of functions tailored to build clean Fortran90\ninterfaces by generating code for all types, kinds, and array ranks supported by\na given compiler.\n\n#### zpp_str_repeat\n\nFound in `base.zpp.sh`\n\nOutputs a string multiple times.\n\nParameters:\n1. the string to Repeat\n2. the lower bound of the iterations (inclusive)\n3. the upper bound of the iterations (inclusive)\n4. the string separator\n5. the string starter\n6. the string ender\n\nRepeats string `$1` (`$3`-`$2`+1) times, separated by string `$4` inside `$5`\n`$6`.\n* If the number of repetitions is negative, the result is empty.\n* If `$1` contains the '@N' substring, it will be replaced by the iteration\n  number (from `$2` to `$3`).\n\nexample:\n```\n#!SH source base.zpp.sh\nzpp_str_repeat v@N 5 7 '...' '<<' '>>'\nzpp_str_repeat w@N 1 1 '...' '<<' '>>'\nzpp_str_repeat x@N 1 0 '...' '<<' '>>'\n```\noutput:\n```\n<<v5...v6...v7>>\n<<w1>>\n```\n\n#### zpp_str_repeat_reverse\n\nFound in `base.zpp.sh`\n\nOutputs a string multiple times in reverse order.\n\nParameters:\n1. the string to Repeat\n2. the upper bound of the iterations (inclusive)\n3. the lower bound of the iterations (inclusive)\n4. the string separator\n5. the string starter\n6. the string ender\n\nRepeats string `$1` (`$2`-`$3`+1) times, separated by string `$4` inside `$5`\n`$6`.\n* If the number of repetitions is negative, the result is empty.\n* If `$1` contains the '@N' substring, it will be replaced by the iteration\n  number (from `$2` to `$3`, i.e. upper to lower).\n\nexample:\n```\n#!SH source base.zpp.sh\nzpp_str_repeat_reverse v@N 5 7 '...' '<<' '>>'\nzpp_str_repeat_reverse w@N 1 1 '...' '<<' '>>'\nzpp_str_repeat_reverse x@N 1 0 '...' '<<' '>>'\n```\noutput:\n```\n<<v7...v6...v5>>\n<<w1>>\n```\n\n#### ZPP_FORT_TYPES\n\nFound in `fortran.zpp.sh`\n\nThe list of types supported by the fortran compiler as zpp:typeIDs.\n\nThe compiler ID should be provided in `ZPP_CONFIG` as `config.<ID>`.\nThe supported predefined IDs are: `Gnu`, `Intel`, `PGI` and `XL`.\nYou can also provide definitions for an additional compiler by defining\n`ZPP_FORT_TYPES` in a file named `config.<ID>.zpp.sh`.\n\nIf you use cmake, it will automatically generate such a file for your compiler\nand define  `ZPP_CONFIG` so you don't have to handle it.\n\n### zpp_fort_array_desc\n\nFound in `fortran.zpp.sh`\n\nOutputs an assumed shaped array descriptor of the provided size.\n\nParameters:\n1. the size of the assumed shaped array\n\nexample:\n```\n#!SH source fortran.zpp.sh\ninteger:: scalar$(zpp_fort_array_desc 0)\ninteger:: array1d$(zpp_fort_array_desc 1)\ninteger:: array2d$(zpp_fort_array_desc 2)\n```\noutput:\n```\ninteger:: scalar\ninteger:: array1d(:)\ninteger:: array2d(:,:)\n```\n\n### zpp_fort_ptype\n\nFound in `fortran.zpp.sh`\n\nOutputs the type associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\nexample:\n```\n#!SH source fortran.zpp.sh\n!$SH for T in ${ZPP_FORT_TYPES} ; do\n$(zpp_fort_ptype $1)\n!$SH done\n```\nexample output:\n```\nCHARACTER\nCOMPLEX\nCOMPLEX\nINTEGER\nINTEGER\nINTEGER\nINTEGER\nLOGICAL\nREAL\nREAL\n```\n\n### zpp_fort_kind\n\nFound in `fortran.zpp.sh`\n\nOutputs the kind associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\nexample:\n```\n#!SH source fortran.zpp.sh\n!$SH for T in ${ZPP_FORT_TYPES} ; do\n$(zpp_fort_kind $1)\n!$SH done\n```\nexample output:\n```\n1\n4\n8\n1\n2\n4\n8\n1\n4\n8\n```\n\n### zpp_fort_type\n\nFound in `fortran.zpp.sh`\n\nOutputs the full type (with kind included) associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n2. additional attributes for the type\n\nexample:\n```\n#!SH source fortran.zpp.sh\n!$SH for T in ${MY_CHAR_TYPES} ; do\n$(zpp_fort_type $1)\n$(zpp_fort_type $1 \"len=5\")\n!$SH done\n```\nexample output:\n```\nCHARACTER(KIND=1)\nCHARACTER(KIND=1,len=5)\n```\n\n### zpp_fort_sizeof\n\nFound in `fortran.zpp.sh`\n\nOutputs the size in bits associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\n### zpp_fort_io_format\n\nFound in `fortran.zpp.sh`\n\nOutputs an IO descriptor suitable for a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\n### ZPP_HDF5F_TYPES\n\nFound in `hdf5_fortran.zpp.sh`\n\nA list of zpp:typeIDs supported by HDF5.\n\n### hdf5_constant\n\nFound in `hdf5_fortran.zpp.sh`\n\nOutputs the HDF5 type constant associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\nexample:\n```\n#!SH source hdf5_fortran.zpp.sh\n!$SH for T in ${ZPP_HDF5F_TYPES} ; do\n$(hdf5_constant $1)\n!$SH done\n```\nexample output:\n```\nH5T_NATIVE_INTEGER\nH5T_NATIVE_REAL\nH5T_NATIVE_REAL\nH5T_NATIVE_CHARACTER\n```\n\n\n## Command-line interface\n\nZpp basic usage is as follow:\n```\nUsage: zpp [Options...] <source> [<destination>]\n  use `zpp -h' for more info\n\nPreprocesses BASH in-line commands in a source file\n\nOptions:\n  --version        show program's version number and exit\n  -h, --help       show this help message and exit\n  -I DIR           Add DIR to search list for source directives\n  -o FILE          Place the preprocessed code in file FILE.\n  -D OPTION=VALUE  Set the value of OPTION to VALUE\n```\n\n## CMake interface\n\nSupport is provided for using zpp from CMake based projects, but you can use\nit from plain Makefiles too.\n\nThere are two ways you can use zpp from your CMake project:\n* with `add_subdirectory`: include zpp in your project and use it directly from\n  there,\n* with `find_package`: install zpp and use it as an external dependency of your\n  project.\n\n#### CMake subdirectory usage\n\nUsing zpp with `add_subdirectory` is very simple.\nJust copy the `zpp` directory in your source and point to it with\n`add_subdirectory(zpp)`.\nThe `zpp_preprocess` then becomes available to process zpp files.\n\nThis is demonstrated in `example/cmake_subdirectory`.\n\n#### CMake find usage\n\nUsing zpp with `find_package` is no more complex.\nIf zpp is installed, just add a `find_package(zpp REQUIRED)`.\nThe `zpp_preprocess` then becomes available to process zpp files.\n\nThis is demonstrated in `example/cmake_find`.\n\n## GMake usage\n\nUsing zpp from a GNU Makefile is slightly less powerful than from CMake.\nThe types and kinds supported by the Fortran compiler will not be automatically\ndetected.\nPredefined lists of supported types for well known compilers are provided\ninstead.\n\nTo use zpp from a Makefile, include the `share/zpp/zpp.mk` file (either from an\ninstalled location or from a subdirectory in your project).\nYou can then set the `zpp_COMPILER_ID` variable to the compiler you use and\n`.F90` files will be automatically generated from their `.F90.zpp` equivalent.\nThe `zppFLAGS` variable is automatically passed to zpp similarly to `CFLAGS` or\n`CXXFLAGS` for `cc` and `cxx`.\n\nThis is demonstrated in `example/cmake_makefile`.\n\n## Installation\n\nZpp can be installed using the usual python way with `setup.py`.\n```\n./setup.py --help\n```\n\nThe cmake approach is deprecated.\n\n## FAQ\n\nQ. Isn't zpp redundant with assumed type parameters?\n\nA.\nThe assumed type parameters functionality allows to implement part of what can\nbe done with zpp (support for all kinds of a type). However as of 2013 it was\nnot correctly supported on most compilers installed on the supercomputers.\n\nIn addition, many things can be done with zpp but not with assumed type\nparameters, such as support for variable array rank or small variations of the\ncode depending on the kind.\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "bash Fortran pre-processor",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "zpp",
            "package_url": "https://pypi.org/project/zpp/",
            "platform": "",
            "project_url": "https://pypi.org/project/zpp/",
            "project_urls": {
               "Source Code": "https://github.com/pdidev/zpp/"
            },
            "release_url": "https://pypi.org/project/zpp/1.0.4/",
            "requires_dist": [
               "setuptools"
            ],
            "requires_python": "",
            "summary": "a Bash Pre-Processor for Fortran. ZPP is useful in order to build clean Fortran90 interfaces. It allows to generate Fortran code for all types, kinds, and array ranks supported by the compiler.",
            "version": "1.0.4",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Dheepak Krishnamurthy",
            "author_email": "kdheepak89@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# zip [![](https://travis-ci.org/kdheepak/zip.svg?branch=master)](https://travis-ci.org/kdheepak/zip/branches)\n\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/kdheepak/zip",
            "keywords": "",
            "license": "Revised BSD License",
            "maintainer": "",
            "maintainer_email": "",
            "name": "zip",
            "package_url": "https://pypi.org/project/zip/",
            "platform": "",
            "project_url": "https://pypi.org/project/zip/",
            "project_urls": {
               "Homepage": "https://github.com/kdheepak/zip"
            },
            "release_url": "https://pypi.org/project/zip/0.0.2/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Intel Corporation",
            "author_email": "scripting@intel.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "Intended Audience :: Education",
               "Intended Audience :: Other Audience",
               "Intended Audience :: Science/Research",
               "Intended Audience :: System Administrators",
               "License :: Other/Proprietary License",
               "Operating System :: MacOS",
               "Operating System :: Microsoft :: Windows",
               "Operating System :: POSIX",
               "Operating System :: Unix",
               "Topic :: Software Development :: Libraries"
            ],
            "description": "Intel(R) Performance Primitives provides developers with high-quality, production-ready, low-level building blocks for image processing, signal processing, and data processing (data compression and decompression, and cryptography) applications.\n\nOne of many Intel(R) accelerated Python packages and performance library runtimes available on [PyPI](https://software.intel.com/en-us/articles/installing-the-intel-distribution-for-python-and-intel-performance-libraries-with-pip-and), and as part of [Intel(R) Distribution for Python](https://software.intel.com/en-us/distribution-for-python).\n\nFor latest release updates and security notifications, please [subscribe](https://software.intel.com/en-us/forums/intel-distribution-for-python) to the Intel(R) Distribution for Python Community forum.\n\nFree to use and redistribute pursuant to the [Intel Simplified Software License](https://software.intel.com/en-us/license/intel-simplified-software-license).\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://software.intel.com/en-us/articles/empowering-science-with-high-performance-python",
            "keywords": "",
            "license": "Proprietary - Intel",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ipp",
            "package_url": "https://pypi.org/project/ipp/",
            "platform": "",
            "project_url": "https://pypi.org/project/ipp/",
            "project_urls": {
               "Homepage": "https://software.intel.com/en-us/articles/empowering-science-with-high-performance-python"
            },
            "release_url": "https://pypi.org/project/ipp/2019.4.243/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Intel(R) Performance Primitives",
            "version": "2019.4.243",
            "yanked": false,
            "yanked_reason": null
         }
      ],
      "zipp": [
         {
            "author": "Gabriel Alves",
            "author_email": "gabriel.alves@pickcells.bio",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# sx\n#### Framework to manage gRPC-based microservices application",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "https://github.com/itsmealves/sx/releases/download/0.6.0/sx-0.6.0.tar.gz",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/itsmealves/sx",
            "keywords": "sx microservices rpc grpc Framework",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "sx",
            "package_url": "https://pypi.org/project/sx/",
            "platform": "",
            "project_url": "https://pypi.org/project/sx/",
            "project_urls": {
               "Download": "https://github.com/itsmealves/sx/releases/download/0.6.0/sx-0.6.0.tar.gz",
               "Homepage": "https://github.com/itsmealves/sx"
            },
            "release_url": "https://pypi.org/project/sx/0.6.0/",
            "requires_dist": null,
            "requires_python": ">=3.5",
            "summary": "Framework to manage gRPC-based microservices application",
            "version": "0.6.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "chrysn",
            "author_email": "chrysn@fsfe.org",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 3 - Alpha",
               "Intended Audience :: Education",
               "Intended Audience :: Science/Research",
               "License :: OSI Approved :: GNU General Public License (GPL)"
            ],
            "description": "UNKNOWN",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "UNKNOWN",
            "keywords": null,
            "license": "GPL",
            "maintainer": null,
            "maintainer_email": null,
            "name": "si",
            "package_url": "https://pypi.org/project/si/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/si/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "UNKNOWN"
            },
            "release_url": "https://pypi.org/project/si/0.1.1-1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Module to represent SI units",
            "version": "0.1.1-1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "leesoar",
            "author_email": "secure@tom.com",
            "bugtrack_url": null,
            "classifiers": [
               "License :: OSI Approved :: MIT License",
               "Programming Language :: Python :: 3.5",
               "Programming Language :: Python :: 3.6",
               "Programming Language :: Python :: 3.7",
               "Programming Language :: Python :: Implementation :: CPython",
               "Programming Language :: Python :: Implementation :: PyPy"
            ],
            "description": "\nDevelop soon\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://leesoar.com",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ida",
            "package_url": "https://pypi.org/project/ida/",
            "platform": "",
            "project_url": "https://pypi.org/project/ida/",
            "project_urls": {
               "Homepage": "https://leesoar.com"
            },
            "release_url": "https://pypi.org/project/ida/0.0.1/",
            "requires_dist": null,
            "requires_python": ">=3.3.0",
            "summary": "Develop soon",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Xavier Bruhiere",
            "author_email": "xavier.bruhiere@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 2 - Pre-Alpha",
               "Intended Audience :: Science/Research",
               "License :: OSI Approved :: Apache Software License",
               "Natural Language :: English",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2.7",
               "Topic :: Software Development",
               "Topic :: System :: Shells"
            ],
            "description": "python library DNA\n==================\n\n[![Coverage Status](https://coveralls.io/repos/hivetech/dna/badge.png)](https://coveralls.io/r/hivetech/dna)\n\n> Generic python utilities\n\nInstallation\n------------\n\n```console\npip install dna\n```\n\nExample\n-----\n\n```python\nimport dna.utils as utils\nimport dna.logger as logger\n\nlog_setup = logger.setup(level='info', filename='app.log')\nlog = logger.logger(__name__)\nwith log_setup.applicationbound():\n\n    log.info('hello', where='world')\n\n    useless_id = utils.generate_unique_id()\n    useless_name = utils.generate_random_name()\n\n    if utils.docker_check() and utils.is_running('ipyhon'):\n\n        print utils.Version('0.4.1')\n\n        module = utils.dynamic_import('dna.settings', 'LOG')\n        print utils.emphasis(module, align=False)\n\n        print utils.self_ip()\n```",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/hivetech/dna",
            "keywords": null,
            "license": "Apache 2.0",
            "maintainer": null,
            "maintainer_email": null,
            "name": "dna",
            "package_url": "https://pypi.org/project/dna/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/dna/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/hivetech/dna"
            },
            "release_url": "https://pypi.org/project/dna/0.0.7/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Generic python utilities",
            "version": "0.0.7",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Christopher Brown",
            "author_email": "io@henrian.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 2 - Pre-Alpha",
               "License :: OSI Approved :: MIT License",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.6",
               "Programming Language :: Python :: 2.7",
               "Topic :: Software Development :: Libraries :: Python Modules",
               "Topic :: System :: Archiving :: Packaging",
               "Topic :: System :: Filesystems"
            ],
            "description": "Python (package) installation\n-----------------------------\n\nGetting started from `PyPI <https://pypi.python.org/pypi/pi/>`__:\n\n::\n\n    easy_install pi\n\n`Whence easy\\_install? <#setuptools>`__\n\nCommands\n--------\n\n-  Uninstall package named \"pip\":\n\n   ::\n\n       pi uninstall pip\n\n-  Install package named \"filesequence\":\n\n   ::\n\n       pi install filesequence\n\n-  List paths that Python searches for imported modules:\n\n   ::\n\n       pi paths\n\n-  List installed packages:\n\n   ::\n\n       pi list\n\nTesting\n-------\n\nContinuous integration:\n\n|Travis CI Build Status|\n\nOr run tests locally:\n\n::\n\n    nosetests --with-doctest\n\nRelated\n~~~~~~~\n\n-  http://guide.python-distribute.org/creation.html\n-  `distribute/pkg\\_resources\n   docs <http://pythonhosted.org/distribute/pkg_resources.html>`__\n-  standard library\n   ```site`` <http://docs.python.org/2/library/site.html>`__\n-  standard library `environment\n   variables <http://docs.python.org/2/using/cmdline.html#environment-variables>`__\n\nSetuptools\n~~~~~~~~~~\n\n``pi`` does not yet completely replace\n`setuptools <https://pypi.python.org/pypi/setuptools>`__. You may need\nto install it first:\n\n+----------+-----------------------------------------+\n| Distro   | Package manager command                 |\n+==========+=========================================+\n| Ubuntu   | ``apt-get install python-setuptools``   |\n+----------+-----------------------------------------+\n| Mac      | built-in                                |\n+----------+-----------------------------------------+\n| Arch     | ``pacman -S python-setuptools``         |\n+----------+-----------------------------------------+\n| CentOS   | ``yum install python-setuptools``       |\n+----------+-----------------------------------------+\n\nLicense\n-------\n\nCopyright (c) 2013 Christopher Brown. `MIT\nLicensed <https://raw.github.com/chbrown/pi/master/LICENSE>`__.\n\n.. |Travis CI Build Status| image:: https://travis-ci.org/chbrown/pi.png?branch=master\n   :target: https://travis-ci.org/chbrown/pi",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/chbrown/pi",
            "keywords": null,
            "license": "Copyright (c) 2013 Christopher Brown\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.",
            "maintainer": null,
            "maintainer_email": null,
            "name": "pi",
            "package_url": "https://pypi.org/project/pi/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/pi/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/chbrown/pi"
            },
            "release_url": "https://pypi.org/project/pi/0.1.2/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Simpler python package installation",
            "version": "0.1.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ip",
            "package_url": "https://pypi.org/project/ip/",
            "platform": "",
            "project_url": "https://pypi.org/project/ip/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/ip/0.0.1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Vitalii Vanovschi",
            "author_email": "support@parallelpython.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Natural Language :: English",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Topic :: Software Development",
               "Topic :: System :: Distributed Computing"
            ],
            "description": "Parallel Python module (PP) provides an easy and efficient way to create parallel-enabled applications for SMP computers and clusters. PP module features cross-platform portability and dynamic load balancing. Thus application written with PP will parallelize efficiently even on heterogeneous and multi-platform clusters (including clusters running other application with variable CPU loads). Visit http://www.parallelpython.com for further information.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "http://www.parallelpython.com/downloads/pp/pp-1.6.5.zip",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "http://www.parallelpython.com",
            "keywords": null,
            "license": "BSD-like",
            "maintainer": null,
            "maintainer_email": null,
            "name": "pp",
            "package_url": "https://pypi.org/project/pp/",
            "platform": "Windows,Linux,Unix",
            "project_url": "https://pypi.org/project/pp/",
            "project_urls": {
               "Download": "http://www.parallelpython.com/downloads/pp/pp-1.6.5.zip",
               "Homepage": "http://www.parallelpython.com"
            },
            "release_url": "https://pypi.org/project/pp/1.6.5/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Parallel and distributed programming for Python",
            "version": "1.6.5",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Marcus Donnelly",
            "author_email": "marcus.k.donnelly@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "Intended Audience :: Science/Research",
               "License :: OSI Approved :: BSD License",
               "Programming Language :: Python :: 3",
               "Topic :: Scientific/Engineering"
            ],
            "description": "",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "Oceanography,Utilities",
            "license": "BSD",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ocutils",
            "package_url": "https://pypi.org/project/ocutils/",
            "platform": "",
            "project_url": "https://pypi.org/project/ocutils/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/ocutils/1.1.1/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Utility functions for oceanography related work",
            "version": "1.1.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Kiana Alessandra V. Villaera",
            "author_email": "kiana.villaera@senti.com.ph",
            "bugtrack_url": null,
            "classifiers": [
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 3"
            ],
            "description": "Contains everything you might need to perform essential data center functions\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/K-Winkles/dcutils",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dcutils",
            "package_url": "https://pypi.org/project/dcutils/",
            "platform": "",
            "project_url": "https://pypi.org/project/dcutils/",
            "project_urls": {
               "Homepage": "https://github.com/K-Winkles/dcutils"
            },
            "release_url": "https://pypi.org/project/dcutils/0.6/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "A simple package for data center utilities",
            "version": "0.6",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Mike Kazantsev",
            "author_email": "mk.fraggod@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Intended Audience :: Developers",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3.5",
               "Topic :: Software Development",
               "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description": "pretty-yaml (or pyaml)\n======================\n\nPyYAML-based python module to produce pretty and readable YAML-serialized data.\n\nThis module is for serialization only, see `ruamel.yaml`_ module for literate\nYAML parsing (keeping track of comments, spacing, line/column numbers of values, etc).\n\n[note: to dump stuff parsed by ruamel.yaml with this module, use only ``YAML(typ='safe')`` there]\n\n.. contents::\n  :backlinks: none\n\n\nWarning\n-------\n\nPrime goal of this module is to produce human-readable output that can be easily\nmanipulated and re-used, but maybe with some occasional caveats.\n\nOne good example of such \"caveat\" is that e.g. ``{'foo': '123'}`` will serialize\nto ``foo: 123``, which for PyYAML would be a bug, as 123 will then be read back\nas an integer from that, but here it's a feature.\n\nSo please do not rely on the thing to produce output that can always be\ndeserialized exactly to what was exported, at least - use PyYAML (e.g. with\noptions from the next section) for that.\n\n\nWhat this module does and why\n-----------------------------\n\nYAML is generally nice and easy format to read *if* it was written by humans.\n\nPyYAML can a do fairly decent job of making stuff readable, and the best\ncombination of parameters for such output that I've seen so far is probably this one::\n\n  >>> m = [123, 45.67, {1: None, 2: False}, u'some text']\n  >>> data = dict(a=u'asldnsa\\nasldpáknsa\\n', b=u'whatever text', ma=m, mb=m)\n  >>> yaml.safe_dump(data, sys.stdout, allow_unicode=True, default_flow_style=False)\n  a: 'asldnsa\n\n    asldpáknsa\n\n    '\n  b: whatever text\n  ma: &id001\n  - 123\n  - 45.67\n  - 1: null\n    2: false\n  - some text\n  mb: *id001\n\npyaml tries to improve on that a bit, with the following tweaks:\n\n* Most human-friendly representation options in PyYAML (that I know of) get\n  picked as defaults.\n\n* Does not dump \"null\" values, if possible, replacing these with just empty\n  strings, which have the same meaning but reduce visual clutter and are easier\n  to edit.\n\n* Dicts, sets, OrderedDicts, defaultdicts, namedtuples, etc are representable\n  and get sorted on output (OrderedDicts and namedtuples keep their ordering),\n  so that output would be as diff-friendly as possible, and not arbitrarily\n  depend on python internals.\n\n  It appears that at least recent PyYAML versions also do such sorting for\n  python dicts.\n\n* List items get indented, as they should be.\n\n* bytestrings that can't be auto-converted to unicode raise error, as yaml has\n  no \"binary bytes\" (i.e. unix strings) type.\n\n* Attempt is made to pick more readable string representation styles, depending\n  on the value, e.g.::\n\n    >>> yaml.safe_dump(cert, sys.stdout)\n    cert: '-----BEGIN CERTIFICATE-----\n\n      MIIH3jCCBcagAwIBAgIJAJi7AjQ4Z87OMA0GCSqGSIb3DQEBCwUAMIHBMRcwFQYD\n\n      VQQKFA52YWxlcm9uLm5vX2lzcDEeMBwGA1UECxMVQ2VydGlmaWNhdGUgQXV0aG9y\n    ...\n\n    >>> pyaml.p(cert):\n    cert: |\n      -----BEGIN CERTIFICATE-----\n      MIIH3jCCBcagAwIBAgIJAJi7AjQ4Z87OMA0GCSqGSIb3DQEBCwUAMIHBMRcwFQYD\n      VQQKFA52YWxlcm9uLm5vX2lzcDEeMBwGA1UECxMVQ2VydGlmaWNhdGUgQXV0aG9y\n    ...\n\n* \"force_embed\" option to avoid having &id stuff scattered all over the output\n  (which might be beneficial in some cases, hence the option).\n\n* \"&id\" anchors, if used, get labels from the keys they get attached to,\n  not just use meaningless enumerators.\n\n* \"string_val_style\" option to only apply to strings that are values, not keys,\n  i.e::\n\n    >>> pyaml.p(data, string_val_style='\"')\n    key: \"value\\nasldpáknsa\\n\"\n    >>> yaml.safe_dump(data, sys.stdout, allow_unicode=True, default_style='\"')\n    \"key\": \"value\\nasldpáknsa\\n\"\n\n* \"sort_dicts=False\" option to leave dict item ordering to python, and not\n  force-sort them in yaml output, which can be important for python 3.6+ where\n  they retain ordering info.\n\n* Has an option to add vertical spacing (empty lines) between keys on different\n  depths, to make output much more seekable.\n\nResult for the (rather meaningless) example above (without any additional\ntweaks)::\n\n  >>> pyaml.p(data)\n  a: |\n    asldnsa\n    asldpáknsa\n  b: 'whatever text'\n  ma: &ma\n    - 123\n    - 45.67\n    - 1:\n      2: false\n    - 'some text'\n  mb: *ma\n\n----------\n\nExtended example::\n\n  >>> pyaml.dump(conf, sys.stdout, vspacing=[2, 1]):\n  destination:\n\n    encoding:\n      xz:\n        enabled: true\n        min_size: 5120\n        options:\n        path_filter:\n          - \\.(gz|bz2|t[gb]z2?|xz|lzma|7z|zip|rar)$\n          - \\.(rpm|deb|iso)$\n          - \\.(jpe?g|gif|png|mov|avi|ogg|mkv|webm|mp[34g]|flv|flac|ape|pdf|djvu)$\n          - \\.(sqlite3?|fossil|fsl)$\n          - \\.git/objects/[0-9a-f]+/[0-9a-f]+$\n\n    result:\n      append_to_file:\n      append_to_lafs_dir:\n      print_to_stdout: true\n\n    url: http://localhost:3456/uri\n\n\n  filter:\n    - /(CVS|RCS|SCCS|_darcs|\\{arch\\})/$\n    - /\\.(git|hg|bzr|svn|cvs)(/|ignore|attributes|tags)?$\n    - /=(RELEASE-ID|meta-update|update)$\n\n\n  http:\n\n    ca_certs_files: /etc/ssl/certs/ca-certificates.crt\n\n    debug_requests: false\n\n    request_pool_options:\n      cachedConnectionTimeout: 600\n      maxPersistentPerHost: 10\n      retryAutomatically: true\n\n\n  logging:\n\n    formatters:\n      basic:\n        datefmt: '%Y-%m-%d %H:%M:%S'\n        format: '%(asctime)s :: %(name)s :: %(levelname)s: %(message)s'\n\n    handlers:\n      console:\n        class: logging.StreamHandler\n        formatter: basic\n        level: custom\n        stream: ext://sys.stderr\n\n    loggers:\n      twisted:\n        handlers:\n          - console\n        level: 0\n\n    root:\n      handlers:\n        - console\n      level: custom\n\nNote that unless there are many moderately wide and deep trees of data, which\nare expected to be read and edited by people, it might be preferrable to\ndirectly use PyYAML regardless, as it won't introduce another (rather pointless\nin that case) dependency and a point of failure.\n\n\nSome Tricks\n-----------\n\n* Pretty-print any yaml or json (yaml subset) file from the shell::\n\n    % python -m pyaml /path/to/some/file.yaml\n    % curl -s https://www.githubstatus.com/api/v2/summary.json | python -m pyaml\n\n* Process and replace json/yaml file in-place::\n\n    % python -m pyaml -r file-with-json.data\n\n* Easier \"debug printf\" for more complex data (all funcs below are aliases to\n  same thing)::\n\n    pyaml.p(stuff)\n    pyaml.pprint(my_data)\n    pyaml.pprint('----- HOW DOES THAT BREAKS!?!?', input_data, some_var, more_stuff)\n    pyaml.print(data, file=sys.stderr) # needs \"from __future__ import print_function\"\n\n* Force all string values to a certain style (see info on these in\n  `PyYAML docs`_)::\n\n    pyaml.dump(many_weird_strings, string_val_style='|')\n    pyaml.dump(multiline_words, string_val_style='>')\n    pyaml.dump(no_want_quotes, string_val_style='plain')\n\n  Using ``pyaml.add_representer()`` (note \\*p\\*yaml) as suggested in\n  `this SO thread`_ (or `github-issue-7`_) should also work.\n\n* Control indent and width of the results::\n\n    pyaml.dump(wide_and_deep, indent=4, width=120)\n\n  These are actually keywords for PyYAML Emitter (passed to it from Dumper),\n  see more info on these in `PyYAML docs`_.\n\n* Dump multiple yaml documents into a file: ``pyaml.dump_all([data1, data2, data3], dst_file)``\n\n  explicit_start=True is implied, unless explicit_start=False is passed.\n\n.. _PyYAML docs: http://pyyaml.org/wiki/PyYAMLDocumentation#Scalars\n.. _this SO thread: http://stackoverflow.com/a/7445560\n.. _github-issue-7: https://github.com/mk-fg/pretty-yaml/issues/7\n\n\nInstallation\n------------\n\nIt's a regular package for Python (3.x or 2.x).\n\nModule uses PyYAML_ for processing of the actual YAML files and should pull it\nin as a dependency.\n\nDependency on unidecode_ module is optional and should only be necessary if\nsame-id objects or recursion is used within serialized data.\n\nBe sure to use python3/python2, pip3/pip2, easy_install-... binaries below,\nbased on which python version you want to install the module for, if you have\nseveral on the system (as is norm these days for py2-py3 transition).\n\nUsing pip_ is the best way::\n\n  % pip install pyaml\n\n(add --user option to install into $HOME for current user only)\n\nOr, if you don't have \"pip\" command::\n\n  % python -m ensurepip\n  % python -m pip install --upgrade pip\n  % python -m pip install pyaml\n\n(same suggestion wrt \"install --user\" as above)\n\nOn a very old systems, one of these might work::\n\n  % curl https://bootstrap.pypa.io/get-pip.py | python\n  % pip install pyaml\n\n  % easy_install pyaml\n\n  % git clone --depth=1 https://github.com/mk-fg/pretty-yaml\n  % cd pretty-yaml\n  % python setup.py install\n\n(all of install-commands here also have --user option,\nsee also `pip docs \"installing\" section`_)\n\nCurrent-git version can be installed like this::\n\n  % pip install 'git+https://github.com/mk-fg/pretty-yaml#egg=pyaml'\n\nNote that to install stuff to system-wide PATH and site-packages (without\n--user), elevated privileges (i.e. root and su/sudo) are often required.\n\nUse \"...install --user\", `~/.pydistutils.cfg`_ or virtualenv_ to do unprivileged\ninstalls into custom paths.\n\nMore info on python packaging can be found at `packaging.python.org`_.\n\n.. _ruamel.yaml: https://bitbucket.org/ruamel/yaml/\n.. _PyYAML: http://pyyaml.org/\n.. _unidecode: http://pypi.python.org/pypi/Unidecode\n.. _pip: http://pip-installer.org/\n.. _pip docs \"installing\" section: http://www.pip-installer.org/en/latest/installing.html\n.. _~/.pydistutils.cfg: http://docs.python.org/install/index.html#distutils-configuration-files\n.. _virtualenv: http://pypi.python.org/pypi/virtualenv\n.. _packaging.python.org: https://packaging.python.org/installing/\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/mk-fg/pretty-yaml",
            "keywords": "yaml serialization pretty print format human readable readability",
            "license": "WTFPL",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyaml",
            "package_url": "https://pypi.org/project/pyaml/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyaml/",
            "project_urls": {
               "Homepage": "https://github.com/mk-fg/pretty-yaml"
            },
            "release_url": "https://pypi.org/project/pyaml/20.4.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "PyYAML-based module to produce pretty and readable YAML-serialized data",
            "version": "20.4.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "haogege",
            "author_email": "1394168335@qq.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# pyyml\nUse python in yaml\n## 基本使用\n在python中使用：\n```python\nfrom pyyml import load\n\nwith open('conf.yml') as f:\n    raw_conf = f.read()\nconfig = load(raw_conf)\nprint(config)\n```\n在yaml中 `${...}` 中的内容将会被python执行：\n\nyaml内容\n```yaml\nsum: ${1 + 1}\n```\n实际解析内容\n```python\n{'sum': 2}\n```\n通过在文件开头第一行注释来导入所需的包：\n\n```yaml\n# libs:['os', 'os.path:path', 'this']\n```\n通过 [包名]:[别名] 取别名导入包\n\n`'os.path:path' 等同于 python 中的 from os import path`\n\n例如yaml文件内容\n```yaml\n# libs:['os', 'os.path:path', 'this']\nos_name: ${os.name}\nbase_dir: ${path.abspath(path.dirname(__file__))}\n```\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/q1394168335/pyyml",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyyml",
            "package_url": "https://pypi.org/project/pyyml/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyyml/",
            "project_urls": {
               "Homepage": "https://github.com/q1394168335/pyyml"
            },
            "release_url": "https://pypi.org/project/pyyml/0.0.2/",
            "requires_dist": [
               "pyyaml (>=3.13)"
            ],
            "requires_python": "",
            "summary": "Use python in yaml",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Michael Foord",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "rs",
            "package_url": "https://pypi.org/project/rs/",
            "platform": "",
            "project_url": "https://pypi.org/project/rs/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/rs/0.0/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "",
            "version": "0.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Ramses",
            "author_email": "hello@ramses.tech",
            "bugtrack_url": null,
            "classifiers": [
               "Framework :: Pyramid",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.4",
               "Programming Language :: Python :: 3.5",
               "Topic :: Internet :: WWW/HTTP",
               "Topic :: Internet :: WWW/HTTP :: WSGI :: Application"
            ],
            "description": "# `Ra`\n[![Build Status](https://travis-ci.org/ramses-tech/ra.svg?branch=master)](https://travis-ci.org/ramses-tech/ra)\n[![Documentation](https://readthedocs.org/projects/ra/badge/?version=stable)](http://ra.readthedocs.org)\n\nRa is a test suite generator and helper library for testing APIs described\nin [RAML](http://raml.org/).\n\nOut of the box, Ra provides a basic, automated test suite to test the routes\ndeclared in the RAML document. It provides test helpers for augmenting these\nwith custom tests to test application-specific logic, side effects, etc.\n\nRa is primarily designed to provide testing support for\n[ramses](http://github.com/ramses-tech/ramses) and\n[nefertari](http://github.com/ramses-tech/nefertari) applications, but can\nbe used with any WSGI-conformant, RAML-described API.\n\nIt currently depends on pytest but may be adapted for other test frameworks\nin the future. It works best using WebTest but doesn't require it.\n\n## Name\n\nRa was the god of the sun, the most important god in ancient Egypt.\n\n\n## Try it (dev)\n\nRun the test suite:\n\n```bash\n    $ pip install -r requirements.txt\n    $ py.test\n```\n\nCheck out the example:\n\n```bash\n    $ cd examples/ramses-test\n    $ pip install -r requirements.txt\n    $ py.test\n```\n\nThe example RAML at `examples/ramses-test/api.raml` and the test file\n`examples/ramses-test/tests/test_api.py` should be helpful to reference.\n\nSee the docs in `docs/`, and the `api.raml` and `tests/test_api.py` in\n`tests/apps/ramses_test`",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/ramses-tech/ra",
            "keywords": "web raml",
            "license": "UNKNOWN",
            "maintainer": null,
            "maintainer_email": null,
            "name": "ra",
            "package_url": "https://pypi.org/project/ra/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/ra/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/ramses-tech/ra"
            },
            "release_url": "https://pypi.org/project/ra/0.2.0/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Test RAML API definition",
            "version": "0.2.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Shoumik Palkar",
            "author_email": "shoumik@cs.stanford.edu",
            "bugtrack_url": null,
            "classifiers": [
               "License :: OSI Approved :: BSD License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 3"
            ],
            "description": "## split annotations\n\nThis package contains the Python implementation of [split annotations](), a system for optimizing applications\nthat combine many data-intensive library functions. See some useful links below.\n\n* [Documentation for this package](https://www.weld.rs/split-annotations/docs/)\n* [GitHub repository](https://www.github.com/weld-project/split-annotations)\n* [SOSP 2019 Paper describing the system](https://shoumik.xyz/static/papers/mozart-sosp19final.pdf)\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://www.github.com/weld-project/split-annotations",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "sa",
            "package_url": "https://pypi.org/project/sa/",
            "platform": "",
            "project_url": "https://pypi.org/project/sa/",
            "project_urls": {
               "Homepage": "https://www.github.com/weld-project/split-annotations"
            },
            "release_url": "https://pypi.org/project/sa/0.0.4/",
            "requires_dist": [
               "numpy",
               "pandas",
               "scipy",
               "sharedmem"
            ],
            "requires_python": ">=3.6",
            "summary": "Python split annotations package",
            "version": "0.0.4",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Mitch Garnaat",
            "author_email": "mitch@garnaat.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.6",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.3",
               "Programming Language :: Python :: 3.4",
               "Topic :: Internet"
            ],
            "description": "####\nboto\n####\nboto 2.49.0\n\nReleased: 11-July-2018\n\n.. image:: https://travis-ci.org/boto/boto.svg?branch=develop\n        :target: https://travis-ci.org/boto/boto\n\n.. image:: https://pypip.in/d/boto/badge.svg\n        :target: https://pypi.python.org/pypi/boto/\n\n******\nBoto 3\n******\n\n`Boto3 <https://github.com/boto/boto3>`__, the next version of Boto, is now\nstable and recommended for general use.  It can be used side-by-side with Boto\nin the same project, so it is easy to start using Boto3 in your existing\nprojects as well as new projects. Going forward, API updates and all new\nfeature work will be focused on Boto3.\n\nTo assist users who still depend on Boto and cannot immediately switch over, we\nwill be triaging and addressing critical issues and PRs in Boto in the short\nterm. As more users make the switch to Boto3, we expect to reduce our\nmaintenance involvement over time. If we decide on a cutoff date or any\nsignificant changes to our maintenance plan, we will make pre-announcements\nwell ahead of schedule to allow ample time for our users to adapt/migrate.\n\n\n************\nIntroduction\n************\n\nBoto is a Python package that provides interfaces to Amazon Web Services.\nCurrently, all features work with Python 2.6 and 2.7. Work is under way to\nsupport Python 3.3+ in the same codebase. Modules are being ported one at\na time with the help of the open source community, so please check below\nfor compatibility with Python 3.3+.\n\nTo port a module to Python 3.3+, please view our `Contributing Guidelines`_\nand the `Porting Guide`_. If you would like, you can open an issue to let\nothers know about your work in progress. Tests **must** pass on Python\n2.6, 2.7, 3.3, and 3.4 for pull requests to be accepted.\n\n\n********\nServices\n********\n\nAt the moment, boto supports:\n\n* Compute\n\n  * Amazon Elastic Compute Cloud (EC2) (Python 3)\n  * Amazon Elastic Map Reduce (EMR) (Python 3)\n  * AutoScaling (Python 3)\n  * Amazon Kinesis (Python 3)\n  * AWS Lambda (Python 3)\n  * Amazon EC2 Container Service (Python 3)\n\n* Content Delivery\n\n  * Amazon CloudFront (Python 3)\n\n* Database\n\n  * Amazon Relational Data Service (RDS)\n  * Amazon DynamoDB (Python 3)\n  * Amazon SimpleDB (Python 3)\n  * Amazon ElastiCache (Python 3)\n  * Amazon Redshift (Python 3)\n\n* Deployment and Management\n\n  * AWS Elastic Beanstalk (Python 3)\n  * AWS CloudFormation (Python 3)\n  * AWS Data Pipeline (Python 3)\n  * AWS Opsworks (Python 3)\n  * AWS CloudTrail (Python 3)\n  * AWS CodeDeploy (Python 3)\n\n* Administration & Security\n\n  * AWS Identity and Access Management (IAM) (Python 3)\n  * AWS Key Management Service (KMS) (Python 3)\n  * AWS Config (Python 3)\n  * AWS CloudHSM (Python 3)\n\n* Application Services\n\n  * Amazon CloudSearch (Python 3)\n  * Amazon CloudSearch Domain (Python 3)\n  * Amazon Elastic Transcoder (Python 3)\n  * Amazon Simple Workflow Service (SWF) (Python 3)\n  * Amazon Simple Queue Service (SQS) (Python 3)\n  * Amazon Simple Notification Server (SNS) (Python 3)\n  * Amazon Simple Email Service (SES) (Python 3)\n  * Amazon Cognito Identity (Python 3)\n  * Amazon Cognito Sync (Python 3)\n  * Amazon Machine Learning (Python 3)\n\n* Monitoring\n\n  * Amazon CloudWatch (EC2 Only) (Python 3)\n  * Amazon CloudWatch Logs (Python 3)\n\n* Networking\n\n  * Amazon Route53 (Python 3)\n  * Amazon Route 53 Domains (Python 3)\n  * Amazon Virtual Private Cloud (VPC) (Python 3)\n  * Elastic Load Balancing (ELB) (Python 3)\n  * AWS Direct Connect (Python 3)\n\n* Payments and Billing\n\n  * Amazon Flexible Payment Service (FPS)\n\n* Storage\n\n  * Amazon Simple Storage Service (S3) (Python 3)\n  * Amazon Glacier (Python 3)\n  * Amazon Elastic Block Store (EBS)\n  * Google Cloud Storage\n\n* Workforce\n\n  * Amazon Mechanical Turk\n\n* Other\n\n  * Marketplace Web Services (Python 3)\n  * AWS Support (Python 3)\n\nThe goal of boto is to support the full breadth and depth of Amazon\nWeb Services.  In addition, boto provides support for other public\nservices such as Google Storage in addition to private cloud systems\nlike Eucalyptus, OpenStack and Open Nebula.\n\nBoto is developed mainly using Python 2.6.6 and Python 2.7.3 on Mac OSX\nand Ubuntu Maverick.  It is known to work on other Linux distributions\nand on Windows.  Most of Boto requires no additional libraries or packages\nother than those that are distributed with Python.  Efforts are made\nto keep boto compatible with Python 2.5.x but no guarantees are made.\n\n************\nInstallation\n************\n\nInstall via `pip`_:\n\n::\n\n    $ pip install boto\n\nInstall from source:\n\n::\n\n    $ git clone git://github.com/boto/boto.git\n    $ cd boto\n    $ python setup.py install\n\n**********\nChangeLogs\n**********\n\nTo see what has changed over time in boto, you can check out the\nrelease notes at `http://docs.pythonboto.org/en/latest/#release-notes`\n\n***************************\nFinding Out More About Boto\n***************************\n\nThe main source code repository for boto can be found on `github.com`_.\nThe boto project uses the `gitflow`_ model for branching.\n\n`Online documentation`_ is also available. The online documentation includes\nfull API documentation as well as Getting Started Guides for many of the boto\nmodules.\n\nBoto releases can be found on the `Python Cheese Shop`_.\n\nJoin our IRC channel `#boto` on FreeNode.\nWebchat IRC channel: http://webchat.freenode.net/?channels=boto\n\nJoin the `boto-users Google Group`_.\n\n*************************\nGetting Started with Boto\n*************************\n\nYour credentials can be passed into the methods that create\nconnections.  Alternatively, boto will check for the existence of the\nfollowing environment variables to ascertain your credentials:\n\n**AWS_ACCESS_KEY_ID** - Your AWS Access Key ID\n\n**AWS_SECRET_ACCESS_KEY** - Your AWS Secret Access Key\n\nCredentials and other boto-related settings can also be stored in a\nboto config file.  See `this`_ for details.\n\n.. _Contributing Guidelines: https://github.com/boto/boto/blob/develop/CONTRIBUTING\n.. _Porting Guide: http://boto.readthedocs.org/en/latest/porting_guide.html\n.. _pip: http://www.pip-installer.org/\n.. _release notes: https://github.com/boto/boto/wiki\n.. _github.com: http://github.com/boto/boto\n.. _Online documentation: http://docs.pythonboto.org\n.. _Python Cheese Shop: http://pypi.python.org/pypi/boto\n.. _this: http://docs.pythonboto.org/en/latest/boto_config_tut.html\n.. _gitflow: http://nvie.com/posts/a-successful-git-branching-model/\n.. _neo: https://github.com/boto/boto/tree/neo\n.. _boto-users Google Group: https://groups.google.com/forum/?fromgroups#!forum/boto-users\n\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/boto/boto/",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "boto",
            "package_url": "https://pypi.org/project/boto/",
            "platform": "Posix; MacOS X; Windows",
            "project_url": "https://pypi.org/project/boto/",
            "project_urls": {
               "Homepage": "https://github.com/boto/boto/"
            },
            "release_url": "https://pypi.org/project/boto/2.49.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Amazon Web Services Library",
            "version": "2.49.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Hadi Asghari",
            "author_email": "hd.asghari@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 3",
               "Topic :: Software Development :: Libraries :: Python Modules",
               "Topic :: System :: Networking"
            ],
            "description": "pyasn\n=====\n\n.. image:: https://pypip.in/v/pyasn/badge.png\n   :target: https://pypi.python.org/pypi/pyasn\n\n.. image:: https://pypip.in/d/pyasn/badge.png\n   :target: https://pypi.python.org/pypi/pyasn\n\n\n**pyasn** is a Python extension module that enables very fast IP address to Autonomous System Number lookups.\nCurrent state and Historical lookups can be done, based on the MRT/RIB BGP archive used as input.\n\n*pyasn* is different from other ASN lookup tools in that it provides **offline** and **historical** lookups.\nIt provides utility scripts for users to build their own lookup databases based on any MRT/RIB archive.\nThis makes *pyasn* much faster than online dig/whois/json lookups.\n\nThe module is written in C and Python, and cross-compiles on Linux and Windows. Underneath, it uses a radix tree\ndata structure for storage of IP addresses. In the current version, it borrows code from *py-radix* to support\nboth IPV4 and IPV6 network prefixes. The current release is a beta. Compared to the previous version, it provides\nsupport for Python 2 and 3; adds new functionality, performance improvements, and unit-tests.\n\n*pyasn* is developed and maintained by researchers at the Economics of Cybersecurity research group at Delft\nUniversity of Technology (http://econsec.tbm.tudlft.nl). The package is used on an almost daily basis and bugs\nare fixed pretty quickly.  The package is largely developed and maintained by Hadi Asghari and Arman Noroozian.\nPlease report any bugs via GitHub (https://github.com/hadiasghari/pyasn) or email the developers.\n\n\nInstallation\n============\nInstallation is a breeze via pip: ::\n\n    pip install pyasn --pre\n\nOr with the standard Python: ::\n\n    python setup.py build\n    python setup.py install --record log\n\nYou will need to have pip, setuptools and build essentials installed if you build the package manually. On\nUbuntu/Debian you can get them using the following command: ::\n\n    sudo apt-get install python-pip python-dev build-essential\n\nBuilding the C module on Windows, using either pip or from source, requires Microsoft Visual C++ to be installed.\npyasn has been tested using Visual C++ Express 2010, available freely from Microsoft's website, on both the\nofficial Python 3.4 release and Miniconda3. Other versions of Python, Visual Studio, and Cygwin could also work\nwith minor modifications.\n\nWe plan to release *pyasn* packages to major Linux repositories once it is out of beta.\n\n\nUsage\n=====\nA simple example that demonstrates most of the features: ::\n\n    import pyasn\n\n    # Initialize module and load IP to ASN database\n    # the sample database can be downloaded or built - see below\n    asndb = pyasn.pyasn('ipasn_20140513.dat')\n\n    asndb.lookup('8.8.8.8')\n    # should return: (15169, '8.8.8.0/24'), the origin AS, and the BGP prefix it matches\n\n    asndb.get_as_prefixes(1128)\n    # returns ['130.161.0.0/16', '131.180.0.0/16', '145.94.0.0/16'], TU-Delft prefixes\n\n\nIPASN Data Files\n================\nIPASN data files are a long list of prefixes used to lookup AS number for IPs. An excerpt from such a file looks\nlike this: ::\n\n    ; IP-ASN32-DAT file\n    ; Original file : <Path to a rib file>\n    ; Converted on  : Tue May 13 22:03:05 2014\n    ; CIDRs         : 512490\n    ;\n    1.0.0.0/24  15169\n    1.0.128.0/17        9737\n    1.0.128.0/18        9737\n    1.0.128.0/19        9737\n    1.0.129.0/24        23969\n    ...\n\nIPASN data files can be created by downloading MRT/RIB BGP archives from Routeviews (or similar sources),\nand parsing them using provided scripts that tail the BGP AS-Path. This can be done simply as follows: ::\n\n    pyasn_util_download.py --latest\n    pyasn_util_convert.py --single <Downloaded RIB File> <ipasn_db_file_name>\n\n\n**NOTE:** These scripts are by default installed to ``/usr/local/bin`` and can be executed directly. If you installed\nthe package to a user directory, these scripts will not be on the path and you will have to invoke them by navigating\nto the folder in which they have been copied (e.g. ``~/.local/bin``).\n\nWe also provide download links to a large number of previously generated IPASN data files. These are based on\nweekly  snapshots of the Routeviews data from 2005-2015, accessible here:\nhttp://data.3tu.nl/repository/uuid:d4d23b8e-2077-4592-8b47-cb476ad16e12\n\n**New in v1.6:** To save disk space, you can gzip IPASN data files. The load time will be slighlty longer.\n\n\nPerformance Tip\n===============\nInitial loading of a IPASN data file is the most heavy operation of the package. For fast lookups using multiple\nIPASN data files, for instance for historical lookups on multiple dates, we recommend caching of loaded data files\nfor better performance.\n\n\nUninstalling pyasn\n==================\nYou can remove *pyasn* as follows: ::\n\n    pip uninstall pyasn\n\nIf you built and installed the package your self use the recorded log to remove the installed files.\n\n**Removing PyASN version 1.2**: *pyasn* v1.5/1.6 and v1.2 can be installed side by side (due to lower-cased package\nname). To avoid mistakes, you can uninstall the old **PyASN** by deleting the following files from your Python\ninstallation: ::\n\n    PYTHONDIR/dist-packages/PyASN.so\n    PYTHONDIR/dist-packages/PyASN-1.2.egg-info\n\n\nPackage Structure\n=================\nThe main portions of the directory tree are as follows: ::\n\n    .\n    ├── pyasn/__init__.py       # Python code of the main pyasn module\n    ├── pyasn/pyasn_radix.c     # C extension code (Python RADIX module with bulk load)\n    ├── pyasn/_radix/*          # C extension code (Based on original RADIX code from MRTd)\n    ├── pyasn/mrtx.py           # python module used to convert MRT files to pyasn DB files\n    ├── pyasn-utils/*.py        # Scripts to download & convert BGP MRT dumps to IPASN databases\n    ├── data/                   # Test Resources and some sample DBs to use\n    ├── tests/                  # Tests\n    └── setup.py                # Standard setup.py for installation/testing/etc.\n\n\n\nTesting pyasn Sources\n=====================\nA limited number of unit tests are provided in the ``tests/`` directory when downlading the sources. They can be\nrun with the following command: ::\n\n    python setup.py test\n\nThis beta release has been tested under python version 2.6, 2.7, 3.3, 3.4 and 3.5. We appreciate contributions towards\ntesting *pyasn*!\n\n**New in v1.6:** pyasn_util_convert.py offers a '--dump-screen' option which shows the MRT/RIB archive contents and\nthe chosen origin-AS.\n\n\nLicense & Acknowledgments\n=========================\n*pyasn* is licensed under the MIT license.\n\nIt extends code from py-radix (Michael J. Schultz and Damien Miller),  and improves upon it in several ways, for\ninstance in lowering memory usage and adding bulk prefix/origin load. The underlying radix tree implementation is\ntaken (and modified) from MRTd. These are all subject to their respective licenses.  Please see the LICENSE file\nfor details.\n\nThanks to Dr. Chris Lee (of Shadowserver) for proposing the use of radix trees.\n\nA handful of GitHub developers have contributed features and bug fixes to the latest releases.\nMany thanks to all of them.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": null,
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/hadiasghari/pyasn",
            "keywords": "ip asn autonomous system bgp whois prefix radix python routing networking",
            "license": "MIT",
            "maintainer": null,
            "maintainer_email": null,
            "name": "pyasn",
            "package_url": "https://pypi.org/project/pyasn/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/pyasn/",
            "project_urls": {
               "Homepage": "https://github.com/hadiasghari/pyasn"
            },
            "release_url": "https://pypi.org/project/pyasn/1.6.0b1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Offline IP address to Autonomous System Number lookup module.",
            "version": "1.6.0b1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Perdix Software",
            "author_email": "ssmith@perdixsw.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 2 - Pre-Alpha",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.4",
               "Programming Language :: Python :: 3.5",
               "Programming Language :: Python :: 3.6",
               "Topic :: Office/Business :: Financial",
               "Topic :: Scientific/Engineering :: Mathematics"
            ],
            "description": "UNKNOWN",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "https://www.github.com/perdixsw/umpy/tarball/0.1.0",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://www.github.com/perdixsw/umpy",
            "keywords": "units,measure,measurement,conversion,converter",
            "license": "MIT",
            "maintainer": null,
            "maintainer_email": null,
            "name": "umpy",
            "package_url": "https://pypi.org/project/umpy/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/umpy/",
            "project_urls": {
               "Download": "https://www.github.com/perdixsw/umpy/tarball/0.1.0",
               "Homepage": "https://www.github.com/perdixsw/umpy"
            },
            "release_url": "https://pypi.org/project/umpy/0.1.0/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Simple unit of measure conversion for python, optimized for manufacturing contexts.",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Jay Marcyes",
            "author_email": "jay@marcyes.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Environment :: Console",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: MIT License",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Topic :: Software Development :: Testing"
            ],
            "description": "Pyt\n===\n\nPyt is a lightweight wrapper around `Python’s unittest\nmodule <https://docs.python.org/3/library/unittest.html>`__ that adds\nsome nice features and enhancements over the stock ``unittest`` module.\n\nQuickstart\n~~~~~~~~~~\n\nPyt overrides unittest’s built-in pathfinding to be smarter and less\nverbose, so you can match tests using prefix matching which makes\nrunning a test like:\n\n::\n\n   $ python -m unittest tests.foo_test.BarTestCase.test_che\n\nas simple as:\n\n::\n\n   $ pyt foo.Bar.che\n\nBut it’s even less verbose if you want it to be, pyt can reach into the\nmodules and classes to do its matching, so you don’t even need to\nspecify the module and class if you don’t want to:\n\n::\n\n   $ pyt che\n\nMore examples\n^^^^^^^^^^^^^\n\nTo run all the ``Happy`` tests:\n\n::\n\n   $ pyt Happy\n\nTo run all the ``newmodule`` tests:\n\n::\n\n   $ pyt newmodule\n\nTo run more than one test:\n\n::\n\n   $ pyt test1 test2 ...\n\nTo run every test ``pyt`` can find:\n\n::\n\n   $ pyt\n\nAnd the way I like to run all tests in the current directory:\n\n::\n\n   $ pyt -vb\n\nWhich can also be written:\n\n::\n\n   $ pyt --verbose --buffer\n\nFlags\n~~~~~\n\nTo see everything pyt can do\n\n::\n\n   $ pyt --help\n\n–warnings\n^^^^^^^^^\n\nThis will convert warnings into errors.\n\n::\n\n   $ pyt --warnings\n\n–rerun\n^^^^^^\n\nIf your last testrun had failing tests this will rerun only the tests\nthat failed.\n\n::\n\n   $pyt --rerun\n\nThings to be aware of\n~~~~~~~~~~~~~~~~~~~~~\n\npyt uses Python’s PEP 8 style conventions\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n``pyt`` uses `Python’s code styling\nconventions <http://www.python.org/dev/peps/pep-0008/>`__ to decide what\nis the module and class, so, given input like this:\n\n::\n\n   $ pyt foo.bar.Baz.che\n\n``pyt`` will consider ``foo.bar`` to be the module, ``Baz`` to be a\nclass (because it starts with a capital letter), and ``che`` to be a\nmethod (since it comes after the class).\n\nLikewise, ``pyt`` uses unittest conventions, so a test module should end\nwith ``_test`` (eg, ``foo.bar_test``) or start with test (eg,\n``test_foo.py``) and a TestCase class should extend\n``unittest.TestCase``, and test methods should start with ``test_`` (eg,\n``test_che``).\n\nVague input can cause pyt to run more tests than you expect\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSo if you have something like this:\n\n::\n\n   project/\n     __init__.py\n     user.py\n     foo/\n       __init__.py\n       user.py\n     tests/\n       __init__.py\n       user_test.py\n       foo/\n         __init__.py\n         user_test.py\n\nAnd you want to run tests for ``foo.user`` and you run:\n\n::\n\n   $ pyt user\n\nit will run both ``tests/user_test`` and ``tests.foo.user_test``, the\nsolution is to just be more verbose when you have to be:\n\n::\n\n   $ pyt foo.user\n\nEnvironment Variables\n^^^^^^^^^^^^^^^^^^^^^\n\nIf you are running the tests within pyt, you might notice there is an\nenvironment variable ``PYT_TEST_COUNT`` that contains the count of how\nmany tests pyt found to run.\n\nInstallation\n------------\n\nUse ``pip``:\n\n::\n\n   $ pip install pyt\n\nYou can also get it directly from the repo:\n\n::\n\n   $ pip install --upgrade git+https://github.com/Jaymon/pyt#egg=pyt\n\nIf you install pyt using Python 3 it can also be invoked using the\n``pyt3`` command:\n\n::\n\n   $ pyt3 --help\n\nLikewise, Python 2 installs a ``pyt2`` command:\n\n::\n\n   $ pyt2 --help\n\nTesting\n-------\n\nTesting in 2.7 on most systems:\n\n::\n\n   $ python -m unittest pyt_test\n\nTesting in 3.5 on MacOS:\n\n::\n\n   $ python3.5 -m unittest pyt_test\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "http://github.com/Jaymon/pyt",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyt",
            "package_url": "https://pypi.org/project/pyt/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyt/",
            "project_urls": {
               "Homepage": "http://github.com/Jaymon/pyt"
            },
            "release_url": "https://pypi.org/project/pyt/1.0.5/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "easily run python unit tests",
            "version": "1.0.5",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Bradley Odell",
            "author_email": "btodell@hotmail.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Environment :: Console",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
               "Natural Language :: English",
               "Operating System :: OS Independent",
               "Programming Language :: Python :: 2.6",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Topic :: Software Development :: Build Tools"
            ],
            "description": "pyz\n===\n\n*Packages all source code and dependencies into a single Python zip application.*\n\nSummary\n-------\n\nDeploying a Python application any larger than a single file is\ncumbersome - this library aims to solve that problem.\n\nPython has been able to run code from within a zip file since version\n2.6. Python 3.5 introduced the `zipapp <https://docs.python.org/3/library/zipapp.html>`__ module\nwhich aims to simplify the process of creating a zip application.\nHowever, **zipapp** isn't a complete solution to the problem - it\ndoesn't handle dependencies and it doesn't include certain extra\nfeatures that this library provides.\n\nThis library allows you to bundle all of your Python code **AND** your\ndependencies into a single Python zip application file.\n\nNote: The dependency bundling feature is not implemented yet, but it is\nin the works!\n\nFeatures\n--------\n\n1. Bundle all Python source code with fine-grained control over included files.\n2. Ability to \"unixify\" the output application by prepending a customizable\n   `shebang <https://en.wikipedia.org/wiki/Shebang_(Unix)>`__.\n3. Python interpreter version check - display a friendly notice instead\n   of a Python exception if the user runs your application using an\n   unsupported Python version.\n\nPlanned\n-------\n\n1. Automatically identify dependencies and package them accordingly.\n",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "https://github.com/BTOdell/pyz/archive/0.4.3.tar.gz",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/BTOdell/pyz",
            "keywords": "pyz zip app zipapp bundle dependencies library",
            "license": "GPLv3",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyz",
            "package_url": "https://pypi.org/project/pyz/",
            "platform": "",
            "project_url": "https://pypi.org/project/pyz/",
            "project_urls": {
               "Download": "https://github.com/BTOdell/pyz/archive/0.4.3.tar.gz",
               "Homepage": "https://github.com/BTOdell/pyz"
            },
            "release_url": "https://pypi.org/project/pyz/0.4.3/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Packages all source code and dependencies into a single Python zip application.",
            "version": "0.4.3",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Val Neekman",
            "author_email": "info@neekware.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 3 - Alpha",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Operating System :: POSIX",
               "Programming Language :: Python",
               "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description": "AWSLI\n====================\n\n**Amazon Web Services Line Interpreter**\n\n**Author:** Val Neekman [ info@neekware.com, @vneekman ]\n\nOverview\n========\n\nA Line Interpreter for Amazon Web Services.\n\nHow to install\n==================\n\n    1. easy_install awsli\n    2. pip install awsli\n    3. git clone http://github.com/un33k/awsli\n        a. cd awsli\n        b. run python setup.py\n    4. wget https://github.com/un33k/awsli/zipball/master\n        a. unzip the downloaded file\n        b. cd into awsli-* directory\n        c. run python setup.py\n\nHow to use\n=================\n\n``Usage``\n\n``Note:``\n\nRunning the tests\n=================\n\nTo run the tests against the current environment:\n\n    python test.py\n\nChangelog\n=========\n\n0.1\n-----\n\n* Initial release\n\n\nLicense\n=======\n\nCopyright (c) 2012, Val Neekman\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without \nmodification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this \nlist of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this \nlist of conditions and the following disclaimer in the documentation and/or \nother materials provided with the distribution.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND \nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED \nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE \nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE \nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL \nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR \nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, \nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE \nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/un33k/awsli",
            "keywords": null,
            "license": "BSD",
            "maintainer": null,
            "maintainer_email": null,
            "name": "awsli",
            "package_url": "https://pypi.org/project/awsli/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/awsli/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "https://github.com/un33k/awsli"
            },
            "release_url": "https://pypi.org/project/awsli/0.0.1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "A Line Interpreter for Amazon Web Services",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Armin Ronacher",
            "author_email": "armin.ronacher@active-4.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Environment :: Web Environment",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
               "Topic :: Software Development :: Libraries :: Python Modules",
               "Topic :: Text Processing :: Markup :: HTML"
            ],
            "description": "jinja\n~~~~~\n\nJinja is a `sandboxed`_ template engine written in pure Python. It\nprovides a `Django`_ like non-XML syntax and compiles templates into\nexecutable python code. It's basically a combination of Django templates\nand python code.\n\nNutshell\n--------\n\nHere a small example of a Jinja template::\n\n    {% extends 'base.html' %}\n    {% block title %}Memberlist{% endblock %}\n    {% block content %}\n      <ul>\n      {% for user in users %}\n        <li><a href=\"{{ user.url|e }}\">{{ user.username|e }}</a></li>\n      {% endfor %}\n      </ul>\n    {% endblock %}\n\nPhilosophy\n----------\n\nApplication logic is for the controller but don't try to make the life\nfor the template designer too hard by giving him too few functionality.\n\nFor more informations visit the new `jinja webpage`_ and `documentation`_.\n\nNote\n----\n\nThis is the Jinja 1.0 release which is completely incompatible with the\nold \"pre 1.0\" branch. The old branch will still receive security updates\nand bugfixes but the 1.0 branch will be the only version that receives\nsupport.\n\nIf you have an application that uses Jinja 0.9 and won't be updated in\nthe near future the best idea is to ship a Jinja 0.9 checkout together\nwith the application.\n\nThe `Jinja tip`_ is installable via `easy_install` with ``easy_install\nJinja==dev``.\n\n.. _sandboxed: http://en.wikipedia.org/wiki/Sandbox_(computer_security)\n.. _Django: http://www.djangoproject.com/\n.. _jinja webpage: http://jinja.pocoo.org/\n.. _documentation: http://jinja.pocoo.org/documentation/index.html\n.. _Jinja tip: http://dev.pocoo.org/hg/jinja-main/archive/tip.tar.gz#egg=Jinja-dev\n\n\n:copyright: 2007 by Armin Ronacher.\n:license: BSD, see LICENSE for more details.",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "http://jinja.pocoo.org/",
            "keywords": "python.templating.engines",
            "license": "BSD",
            "maintainer": null,
            "maintainer_email": null,
            "name": "Jinja",
            "package_url": "https://pypi.org/project/Jinja/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/Jinja/",
            "project_urls": {
               "Download": "UNKNOWN",
               "Homepage": "http://jinja.pocoo.org/"
            },
            "release_url": "https://pypi.org/project/Jinja/1.2/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "A small but fast and easy to use stand-alone template engine written in pure python.",
            "version": "1.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Hsiaoming Yang",
            "author_email": "me@lepture.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 4 - Beta",
               "Environment :: Console",
               "Environment :: Web Environment",
               "Framework :: Django",
               "Framework :: Flask",
               "Intended Audience :: Developers",
               "License :: OSI Approved :: BSD License",
               "Operating System :: OS Independent",
               "Programming Language :: Python",
               "Programming Language :: Python :: 2",
               "Programming Language :: Python :: 2.7",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.5",
               "Programming Language :: Python :: 3.6",
               "Programming Language :: Python :: 3.7",
               "Programming Language :: Python :: 3.8",
               "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
               "Topic :: Internet :: WWW/HTTP :: WSGI :: Application",
               "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description": "Authlib\n=======\n\nThe ultimate Python library in building OAuth and OpenID Connect servers.\nJWS, JWK, JWA, JWT are included.\n\nUseful Links\n------------\n\n1. Homepage: https://authlib.org/\n2. Documentation: https://docs.authlib.org/\n3. Purchase Commercial License: https://authlib.org/plans\n4. Blog: https://blog.authlib.org/\n5. More Repositories: https://github.com/authlib\n6. Twitter: https://twitter.com/authlib\n7. Donate: https://www.patreon.com/lepture\n\nSpecifications\n--------------\n\n- RFC5849: The OAuth 1.0 Protocol\n- RFC6749: The OAuth 2.0 Authorization Framework\n- RFC6750: The OAuth 2.0 Authorization Framework: Bearer Token Usage\n- RFC7009: OAuth 2.0 Token Revocation\n- RFC7515: JSON Web Signature\n- RFC7516: JSON Web Encryption\n- RFC7517: JSON Web Key\n- RFC7518: JSON Web Algorithms\n- RFC7519: JSON Web Token\n- RFC7521: Assertion Framework for OAuth 2.0 Client Authentication and Authorization Grants\n- RFC7523: JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants\n- RFC7591: OAuth 2.0 Dynamic Client Registration Protocol\n- RFC7662: OAuth 2.0 Token Introspection\n- RFC8414: OAuth 2.0 Authorization Server Metadata\n- RFC8628: OAuth 2.0 Device Authorization Grant\n- OpenID Connect 1.0\n- OpenID Connect Discovery 1.0\n\nImplementations\n---------------\n\n- Requests OAuth 1 Session\n- Requests OAuth 2 Session\n- Requests Assertion Session\n- Flask OAuth 1/2 Client\n- Django OAuth 1/2 Client\n- Flask OAuth 1.0 Server\n- Flask OAuth 2.0 Server\n- Flask OpenID Connect 1.0\n- Django OAuth 1.0 Server\n- Django OAuth 2.0 Server\n- Django OpenID Connect 1.0\n\nLicense\n-------\n\nAuthlib is licensed under BSD. Please see LICENSE for licensing details.\n\nIf this license does not fit your company, consider to purchase a commercial\nlicense. Find more information on `Authlib Plans`_.\n\n.. _`Authlib Plans`: https://authlib.org/plans\n\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://authlib.org/",
            "keywords": "",
            "license": "BSD-3-Clause",
            "maintainer": "",
            "maintainer_email": "",
            "name": "Authlib",
            "package_url": "https://pypi.org/project/Authlib/",
            "platform": "any",
            "project_url": "https://pypi.org/project/Authlib/",
            "project_urls": {
               "Blog": "https://blog.authlib.org/",
               "Bug Tracker": "https://github.com/lepture/authlib/issues",
               "Commercial License": "https://authlib.org/plans",
               "Documentation": "https://docs.authlib.org/",
               "Donate": "https://lepture.com/donate",
               "Homepage": "https://authlib.org/",
               "Source Code": "https://github.com/lepture/authlib"
            },
            "release_url": "https://pypi.org/project/Authlib/0.14.3/",
            "requires_dist": [
               "cryptography",
               "requests ; extra == 'client'"
            ],
            "requires_python": "",
            "summary": "The ultimate Python library in building OAuth and OpenID Connect servers.",
            "version": "0.14.3",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Julien Bigot",
            "author_email": "julien.bigot@cea.fr",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Environment :: Console",
               "License :: OSI Approved :: MIT License"
            ],
            "description": "# zpp\n\nThis is zpp, the Z Pre-Processor.\n\nZpp transforms bash in a pre-processor for F90 source files.\nIt offers a set of functions specifically tailored to build clean Fortran90\ninterfaces by generating code for all types, kinds, and array ranks supported by\na given compiler.\n\n## Syntax\n\nZpp files are typically named `*.F90.zpp`.\n\nIn these files, the lines that start with `!$SH` are interpreted as bash lines. \nOther lines are copied as-is, except that variable substitution is operated as\nin a double-quoted string, including bash commands `${VAR}` or `$(command)`.\nIf inside a bash control block (`if`, `for`, etc.), the output generation obeys\nthe control statement.\n\nFor example, this code:\n```\n!$SH for GREETED in world universe multiverse ; do\nprint *, \"Hello ${GREETED}\"\n!$SH done\n```\n\nWould produce the following result:\n```\nprint *, \"Hello world\"\nprint *, \"Hello universe\"\nprint *, \"Hello multiverse\"\n```\n\n### Support functions\n\nPredefined bash functions, variable and code can be provided in `.zpp.sh` files\nthat can be included with `#!SH source <filename>.zpp.sh`.\n\n**Beware**: a file NEEDs to have the `.zpp.sh` extension to be included from\nzpp.\n\nZpp provides a standard library of functions tailored to build clean Fortran90\ninterfaces by generating code for all types, kinds, and array ranks supported by\na given compiler.\n\n#### zpp_str_repeat\n\nFound in `base.zpp.sh`\n\nOutputs a string multiple times.\n\nParameters:\n1. the string to Repeat\n2. the lower bound of the iterations (inclusive)\n3. the upper bound of the iterations (inclusive)\n4. the string separator\n5. the string starter\n6. the string ender\n\nRepeats string `$1` (`$3`-`$2`+1) times, separated by string `$4` inside `$5`\n`$6`.\n* If the number of repetitions is negative, the result is empty.\n* If `$1` contains the '@N' substring, it will be replaced by the iteration\n  number (from `$2` to `$3`).\n\nexample:\n```\n#!SH source base.zpp.sh\nzpp_str_repeat v@N 5 7 '...' '<<' '>>'\nzpp_str_repeat w@N 1 1 '...' '<<' '>>'\nzpp_str_repeat x@N 1 0 '...' '<<' '>>'\n```\noutput:\n```\n<<v5...v6...v7>>\n<<w1>>\n```\n\n#### zpp_str_repeat_reverse\n\nFound in `base.zpp.sh`\n\nOutputs a string multiple times in reverse order.\n\nParameters:\n1. the string to Repeat\n2. the upper bound of the iterations (inclusive)\n3. the lower bound of the iterations (inclusive)\n4. the string separator\n5. the string starter\n6. the string ender\n\nRepeats string `$1` (`$2`-`$3`+1) times, separated by string `$4` inside `$5`\n`$6`.\n* If the number of repetitions is negative, the result is empty.\n* If `$1` contains the '@N' substring, it will be replaced by the iteration\n  number (from `$2` to `$3`, i.e. upper to lower).\n\nexample:\n```\n#!SH source base.zpp.sh\nzpp_str_repeat_reverse v@N 5 7 '...' '<<' '>>'\nzpp_str_repeat_reverse w@N 1 1 '...' '<<' '>>'\nzpp_str_repeat_reverse x@N 1 0 '...' '<<' '>>'\n```\noutput:\n```\n<<v7...v6...v5>>\n<<w1>>\n```\n\n#### ZPP_FORT_TYPES\n\nFound in `fortran.zpp.sh`\n\nThe list of types supported by the fortran compiler as zpp:typeIDs.\n\nThe compiler ID should be provided in `ZPP_CONFIG` as `config.<ID>`.\nThe supported predefined IDs are: `Gnu`, `Intel`, `PGI` and `XL`.\nYou can also provide definitions for an additional compiler by defining\n`ZPP_FORT_TYPES` in a file named `config.<ID>.zpp.sh`.\n\nIf you use cmake, it will automatically generate such a file for your compiler\nand define  `ZPP_CONFIG` so you don't have to handle it.\n\n### zpp_fort_array_desc\n\nFound in `fortran.zpp.sh`\n\nOutputs an assumed shaped array descriptor of the provided size.\n\nParameters:\n1. the size of the assumed shaped array\n\nexample:\n```\n#!SH source fortran.zpp.sh\ninteger:: scalar$(zpp_fort_array_desc 0)\ninteger:: array1d$(zpp_fort_array_desc 1)\ninteger:: array2d$(zpp_fort_array_desc 2)\n```\noutput:\n```\ninteger:: scalar\ninteger:: array1d(:)\ninteger:: array2d(:,:)\n```\n\n### zpp_fort_ptype\n\nFound in `fortran.zpp.sh`\n\nOutputs the type associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\nexample:\n```\n#!SH source fortran.zpp.sh\n!$SH for T in ${ZPP_FORT_TYPES} ; do\n$(zpp_fort_ptype $1)\n!$SH done\n```\nexample output:\n```\nCHARACTER\nCOMPLEX\nCOMPLEX\nINTEGER\nINTEGER\nINTEGER\nINTEGER\nLOGICAL\nREAL\nREAL\n```\n\n### zpp_fort_kind\n\nFound in `fortran.zpp.sh`\n\nOutputs the kind associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\nexample:\n```\n#!SH source fortran.zpp.sh\n!$SH for T in ${ZPP_FORT_TYPES} ; do\n$(zpp_fort_kind $1)\n!$SH done\n```\nexample output:\n```\n1\n4\n8\n1\n2\n4\n8\n1\n4\n8\n```\n\n### zpp_fort_type\n\nFound in `fortran.zpp.sh`\n\nOutputs the full type (with kind included) associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n2. additional attributes for the type\n\nexample:\n```\n#!SH source fortran.zpp.sh\n!$SH for T in ${MY_CHAR_TYPES} ; do\n$(zpp_fort_type $1)\n$(zpp_fort_type $1 \"len=5\")\n!$SH done\n```\nexample output:\n```\nCHARACTER(KIND=1)\nCHARACTER(KIND=1,len=5)\n```\n\n### zpp_fort_sizeof\n\nFound in `fortran.zpp.sh`\n\nOutputs the size in bits associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\n### zpp_fort_io_format\n\nFound in `fortran.zpp.sh`\n\nOutputs an IO descriptor suitable for a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\n### ZPP_HDF5F_TYPES\n\nFound in `hdf5_fortran.zpp.sh`\n\nA list of zpp:typeIDs supported by HDF5.\n\n### hdf5_constant\n\nFound in `hdf5_fortran.zpp.sh`\n\nOutputs the HDF5 type constant associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\nexample:\n```\n#!SH source hdf5_fortran.zpp.sh\n!$SH for T in ${ZPP_HDF5F_TYPES} ; do\n$(hdf5_constant $1)\n!$SH done\n```\nexample output:\n```\nH5T_NATIVE_INTEGER\nH5T_NATIVE_REAL\nH5T_NATIVE_REAL\nH5T_NATIVE_CHARACTER\n```\n\n\n## Command-line interface\n\nZpp basic usage is as follow:\n```\nUsage: zpp [Options...] <source> [<destination>]\n  use `zpp -h' for more info\n\nPreprocesses BASH in-line commands in a source file\n\nOptions:\n  --version        show program's version number and exit\n  -h, --help       show this help message and exit\n  -I DIR           Add DIR to search list for source directives\n  -o FILE          Place the preprocessed code in file FILE.\n  -D OPTION=VALUE  Set the value of OPTION to VALUE\n```\n\n## CMake interface\n\nSupport is provided for using zpp from CMake based projects, but you can use\nit from plain Makefiles too.\n\nThere are two ways you can use zpp from your CMake project:\n* with `add_subdirectory`: include zpp in your project and use it directly from\n  there,\n* with `find_package`: install zpp and use it as an external dependency of your\n  project.\n\n#### CMake subdirectory usage\n\nUsing zpp with `add_subdirectory` is very simple.\nJust copy the `zpp` directory in your source and point to it with\n`add_subdirectory(zpp)`.\nThe `zpp_preprocess` then becomes available to process zpp files.\n\nThis is demonstrated in `example/cmake_subdirectory`.\n\n#### CMake find usage\n\nUsing zpp with `find_package` is no more complex.\nIf zpp is installed, just add a `find_package(zpp REQUIRED)`.\nThe `zpp_preprocess` then becomes available to process zpp files.\n\nThis is demonstrated in `example/cmake_find`.\n\n## GMake usage\n\nUsing zpp from a GNU Makefile is slightly less powerful than from CMake.\nThe types and kinds supported by the Fortran compiler will not be automatically\ndetected.\nPredefined lists of supported types for well known compilers are provided\ninstead.\n\nTo use zpp from a Makefile, include the `share/zpp/zpp.mk` file (either from an\ninstalled location or from a subdirectory in your project).\nYou can then set the `zpp_COMPILER_ID` variable to the compiler you use and\n`.F90` files will be automatically generated from their `.F90.zpp` equivalent.\nThe `zppFLAGS` variable is automatically passed to zpp similarly to `CFLAGS` or\n`CXXFLAGS` for `cc` and `cxx`.\n\nThis is demonstrated in `example/cmake_makefile`.\n\n## Installation\n\nZpp can be installed using the usual python way with `setup.py`.\n```\n./setup.py --help\n```\n\nThe cmake approach is deprecated.\n\n## FAQ\n\nQ. Isn't zpp redundant with assumed type parameters?\n\nA.\nThe assumed type parameters functionality allows to implement part of what can\nbe done with zpp (support for all kinds of a type). However as of 2013 it was\nnot correctly supported on most compilers installed on the supercomputers.\n\nIn addition, many things can be done with zpp but not with assumed type\nparameters, such as support for variable array rank or small variations of the\ncode depending on the kind.\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "",
            "keywords": "bash Fortran pre-processor",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "zpp",
            "package_url": "https://pypi.org/project/zpp/",
            "platform": "",
            "project_url": "https://pypi.org/project/zpp/",
            "project_urls": {
               "Source Code": "https://github.com/pdidev/zpp/"
            },
            "release_url": "https://pypi.org/project/zpp/1.0.4/",
            "requires_dist": [
               "setuptools"
            ],
            "requires_python": "",
            "summary": "a Bash Pre-Processor for Fortran. ZPP is useful in order to build clean Fortran90 interfaces. It allows to generate Fortran code for all types, kinds, and array ranks supported by the compiler.",
            "version": "1.0.4",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Dheepak Krishnamurthy",
            "author_email": "kdheepak89@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# zip [![](https://travis-ci.org/kdheepak/zip.svg?branch=master)](https://travis-ci.org/kdheepak/zip/branches)\n\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://github.com/kdheepak/zip",
            "keywords": "",
            "license": "Revised BSD License",
            "maintainer": "",
            "maintainer_email": "",
            "name": "zip",
            "package_url": "https://pypi.org/project/zip/",
            "platform": "",
            "project_url": "https://pypi.org/project/zip/",
            "project_urls": {
               "Homepage": "https://github.com/kdheepak/zip"
            },
            "release_url": "https://pypi.org/project/zip/0.0.2/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
         },
         {
            "author": "Intel Corporation",
            "author_email": "scripting@intel.com",
            "bugtrack_url": null,
            "classifiers": [
               "Development Status :: 5 - Production/Stable",
               "Intended Audience :: Developers",
               "Intended Audience :: Education",
               "Intended Audience :: Other Audience",
               "Intended Audience :: Science/Research",
               "Intended Audience :: System Administrators",
               "License :: Other/Proprietary License",
               "Operating System :: MacOS",
               "Operating System :: Microsoft :: Windows",
               "Operating System :: POSIX",
               "Operating System :: Unix",
               "Topic :: Software Development :: Libraries"
            ],
            "description": "Intel(R) Performance Primitives provides developers with high-quality, production-ready, low-level building blocks for image processing, signal processing, and data processing (data compression and decompression, and cryptography) applications.\n\nOne of many Intel(R) accelerated Python packages and performance library runtimes available on [PyPI](https://software.intel.com/en-us/articles/installing-the-intel-distribution-for-python-and-intel-performance-libraries-with-pip-and), and as part of [Intel(R) Distribution for Python](https://software.intel.com/en-us/distribution-for-python).\n\nFor latest release updates and security notifications, please [subscribe](https://software.intel.com/en-us/forums/intel-distribution-for-python) to the Intel(R) Distribution for Python Community forum.\n\nFree to use and redistribute pursuant to the [Intel Simplified Software License](https://software.intel.com/en-us/license/intel-simplified-software-license).\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
               "last_day": -1,
               "last_month": -1,
               "last_week": -1
            },
            "home_page": "https://software.intel.com/en-us/articles/empowering-science-with-high-performance-python",
            "keywords": "",
            "license": "Proprietary - Intel",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ipp",
            "package_url": "https://pypi.org/project/ipp/",
            "platform": "",
            "project_url": "https://pypi.org/project/ipp/",
            "project_urls": {
               "Homepage": "https://software.intel.com/en-us/articles/empowering-science-with-high-performance-python"
            },
            "release_url": "https://pypi.org/project/ipp/2019.4.243/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Intel(R) Performance Primitives",
            "version": "2019.4.243",
            "yanked": false,
            "yanked_reason": null
         }
      ]
   }
}